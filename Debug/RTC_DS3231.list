
RTC_DS3231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000817c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008350  08008350  00018350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087ac  080087ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080087ac  080087ac  000187ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087b4  080087b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087b4  080087b4  000187b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087b8  080087b8  000187b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080087bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  200001dc  08008998  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  08008998  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010260  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002214  00000000  00000000  0003046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00032680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bbb  00000000  00000000  000340d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e07  00000000  00000000  00056c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce5d0  00000000  00000000  00067a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136062  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c34  00000000  00000000  001360b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008334 	.word	0x08008334

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008334 	.word	0x08008334

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000f94:	1d39      	adds	r1, r7, #4
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <__io_putchar+0x20>)
 8000f9e:	f003 fbb6 	bl	800470e <HAL_UART_Transmit>
	return ch;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000024c 	.word	0x2000024c

08000fb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb2:	b09d      	sub	sp, #116	; 0x74
 8000fb4:	af1a      	add	r7, sp, #104	; 0x68
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fb6:	f000 fe19 	bl	8001bec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fba:	f000 f8a1 	bl	8001100 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fbe:	f000 f991 	bl	80012e4 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000fc2:	f000 f937 	bl	8001234 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000fc6:	f000 f95f 	bl	8001288 <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 8000fca:	f000 f905 	bl	80011d8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	printf("DS3231 example\n");
 8000fce:	4842      	ldr	r0, [pc, #264]	; (80010d8 <main+0x128>)
 8000fd0:	f004 ff3e 	bl	8005e50 <puts>

	address = ((uint16_t) DS3231);
 8000fd4:	4b41      	ldr	r3, [pc, #260]	; (80010dc <main+0x12c>)
 8000fd6:	22d0      	movs	r2, #208	; 0xd0
 8000fd8:	801a      	strh	r2, [r3, #0]

	Set_Time(hi2c1, address, 00, 53, 15, 4, 19, 1, 23);
 8000fda:	4b40      	ldr	r3, [pc, #256]	; (80010dc <main+0x12c>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	4c40      	ldr	r4, [pc, #256]	; (80010e0 <main+0x130>)
 8000fe0:	2217      	movs	r2, #23
 8000fe2:	9218      	str	r2, [sp, #96]	; 0x60
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	9217      	str	r2, [sp, #92]	; 0x5c
 8000fe8:	2213      	movs	r2, #19
 8000fea:	9216      	str	r2, [sp, #88]	; 0x58
 8000fec:	2204      	movs	r2, #4
 8000fee:	9215      	str	r2, [sp, #84]	; 0x54
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	9214      	str	r2, [sp, #80]	; 0x50
 8000ff4:	2235      	movs	r2, #53	; 0x35
 8000ff6:	9213      	str	r2, [sp, #76]	; 0x4c
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	9212      	str	r2, [sp, #72]	; 0x48
 8000ffc:	9311      	str	r3, [sp, #68]	; 0x44
 8000ffe:	4668      	mov	r0, sp
 8001000:	f104 0310 	add.w	r3, r4, #16
 8001004:	2244      	movs	r2, #68	; 0x44
 8001006:	4619      	mov	r1, r3
 8001008:	f004 fa1c 	bl	8005444 <memcpy>
 800100c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001010:	f000 fa16 	bl	8001440 <Set_Time>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Get_Time(hi2c1, address, buf_rx);
 8001014:	4b31      	ldr	r3, [pc, #196]	; (80010dc <main+0x12c>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	4c31      	ldr	r4, [pc, #196]	; (80010e0 <main+0x130>)
 800101a:	4a32      	ldr	r2, [pc, #200]	; (80010e4 <main+0x134>)
 800101c:	9212      	str	r2, [sp, #72]	; 0x48
 800101e:	9311      	str	r3, [sp, #68]	; 0x44
 8001020:	4668      	mov	r0, sp
 8001022:	f104 0310 	add.w	r3, r4, #16
 8001026:	2244      	movs	r2, #68	; 0x44
 8001028:	4619      	mov	r1, r3
 800102a:	f004 fa0b 	bl	8005444 <memcpy>
 800102e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001032:	f000 fa55 	bl	80014e0 <Get_Time>

		force_temp_conv(hi2c1, address);
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <main+0x12c>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	4c29      	ldr	r4, [pc, #164]	; (80010e0 <main+0x130>)
 800103c:	9311      	str	r3, [sp, #68]	; 0x44
 800103e:	4668      	mov	r0, sp
 8001040:	f104 0310 	add.w	r3, r4, #16
 8001044:	2244      	movs	r2, #68	; 0x44
 8001046:	4619      	mov	r1, r3
 8001048:	f004 f9fc 	bl	8005444 <memcpy>
 800104c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001050:	f000 faee 	bl	8001630 <force_temp_conv>

		TEMP = Get_Temp(hi2c1, address, temp);
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <main+0x12c>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	4c21      	ldr	r4, [pc, #132]	; (80010e0 <main+0x130>)
 800105a:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <main+0x138>)
 800105c:	9212      	str	r2, [sp, #72]	; 0x48
 800105e:	9311      	str	r3, [sp, #68]	; 0x44
 8001060:	4668      	mov	r0, sp
 8001062:	f104 0310 	add.w	r3, r4, #16
 8001066:	2244      	movs	r2, #68	; 0x44
 8001068:	4619      	mov	r1, r3
 800106a:	f004 f9eb 	bl	8005444 <memcpy>
 800106e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001072:	f000 fa99 	bl	80015a8 <Get_Temp>
 8001076:	eef0 7a40 	vmov.f32	s15, s0
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <main+0x13c>)
 800107c:	edc3 7a00 	vstr	s15, [r3]

		sprintf(buffer, "Temp: %f %02d-%02d-20%02d %02d:%02d:%02d", TEMP,
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <main+0x13c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa7f 	bl	8000588 <__aeabi_f2d>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
				time.dayofmonth, time.month, time.year, time.hour, time.minutes,
 800108e:	4918      	ldr	r1, [pc, #96]	; (80010f0 <main+0x140>)
 8001090:	7909      	ldrb	r1, [r1, #4]
		sprintf(buffer, "Temp: %f %02d-%02d-20%02d %02d:%02d:%02d", TEMP,
 8001092:	4608      	mov	r0, r1
				time.dayofmonth, time.month, time.year, time.hour, time.minutes,
 8001094:	4916      	ldr	r1, [pc, #88]	; (80010f0 <main+0x140>)
 8001096:	7949      	ldrb	r1, [r1, #5]
		sprintf(buffer, "Temp: %f %02d-%02d-20%02d %02d:%02d:%02d", TEMP,
 8001098:	460c      	mov	r4, r1
				time.dayofmonth, time.month, time.year, time.hour, time.minutes,
 800109a:	4915      	ldr	r1, [pc, #84]	; (80010f0 <main+0x140>)
 800109c:	7989      	ldrb	r1, [r1, #6]
		sprintf(buffer, "Temp: %f %02d-%02d-20%02d %02d:%02d:%02d", TEMP,
 800109e:	460d      	mov	r5, r1
				time.dayofmonth, time.month, time.year, time.hour, time.minutes,
 80010a0:	4913      	ldr	r1, [pc, #76]	; (80010f0 <main+0x140>)
 80010a2:	7889      	ldrb	r1, [r1, #2]
		sprintf(buffer, "Temp: %f %02d-%02d-20%02d %02d:%02d:%02d", TEMP,
 80010a4:	460e      	mov	r6, r1
				time.dayofmonth, time.month, time.year, time.hour, time.minutes,
 80010a6:	4912      	ldr	r1, [pc, #72]	; (80010f0 <main+0x140>)
 80010a8:	7849      	ldrb	r1, [r1, #1]
		sprintf(buffer, "Temp: %f %02d-%02d-20%02d %02d:%02d:%02d", TEMP,
 80010aa:	6079      	str	r1, [r7, #4]
				time.seconds);
 80010ac:	4910      	ldr	r1, [pc, #64]	; (80010f0 <main+0x140>)
 80010ae:	7809      	ldrb	r1, [r1, #0]
		sprintf(buffer, "Temp: %f %02d-%02d-20%02d %02d:%02d:%02d", TEMP,
 80010b0:	9105      	str	r1, [sp, #20]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	9104      	str	r1, [sp, #16]
 80010b6:	9603      	str	r6, [sp, #12]
 80010b8:	9502      	str	r5, [sp, #8]
 80010ba:	9401      	str	r4, [sp, #4]
 80010bc:	9000      	str	r0, [sp, #0]
 80010be:	490d      	ldr	r1, [pc, #52]	; (80010f4 <main+0x144>)
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <main+0x148>)
 80010c2:	f004 fecd 	bl	8005e60 <siprintf>

		HAL_Delay(500);
 80010c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ca:	f000 fe01 	bl	8001cd0 <HAL_Delay>

		printf("%s \r\n", buffer);
 80010ce:	490a      	ldr	r1, [pc, #40]	; (80010f8 <main+0x148>)
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <main+0x14c>)
 80010d2:	f004 fe37 	bl	8005d44 <iprintf>
		Get_Time(hi2c1, address, buf_rx);
 80010d6:	e79d      	b.n	8001014 <main+0x64>
 80010d8:	08008350 	.word	0x08008350
 80010dc:	2000079c 	.word	0x2000079c
 80010e0:	200001f8 	.word	0x200001f8
 80010e4:	200007a0 	.word	0x200007a0
 80010e8:	200007a8 	.word	0x200007a8
 80010ec:	200007ac 	.word	0x200007ac
 80010f0:	200007e4 	.word	0x200007e4
 80010f4:	08008360 	.word	0x08008360
 80010f8:	200007b0 	.word	0x200007b0
 80010fc:	0800838c 	.word	0x0800838c

08001100 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	; 0x50
 8001104:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2234      	movs	r2, #52	; 0x34
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f004 f9a6 	bl	8005460 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <SystemClock_Config+0xd0>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <SystemClock_Config+0xd0>)
 800112e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001132:	6413      	str	r3, [r2, #64]	; 0x40
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <SystemClock_Config+0xd0>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <SystemClock_Config+0xd4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <SystemClock_Config+0xd4>)
 800114a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <SystemClock_Config+0xd4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800115c:	2301      	movs	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001160:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001164:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001166:	2302      	movs	r3, #2
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001170:	2304      	movs	r3, #4
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001174:	23a8      	movs	r3, #168	; 0xa8
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800117c:	2307      	movs	r3, #7
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001180:	2302      	movs	r3, #2
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4618      	mov	r0, r3
 800118a:	f002 ffd5 	bl	8004138 <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x98>
		Error_Handler();
 8001194:	f000 fad0 	bl	8001738 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800119c:	2303      	movs	r3, #3
 800119e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	2105      	movs	r1, #5
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 f94a 	bl	8003450 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xc6>
		Error_Handler();
 80011c2:	f000 fab9 	bl	8001738 <Error_Handler>
	}
}
 80011c6:	bf00      	nop
 80011c8:	3750      	adds	r7, #80	; 0x50
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000

080011d8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_I2C1_Init+0x50>)
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <MX_I2C1_Init+0x54>)
 80011e0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_I2C1_Init+0x50>)
 80011e4:	4a12      	ldr	r2, [pc, #72]	; (8001230 <MX_I2C1_Init+0x58>)
 80011e6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 166;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_I2C1_Init+0x50>)
 80011f0:	22a6      	movs	r2, #166	; 0xa6
 80011f2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_I2C1_Init+0x50>)
 80011f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_I2C1_Init+0x50>)
 8001216:	f001 f813 	bl	8002240 <HAL_I2C_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001220:	f000 fa8a 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200001f8 	.word	0x200001f8
 800122c:	40005400 	.word	0x40005400
 8001230:	00061a80 	.word	0x00061a80

08001234 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART3_UART_Init+0x4c>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_USART3_UART_Init+0x50>)
 800123c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USART3_UART_Init+0x4c>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART3_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART3_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART3_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART3_UART_Init+0x4c>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART3_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART3_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART3_UART_Init+0x4c>)
 800126c:	f003 fa02 	bl	8004674 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001276:	f000 fa5f 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000024c 	.word	0x2000024c
 8001284:	40004800 	.word	0x40004800

08001288 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800128e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001292:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001296:	2206      	movs	r2, #6
 8001298:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129c:	2202      	movs	r2, #2
 800129e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012cc:	f001 ff77 	bl	80031be <HAL_PCD_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 80012d6:	f000 fa2f 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000290 	.word	0x20000290

080012e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b49      	ldr	r3, [pc, #292]	; (8001430 <MX_GPIO_Init+0x14c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	4b45      	ldr	r3, [pc, #276]	; (8001430 <MX_GPIO_Init+0x14c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a44      	ldr	r2, [pc, #272]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b42      	ldr	r3, [pc, #264]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a3d      	ldr	r2, [pc, #244]	; (8001430 <MX_GPIO_Init+0x14c>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b37      	ldr	r3, [pc, #220]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a36      	ldr	r2, [pc, #216]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <MX_GPIO_Init+0x14c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <MX_GPIO_Init+0x14c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_GPIO_Init+0x14c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80013a8:	4822      	ldr	r0, [pc, #136]	; (8001434 <MX_GPIO_Init+0x150>)
 80013aa:	f000 ff2f 	bl	800220c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80013ae:	2200      	movs	r2, #0
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	4821      	ldr	r0, [pc, #132]	; (8001438 <MX_GPIO_Init+0x154>)
 80013b4:	f000 ff2a 	bl	800220c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	481b      	ldr	r0, [pc, #108]	; (800143c <MX_GPIO_Init+0x158>)
 80013d0:	f000 fd88 	bl	8001ee4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80013d4:	f244 0381 	movw	r3, #16513	; 0x4081
 80013d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	4811      	ldr	r0, [pc, #68]	; (8001434 <MX_GPIO_Init+0x150>)
 80013ee:	f000 fd79 	bl	8001ee4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013f2:	2340      	movs	r3, #64	; 0x40
 80013f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	480b      	ldr	r0, [pc, #44]	; (8001438 <MX_GPIO_Init+0x154>)
 800140a:	f000 fd6b 	bl	8001ee4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_GPIO_Init+0x154>)
 8001422:	f000 fd5f 	bl	8001ee4 <HAL_GPIO_Init>

}
 8001426:	bf00      	nop
 8001428:	3730      	adds	r7, #48	; 0x30
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40020400 	.word	0x40020400
 8001438:	40021800 	.word	0x40021800
 800143c:	40020800 	.word	0x40020800

08001440 <Set_Time>:
	return ret;
}

void Set_Time(I2C_HandleTypeDef i2c_hdl, uint16_t address, uint8_t sec,
		uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month,
		uint16_t year) {
 8001440:	b084      	sub	sp, #16
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af04      	add	r7, sp, #16
 8001448:	f107 0c10 	add.w	ip, r7, #16
 800144c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 8001450:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f931 	bl	80016bc <decToBcd>
 800145a:	4603      	mov	r3, r0
 800145c:	703b      	strb	r3, [r7, #0]
	set_time[1] = decToBcd(min);
 800145e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f92a 	bl	80016bc <decToBcd>
 8001468:	4603      	mov	r3, r0
 800146a:	707b      	strb	r3, [r7, #1]
	set_time[2] = decToBcd(hour);
 800146c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f923 	bl	80016bc <decToBcd>
 8001476:	4603      	mov	r3, r0
 8001478:	70bb      	strb	r3, [r7, #2]
	set_time[3] = decToBcd(dow);
 800147a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f91c 	bl	80016bc <decToBcd>
 8001484:	4603      	mov	r3, r0
 8001486:	70fb      	strb	r3, [r7, #3]
	set_time[4] = decToBcd(dom);
 8001488:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f915 	bl	80016bc <decToBcd>
 8001492:	4603      	mov	r3, r0
 8001494:	713b      	strb	r3, [r7, #4]
	set_time[5] = decToBcd(month);
 8001496:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f90e 	bl	80016bc <decToBcd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	717b      	strb	r3, [r7, #5]
	set_time[6] = decToBcd(year);
 80014a4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f907 	bl	80016bc <decToBcd>
 80014ae:	4603      	mov	r3, r0
 80014b0:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&i2c_hdl, address, 0x00, 1, set_time, 7, 1000);
 80014b2:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	2307      	movs	r3, #7
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	463b      	mov	r3, r7
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2301      	movs	r3, #1
 80014c6:	2200      	movs	r2, #0
 80014c8:	f107 0010 	add.w	r0, r7, #16
 80014cc:	f000 fffc 	bl	80024c8 <HAL_I2C_Mem_Write>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014da:	b004      	add	sp, #16
 80014dc:	4770      	bx	lr
	...

080014e0 <Get_Time>:
void Get_Time(I2C_HandleTypeDef i2c_hdl, uint16_t address, uint8_t *get_time) {
 80014e0:	b084      	sub	sp, #16
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af04      	add	r7, sp, #16
 80014e8:	f107 0c08 	add.w	ip, r7, #8
 80014ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_I2C_Mem_Read(&i2c_hdl, address, 0x00, 1, get_time, 7, 1000);
 80014f0:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 80014f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2307      	movs	r3, #7
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	2200      	movs	r2, #0
 8001506:	f107 0008 	add.w	r0, r7, #8
 800150a:	f001 f8d7 	bl	80026bc <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 800150e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f8f8 	bl	8001708 <bcdToDec>
 8001518:	4603      	mov	r3, r0
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <Get_Time+0xc4>)
 800151e:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8001520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001522:	3301      	adds	r3, #1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f8ee 	bl	8001708 <bcdToDec>
 800152c:	4603      	mov	r3, r0
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <Get_Time+0xc4>)
 8001532:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8001534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001536:	3302      	adds	r3, #2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f8e4 	bl	8001708 <bcdToDec>
 8001540:	4603      	mov	r3, r0
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <Get_Time+0xc4>)
 8001546:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8001548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800154a:	3303      	adds	r3, #3
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f8da 	bl	8001708 <bcdToDec>
 8001554:	4603      	mov	r3, r0
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <Get_Time+0xc4>)
 800155a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 800155c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800155e:	3304      	adds	r3, #4
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f8d0 	bl	8001708 <bcdToDec>
 8001568:	4603      	mov	r3, r0
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <Get_Time+0xc4>)
 800156e:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8001570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001572:	3305      	adds	r3, #5
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f8c6 	bl	8001708 <bcdToDec>
 800157c:	4603      	mov	r3, r0
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <Get_Time+0xc4>)
 8001582:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8001584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001586:	3306      	adds	r3, #6
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f8bc 	bl	8001708 <bcdToDec>
 8001590:	4603      	mov	r3, r0
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <Get_Time+0xc4>)
 8001596:	719a      	strb	r2, [r3, #6]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015a0:	b004      	add	sp, #16
 80015a2:	4770      	bx	lr
 80015a4:	200007e4 	.word	0x200007e4

080015a8 <Get_Temp>:

float Get_Temp(I2C_HandleTypeDef i2c_hdl, uint16_t address, uint8_t *temp) {
 80015a8:	b084      	sub	sp, #16
 80015aa:	b5b0      	push	{r4, r5, r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af04      	add	r7, sp, #16
 80015b0:	f107 0410 	add.w	r4, r7, #16
 80015b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_I2C_Mem_Read(&i2c_hdl, address, 0x11, 1, temp, 2, 1000);
 80015b8:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80015bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	2302      	movs	r3, #2
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2301      	movs	r3, #1
 80015cc:	2211      	movs	r2, #17
 80015ce:	f107 0010 	add.w	r0, r7, #16
 80015d2:	f001 f873 	bl	80026bc <HAL_I2C_Mem_Read>
	return ((temp[0]) + (temp[1] >> 6) / 4.0);
 80015d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffc2 	bl	8000564 <__aeabi_i2d>
 80015e0:	4604      	mov	r4, r0
 80015e2:	460d      	mov	r5, r1
 80015e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015e6:	3301      	adds	r3, #1
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	099b      	lsrs	r3, r3, #6
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ffb8 	bl	8000564 <__aeabi_i2d>
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <Get_Temp+0x84>)
 80015fa:	f7ff f947 	bl	800088c <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4620      	mov	r0, r4
 8001604:	4629      	mov	r1, r5
 8001606:	f7fe fe61 	bl	80002cc <__adddf3>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fae9 	bl	8000be8 <__aeabi_d2f>
 8001616:	4603      	mov	r3, r0
 8001618:	ee07 3a90 	vmov	s15, r3
}
 800161c:	eeb0 0a67 	vmov.f32	s0, s15
 8001620:	46bd      	mov	sp, r7
 8001622:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001626:	b004      	add	sp, #16
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40100000 	.word	0x40100000

08001630 <force_temp_conv>:
void force_temp_conv(I2C_HandleTypeDef i2c_hdl, uint16_t address) {
 8001630:	b084      	sub	sp, #16
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af04      	add	r7, sp, #16
 8001638:	f107 0c10 	add.w	ip, r7, #16
 800163c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t status = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	71fb      	strb	r3, [r7, #7]
	uint8_t control = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&i2c_hdl, address, 0x0F, 1, &status, 1, 100); // read status register
 8001648:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	2301      	movs	r3, #1
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	1dfb      	adds	r3, r7, #7
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	220f      	movs	r2, #15
 800165c:	f107 0010 	add.w	r0, r7, #16
 8001660:	f001 f82c 	bl	80026bc <HAL_I2C_Mem_Read>
	if (!(status & 0x04))  // if the BSY bit is not set
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d11f      	bne.n	80016ae <force_temp_conv+0x7e>
	{
		HAL_I2C_Mem_Read(&i2c_hdl, address, 0x0E, 1, &control, 1, 100); // read control register
 800166e:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8001672:	2364      	movs	r3, #100	; 0x64
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	2301      	movs	r3, #1
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	1dbb      	adds	r3, r7, #6
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	220e      	movs	r2, #14
 8001682:	f107 0010 	add.w	r0, r7, #16
 8001686:	f001 f819 	bl	80026bc <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Write(&i2c_hdl, address, 0x0E, 1,
				(uint8_t*) (control | (0x20)), 1, 100); // write modified control register with CONV bit as'1'
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	f043 0320 	orr.w	r3, r3, #32
 8001690:	b2db      	uxtb	r3, r3
		HAL_I2C_Mem_Write(&i2c_hdl, address, 0x0E, 1,
 8001692:	461a      	mov	r2, r3
 8001694:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8001698:	2364      	movs	r3, #100	; 0x64
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	220e      	movs	r2, #14
 80016a6:	f107 0010 	add.w	r0, r7, #16
 80016aa:	f000 ff0d 	bl	80024c8 <HAL_I2C_Mem_Write>
	}
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016b8:	b004      	add	sp, #16
 80016ba:	4770      	bx	lr

080016bc <decToBcd>:

uint8_t decToBcd(int val) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	return (uint8_t) ((val / 10 * 16) + (val % 10));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <decToBcd+0x48>)
 80016c8:	fb82 1203 	smull	r1, r2, r2, r3
 80016cc:	1092      	asrs	r2, r2, #2
 80016ce:	17db      	asrs	r3, r3, #31
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	b2d8      	uxtb	r0, r3
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <decToBcd+0x48>)
 80016dc:	fb83 1302 	smull	r1, r3, r3, r2
 80016e0:	1099      	asrs	r1, r3, #2
 80016e2:	17d3      	asrs	r3, r2, #31
 80016e4:	1ac9      	subs	r1, r1, r3
 80016e6:	460b      	mov	r3, r1
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	1ad1      	subs	r1, r2, r3
 80016f0:	b2cb      	uxtb	r3, r1
 80016f2:	4403      	add	r3, r0
 80016f4:	b2db      	uxtb	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	66666667 	.word	0x66666667

08001708 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
	return (int) ((val / 16 * 10) + (val % 16));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	461a      	mov	r2, r3
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	4413      	add	r3, r2
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001740:	e7fe      	b.n	8001740 <Error_Handler+0x8>
	...

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_MspInit+0x4c>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x4c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_I2C_MspInit+0x84>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12c      	bne.n	8001810 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d8:	2312      	movs	r3, #18
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e4:	2304      	movs	r3, #4
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <HAL_I2C_MspInit+0x8c>)
 80017f0:	f000 fb78 	bl	8001ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_I2C_MspInit+0x88>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40005400 	.word	0x40005400
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_UART_MspInit+0x84>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12c      	bne.n	80018a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_UART_MspInit+0x88>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_UART_MspInit+0x88>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_UART_MspInit+0x88>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_UART_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_UART_MspInit+0x88>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_UART_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800187e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001890:	2307      	movs	r3, #7
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_UART_MspInit+0x8c>)
 800189c:	f000 fb22 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40004800 	.word	0x40004800
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020c00 	.word	0x40020c00

080018b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0a0      	sub	sp, #128	; 0x80
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	225c      	movs	r2, #92	; 0x5c
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f003 fdc3 	bl	8005460 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e2:	d14e      	bne.n	8001982 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80018e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80018ea:	2300      	movs	r3, #0
 80018ec:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fec6 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80018fe:	f7ff ff1b 	bl	8001738 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_PCD_MspInit+0xd8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a20      	ldr	r2, [pc, #128]	; (800198c <HAL_PCD_MspInit+0xd8>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_PCD_MspInit+0xd8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800191e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001922:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001930:	230a      	movs	r3, #10
 8001932:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001938:	4619      	mov	r1, r3
 800193a:	4815      	ldr	r0, [pc, #84]	; (8001990 <HAL_PCD_MspInit+0xdc>)
 800193c:	f000 fad2 	bl	8001ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001944:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001952:	4619      	mov	r1, r3
 8001954:	480e      	ldr	r0, [pc, #56]	; (8001990 <HAL_PCD_MspInit+0xdc>)
 8001956:	f000 fac5 	bl	8001ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_PCD_MspInit+0xd8>)
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_PCD_MspInit+0xd8>)
 8001960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001964:	6353      	str	r3, [r2, #52]	; 0x34
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_PCD_MspInit+0xd8>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_PCD_MspInit+0xd8>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_PCD_MspInit+0xd8>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3780      	adds	r7, #128	; 0x80
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <NMI_Handler+0x4>

0800199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e0:	f000 f956 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_kill>:

int _kill(int pid, int sig)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a02:	f003 fcf5 	bl	80053f0 <__errno>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2216      	movs	r2, #22
 8001a0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_exit>:

void _exit (int status)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ffe7 	bl	80019f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a2a:	e7fe      	b.n	8001a2a <_exit+0x12>

08001a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a3e:	f3af 8000 	nop.w
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
  }

  return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e009      	b.n	8001a8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fa83 	bl	8000f8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf1      	blt.n	8001a78 <_write+0x12>
  }
  return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f003 fc5a 	bl	80053f0 <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20020000 	.word	0x20020000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	200007ec 	.word	0x200007ec
 8001b70:	20000808 	.word	0x20000808

08001b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SystemInit+0x20>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <SystemInit+0x20>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb4:	4c0b      	ldr	r4, [pc, #44]	; (8001be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bc2:	f7ff ffd7 	bl	8001b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f003 fc19 	bl	80053fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bca:	f7ff f9f1 	bl	8000fb0 <main>
  bx  lr    
 8001bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001bdc:	080087bc 	.word	0x080087bc
  ldr r2, =_sbss
 8001be0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001be4:	20000804 	.word	0x20000804

08001be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC_IRQHandler>
	...

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <HAL_Init+0x40>)
 8001bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_Init+0x40>)
 8001c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_Init+0x40>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 f931 	bl	8001e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f808 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff fd90 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x54>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x58>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f93b 	bl	8001eca <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c6c:	f000 f911 	bl	8001e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_InitTick+0x5c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x24>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_IncTick+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	200007f0 	.word	0x200007f0

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	200007f0 	.word	0x200007f0

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff ffee 	bl	8001cb8 <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffde 	bl	8001cb8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000008 	.word	0x20000008

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	; (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e48:	d301      	bcc.n	8001e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00f      	b.n	8001e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <SysTick_Config+0x40>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e56:	210f      	movs	r1, #15
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e5c:	f7ff ff8e 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <SysTick_Config+0x40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e66:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <SysTick_Config+0x40>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	e000e010 	.word	0xe000e010

08001e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff47 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea4:	f7ff ff5c 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	6978      	ldr	r0, [r7, #20]
 8001eb0:	f7ff ff8e 	bl	8001dd0 <NVIC_EncodePriority>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff5d 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffb0 	bl	8001e38 <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e165      	b.n	80021cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	f040 8154 	bne.w	80021c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d005      	beq.n	8001f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d130      	bne.n	8001f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 0201 	and.w	r2, r3, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d017      	beq.n	8001fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d123      	bne.n	8002028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	08da      	lsrs	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3208      	adds	r2, #8
 8002022:	69b9      	ldr	r1, [r7, #24]
 8002024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0203 	and.w	r2, r3, #3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80ae 	beq.w	80021c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b5d      	ldr	r3, [pc, #372]	; (80021e4 <HAL_GPIO_Init+0x300>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a5c      	ldr	r2, [pc, #368]	; (80021e4 <HAL_GPIO_Init+0x300>)
 8002074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b5a      	ldr	r3, [pc, #360]	; (80021e4 <HAL_GPIO_Init+0x300>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002086:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <HAL_GPIO_Init+0x304>)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_GPIO_Init+0x308>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d025      	beq.n	80020fe <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <HAL_GPIO_Init+0x30c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	; (80021f4 <HAL_GPIO_Init+0x310>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d019      	beq.n	80020f6 <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <HAL_GPIO_Init+0x314>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_GPIO_Init+0x318>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00d      	beq.n	80020ee <HAL_GPIO_Init+0x20a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_GPIO_Init+0x31c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x206>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a49      	ldr	r2, [pc, #292]	; (8002204 <HAL_GPIO_Init+0x320>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_GPIO_Init+0x202>
 80020e2:	2306      	movs	r3, #6
 80020e4:	e00c      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020e6:	2307      	movs	r3, #7
 80020e8:	e00a      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e008      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020fe:	2300      	movs	r3, #0
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f002 0203 	and.w	r2, r2, #3
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	4093      	lsls	r3, r2
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002110:	4935      	ldr	r1, [pc, #212]	; (80021e8 <HAL_GPIO_Init+0x304>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_GPIO_Init+0x324>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002142:	4a31      	ldr	r2, [pc, #196]	; (8002208 <HAL_GPIO_Init+0x324>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HAL_GPIO_Init+0x324>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800216c:	4a26      	ldr	r2, [pc, #152]	; (8002208 <HAL_GPIO_Init+0x324>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002172:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_GPIO_Init+0x324>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_GPIO_Init+0x324>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_GPIO_Init+0x324>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c0:	4a11      	ldr	r2, [pc, #68]	; (8002208 <HAL_GPIO_Init+0x324>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	f67f ae96 	bls.w	8001f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40020000 	.word	0x40020000
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40020800 	.word	0x40020800
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	40021000 	.word	0x40021000
 8002200:	40021400 	.word	0x40021400
 8002204:	40021800 	.word	0x40021800
 8002208:	40013c00 	.word	0x40013c00

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002228:	e003      	b.n	8002232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	041a      	lsls	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	619a      	str	r2, [r3, #24]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e12b      	b.n	80024aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fa94 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a4:	f001 f9c6 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a81      	ldr	r2, [pc, #516]	; (80024b4 <HAL_I2C_Init+0x274>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d807      	bhi.n	80022c4 <HAL_I2C_Init+0x84>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a80      	ldr	r2, [pc, #512]	; (80024b8 <HAL_I2C_Init+0x278>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e006      	b.n	80022d2 <HAL_I2C_Init+0x92>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a7d      	ldr	r2, [pc, #500]	; (80024bc <HAL_I2C_Init+0x27c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0e7      	b.n	80024aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a78      	ldr	r2, [pc, #480]	; (80024c0 <HAL_I2C_Init+0x280>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a6a      	ldr	r2, [pc, #424]	; (80024b4 <HAL_I2C_Init+0x274>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d802      	bhi.n	8002314 <HAL_I2C_Init+0xd4>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	e009      	b.n	8002328 <HAL_I2C_Init+0xe8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <HAL_I2C_Init+0x284>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	430b      	orrs	r3, r1
 800232e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800233a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	495c      	ldr	r1, [pc, #368]	; (80024b4 <HAL_I2C_Init+0x274>)
 8002344:	428b      	cmp	r3, r1
 8002346:	d819      	bhi.n	800237c <HAL_I2C_Init+0x13c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e59      	subs	r1, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fbb1 f3f3 	udiv	r3, r1, r3
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800235c:	400b      	ands	r3, r1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_I2C_Init+0x138>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e59      	subs	r1, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002376:	e051      	b.n	800241c <HAL_I2C_Init+0x1dc>
 8002378:	2304      	movs	r3, #4
 800237a:	e04f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <HAL_I2C_Init+0x168>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e012      	b.n	80023ce <HAL_I2C_Init+0x18e>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	0099      	lsls	r1, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Init+0x196>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e022      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10e      	bne.n	80023fc <HAL_I2C_Init+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e58      	subs	r0, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	6809      	ldr	r1, [r1, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800244a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6911      	ldr	r1, [r2, #16]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	000186a0 	.word	0x000186a0
 80024b8:	001e847f 	.word	0x001e847f
 80024bc:	003d08ff 	.word	0x003d08ff
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	817b      	strh	r3, [r7, #10]
 80024da:	460b      	mov	r3, r1
 80024dc:	813b      	strh	r3, [r7, #8]
 80024de:	4613      	mov	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024e2:	f7ff fbe9 	bl	8001cb8 <HAL_GetTick>
 80024e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	f040 80d9 	bne.w	80026a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2319      	movs	r3, #25
 80024fc:	2201      	movs	r2, #1
 80024fe:	496d      	ldr	r1, [pc, #436]	; (80026b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fc7f 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
 800250e:	e0cc      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_I2C_Mem_Write+0x56>
 800251a:	2302      	movs	r3, #2
 800251c:	e0c5      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d007      	beq.n	8002544 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2221      	movs	r2, #33	; 0x21
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a4d      	ldr	r2, [pc, #308]	; (80026b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002586:	88f8      	ldrh	r0, [r7, #6]
 8002588:	893a      	ldrh	r2, [r7, #8]
 800258a:	8979      	ldrh	r1, [r7, #10]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4603      	mov	r3, r0
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fab6 	bl	8002b08 <I2C_RequestMemoryWrite>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d052      	beq.n	8002648 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e081      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fd00 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d107      	bne.n	80025ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06b      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b04      	cmp	r3, #4
 800260e:	d11b      	bne.n	8002648 <HAL_I2C_Mem_Write+0x180>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d017      	beq.n	8002648 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1aa      	bne.n	80025a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fcec 	bl	8003032 <I2C_WaitOnBTFFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b04      	cmp	r3, #4
 8002666:	d107      	bne.n	8002678 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002676:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e016      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	00100002 	.word	0x00100002
 80026b8:	ffff0000 	.word	0xffff0000

080026bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	817b      	strh	r3, [r7, #10]
 80026ce:	460b      	mov	r3, r1
 80026d0:	813b      	strh	r3, [r7, #8]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d6:	f7ff faef 	bl	8001cb8 <HAL_GetTick>
 80026da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	f040 8208 	bne.w	8002afa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2319      	movs	r3, #25
 80026f0:	2201      	movs	r2, #1
 80026f2:	497b      	ldr	r1, [pc, #492]	; (80028e0 <HAL_I2C_Mem_Read+0x224>)
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fb85 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
 8002702:	e1fb      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_I2C_Mem_Read+0x56>
 800270e:	2302      	movs	r3, #2
 8002710:	e1f4      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d007      	beq.n	8002738 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2222      	movs	r2, #34	; 0x22
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2240      	movs	r2, #64	; 0x40
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002768:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <HAL_I2C_Mem_Read+0x228>)
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800277a:	88f8      	ldrh	r0, [r7, #6]
 800277c:	893a      	ldrh	r2, [r7, #8]
 800277e:	8979      	ldrh	r1, [r7, #10]
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	4603      	mov	r3, r0
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fa52 	bl	8002c34 <I2C_RequestMemoryRead>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1b0      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d113      	bne.n	80027ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	623b      	str	r3, [r7, #32]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	623b      	str	r3, [r7, #32]
 80027b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e184      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d11b      	bne.n	800280a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e164      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	2b02      	cmp	r3, #2
 8002810:	d11b      	bne.n	800284a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002820:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	e144      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002860:	e138      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	2b03      	cmp	r3, #3
 8002868:	f200 80f1 	bhi.w	8002a4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	2b01      	cmp	r3, #1
 8002872:	d123      	bne.n	80028bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fc1b 	bl	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e139      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ba:	e10b      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d14e      	bne.n	8002962 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	2200      	movs	r2, #0
 80028cc:	4906      	ldr	r1, [pc, #24]	; (80028e8 <HAL_I2C_Mem_Read+0x22c>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa98 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e10e      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
 80028de:	bf00      	nop
 80028e0:	00100002 	.word	0x00100002
 80028e4:	ffff0000 	.word	0xffff0000
 80028e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002960:	e0b8      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002968:	2200      	movs	r2, #0
 800296a:	4966      	ldr	r1, [pc, #408]	; (8002b04 <HAL_I2C_Mem_Read+0x448>)
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fa49 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0bf      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2200      	movs	r2, #0
 80029c6:	494f      	ldr	r1, [pc, #316]	; (8002b04 <HAL_I2C_Mem_Read+0x448>)
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fa1b 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e091      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a4c:	e042      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fb2e 	bl	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e04c      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d118      	bne.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f47f aec2 	bne.w	8002862 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
  }
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3728      	adds	r7, #40	; 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	00010004 	.word	0x00010004

08002b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	817b      	strh	r3, [r7, #10]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	813b      	strh	r3, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f960 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b58:	d103      	bne.n	8002b62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e05f      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	492d      	ldr	r1, [pc, #180]	; (8002c30 <I2C_RequestMemoryWrite+0x128>)
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f998 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e04c      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fa02 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e02b      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]
 8002bde:	e021      	b.n	8002c24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002be0:	893b      	ldrh	r3, [r7, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f9dc 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d107      	bne.n	8002c16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e005      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c1a:	893b      	ldrh	r3, [r7, #8]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	00010002 	.word	0x00010002

08002c34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f8c2 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c94:	d103      	bne.n	8002c9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0aa      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	6a3a      	ldr	r2, [r7, #32]
 8002cb6:	4952      	ldr	r1, [pc, #328]	; (8002e00 <I2C_RequestMemoryRead+0x1cc>)
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f8fa 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e097      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f964 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d107      	bne.n	8002d06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e076      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	e021      	b.n	8002d60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2c:	6a39      	ldr	r1, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f93e 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e050      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d56:	893b      	ldrh	r3, [r7, #8]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	6a39      	ldr	r1, [r7, #32]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f923 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d107      	bne.n	8002d88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e035      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f82b 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00d      	beq.n	8002dd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc2:	d103      	bne.n	8002dcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e013      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dd0:	897b      	ldrh	r3, [r7, #10]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	4906      	ldr	r1, [pc, #24]	; (8002e00 <I2C_RequestMemoryRead+0x1cc>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f863 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00010002 	.word	0x00010002

08002e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	e025      	b.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e1c:	d021      	beq.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7fe ff4b 	bl	8001cb8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d116      	bne.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e023      	b.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10d      	bne.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	e00c      	b.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d0b6      	beq.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ec0:	e051      	b.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed0:	d123      	bne.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e046      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f20:	d021      	beq.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fec9 	bl	8001cb8 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d116      	bne.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f043 0220 	orr.w	r2, r3, #32
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e020      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10c      	bne.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf14      	ite	ne
 8002f82:	2301      	movne	r3, #1
 8002f84:	2300      	moveq	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e00b      	b.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	43da      	mvns	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4013      	ands	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d18d      	bne.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fbc:	e02d      	b.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f8ce 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e02d      	b.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd4:	d021      	beq.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe fe6f 	bl	8001cb8 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003024:	2b80      	cmp	r3, #128	; 0x80
 8003026:	d1ca      	bne.n	8002fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800303e:	e02d      	b.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f88d 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e02d      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003056:	d021      	beq.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003058:	f7fe fe2e 	bl	8001cb8 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	429a      	cmp	r2, r3
 8003066:	d302      	bcc.n	800306e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e007      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d1ca      	bne.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c0:	e042      	b.n	8003148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d119      	bne.n	8003104 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0210 	mvn.w	r2, #16
 80030d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e029      	b.n	8003158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003104:	f7fe fdd8 	bl	8001cb8 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d1b5      	bne.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003176:	d11b      	bne.n	80031b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c0:	b08f      	sub	sp, #60	; 0x3c
 80031c2:	af0a      	add	r7, sp, #40	; 0x28
 80031c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e116      	b.n	80033fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe fb62 	bl	80018b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2203      	movs	r2, #3
 80031f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f001 fe53 	bl	8004eba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	687e      	ldr	r6, [r7, #4]
 800321c:	466d      	mov	r5, sp
 800321e:	f106 0410 	add.w	r4, r6, #16
 8003222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800322e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003232:	1d33      	adds	r3, r6, #4
 8003234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003236:	6838      	ldr	r0, [r7, #0]
 8003238:	f001 fdde 	bl	8004df8 <USB_CoreInit>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0d7      	b.n	80033fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f001 fe41 	bl	8004edc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	e04a      	b.n	80032f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	333d      	adds	r3, #61	; 0x3d
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	333c      	adds	r3, #60	; 0x3c
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	b298      	uxth	r0, r3
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3344      	adds	r3, #68	; 0x44
 800329c:	4602      	mov	r2, r0
 800329e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3340      	adds	r3, #64	; 0x40
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032b4:	7bfa      	ldrb	r2, [r7, #15]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	3348      	adds	r3, #72	; 0x48
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	334c      	adds	r3, #76	; 0x4c
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	3354      	adds	r3, #84	; 0x54
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	3301      	adds	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3af      	bcc.n	8003260 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e044      	b.n	8003390 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800335e:	7bfa      	ldrb	r2, [r7, #15]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	3301      	adds	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	d3b5      	bcc.n	8003306 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	687e      	ldr	r6, [r7, #4]
 80033a2:	466d      	mov	r5, sp
 80033a4:	f106 0410 	add.w	r4, r6, #16
 80033a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80033b8:	1d33      	adds	r3, r6, #4
 80033ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033bc:	6838      	ldr	r0, [r7, #0]
 80033be:	f001 fdd9 	bl	8004f74 <USB_DevInit>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e014      	b.n	80033fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d102      	bne.n	80033f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f80a 	bl	8003406 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 ff97 	bl	800532a <USB_DevDisconnect>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003406 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003406:	b480      	push	{r7}
 8003408:	b085      	sub	sp, #20
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	f043 0303 	orr.w	r3, r3, #3
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0cc      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b68      	ldr	r3, [pc, #416]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d90c      	bls.n	800348c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b65      	ldr	r3, [pc, #404]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b63      	ldr	r3, [pc, #396]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0b8      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d020      	beq.n	80034da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034a4:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a58      	ldr	r2, [pc, #352]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034bc:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4a52      	ldr	r2, [pc, #328]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c8:	4b50      	ldr	r3, [pc, #320]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	494d      	ldr	r1, [pc, #308]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d044      	beq.n	8003570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d119      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e07f      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d003      	beq.n	800350e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350a:	2b03      	cmp	r3, #3
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	4b3f      	ldr	r3, [pc, #252]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e06f      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351e:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e067      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4934      	ldr	r1, [pc, #208]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003540:	f7fe fbba 	bl	8001cb8 <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	e00a      	b.n	800355e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003548:	f7fe fbb6 	bl	8001cb8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e04f      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355e:	4b2b      	ldr	r3, [pc, #172]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 020c 	and.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	429a      	cmp	r2, r3
 800356e:	d1eb      	bne.n	8003548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d20c      	bcs.n	8003598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b20      	ldr	r3, [pc, #128]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e032      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4916      	ldr	r1, [pc, #88]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	490e      	ldr	r1, [pc, #56]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035d6:	f000 fb7f 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 80035da:	4602      	mov	r2, r0
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	490a      	ldr	r1, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	5ccb      	ldrb	r3, [r1, r3]
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	4a09      	ldr	r2, [pc, #36]	; (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fb1a 	bl	8001c30 <HAL_InitTick>

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023c00 	.word	0x40023c00
 800360c:	40023800 	.word	0x40023800
 8003610:	080083bc 	.word	0x080083bc
 8003614:	20000000 	.word	0x20000000
 8003618:	20000004 	.word	0x20000004

0800361c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <HAL_RCC_GetHCLKFreq+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000000 	.word	0x20000000

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003638:	f7ff fff0 	bl	800361c <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4903      	ldr	r1, [pc, #12]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40023800 	.word	0x40023800
 8003658:	080083cc 	.word	0x080083cc

0800365c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003660:	f7ff ffdc 	bl	800361c <HAL_RCC_GetHCLKFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	0b5b      	lsrs	r3, r3, #13
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4903      	ldr	r1, [pc, #12]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	080083cc 	.word	0x080083cc

08003684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	; 0x30
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80036bc:	4b6f      	ldr	r3, [pc, #444]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036c2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	496c      	ldr	r1, [pc, #432]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80036da:	2301      	movs	r3, #1
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80036ea:	4b64      	ldr	r3, [pc, #400]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	4960      	ldr	r1, [pc, #384]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003708:	2301      	movs	r3, #1
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d017      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003718:	4b58      	ldr	r3, [pc, #352]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800371a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800371e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	4955      	ldr	r1, [pc, #340]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003736:	d101      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003738:	2301      	movs	r3, #1
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003744:	2301      	movs	r3, #1
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d017      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003754:	4b49      	ldr	r3, [pc, #292]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800375a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003762:	4946      	ldr	r1, [pc, #280]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003772:	d101      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003774:	2301      	movs	r3, #1
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003780:	2301      	movs	r3, #1
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 808a 	beq.w	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b39      	ldr	r3, [pc, #228]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a38      	ldr	r2, [pc, #224]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b36      	ldr	r3, [pc, #216]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037ae:	4b34      	ldr	r3, [pc, #208]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a33      	ldr	r2, [pc, #204]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037ba:	f7fe fa7d 	bl	8001cb8 <HAL_GetTick>
 80037be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fe fa79 	bl	8001cb8 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e278      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037d4:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037e0:	4b26      	ldr	r3, [pc, #152]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f8:	6a3a      	ldr	r2, [r7, #32]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d028      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037fe:	4b1f      	ldr	r3, [pc, #124]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003806:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003808:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003814:	4a19      	ldr	r2, [pc, #100]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d114      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003826:	f7fe fa47 	bl	8001cb8 <HAL_GetTick>
 800382a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fe fa43 	bl	8001cb8 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e240      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ee      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800385c:	d114      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800386e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003872:	4902      	ldr	r1, [pc, #8]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]
 8003878:	e00c      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800
 8003880:	40007000 	.word	0x40007000
 8003884:	42470e40 	.word	0x42470e40
 8003888:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a49      	ldr	r2, [pc, #292]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800388e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003892:	6093      	str	r3, [r2, #8]
 8003894:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	4944      	ldr	r1, [pc, #272]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80038b8:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80038ba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80038c8:	4b3a      	ldr	r3, [pc, #232]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	4937      	ldr	r1, [pc, #220]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038ea:	4b32      	ldr	r3, [pc, #200]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f8:	492e      	ldr	r1, [pc, #184]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d011      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800390c:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003912:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	4926      	ldr	r1, [pc, #152]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392a:	d101      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800392c:	2301      	movs	r3, #1
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800393c:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800393e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003942:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	491a      	ldr	r1, [pc, #104]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	2b00      	cmp	r3, #0
 800395c:	d011      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003964:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	4911      	ldr	r1, [pc, #68]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800397c:	d101      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800397e:	2301      	movs	r3, #1
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	2b01      	cmp	r3, #1
 8003986:	d005      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003990:	f040 80ff 	bne.w	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800399a:	f7fe f98d 	bl	8001cb8 <HAL_GetTick>
 800399e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a0:	e00e      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039a2:	f7fe f989 	bl	8001cb8 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d907      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e188      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80039b4:	40023800 	.word	0x40023800
 80039b8:	424711e0 	.word	0x424711e0
 80039bc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c0:	4b7e      	ldr	r3, [pc, #504]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ea      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d028      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d124      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80039f4:	4b71      	ldr	r3, [pc, #452]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fa:	0c1b      	lsrs	r3, r3, #16
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	3301      	adds	r3, #1
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a06:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0c:	0e1b      	lsrs	r3, r3, #24
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	019b      	lsls	r3, r3, #6
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	3b01      	subs	r3, #1
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	071b      	lsls	r3, r3, #28
 8003a36:	4961      	ldr	r1, [pc, #388]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d004      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d035      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a68:	d130      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a6a:	4b54      	ldr	r3, [pc, #336]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	3301      	adds	r3, #1
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a7c:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a82:	0f1b      	lsrs	r3, r3, #28
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	019b      	lsls	r3, r3, #6
 8003a94:	431a      	orrs	r2, r3
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	071b      	lsls	r3, r3, #28
 8003aac:	4943      	ldr	r1, [pc, #268]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ab4:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aba:	f023 021f 	bic.w	r2, r3, #31
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	493d      	ldr	r1, [pc, #244]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d029      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae0:	d124      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ae2:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	3301      	adds	r3, #1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003af4:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afa:	0f1b      	lsrs	r3, r3, #28
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	019b      	lsls	r3, r3, #6
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	3b01      	subs	r3, #1
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	071b      	lsls	r3, r3, #28
 8003b24:	4925      	ldr	r1, [pc, #148]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d016      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	019b      	lsls	r3, r3, #6
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	041b      	lsls	r3, r3, #16
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	071b      	lsls	r3, r3, #28
 8003b5e:	4917      	ldr	r1, [pc, #92]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b6c:	f7fe f8a4 	bl	8001cb8 <HAL_GetTick>
 8003b70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b74:	f7fe f8a0 	bl	8001cb8 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e09f      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	f040 8095 	bne.w	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba0:	f7fe f88a 	bl	8001cb8 <HAL_GetTick>
 8003ba4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ba6:	e00f      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ba8:	f7fe f886 	bl	8001cb8 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d908      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e085      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	42470068 	.word	0x42470068
 8003bc4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bc8:	4b41      	ldr	r3, [pc, #260]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd4:	d0e8      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02b      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d127      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003bfe:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	019b      	lsls	r3, r3, #6
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	3b01      	subs	r3, #1
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	061b      	lsls	r3, r3, #24
 8003c2c:	4928      	ldr	r1, [pc, #160]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c34:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c3a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	3b01      	subs	r3, #1
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	4922      	ldr	r1, [pc, #136]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01d      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c62:	d118      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c64:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	0e1b      	lsrs	r3, r3, #24
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	019b      	lsls	r3, r3, #6
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	3b01      	subs	r3, #1
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	4910      	ldr	r1, [pc, #64]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c9c:	f7fe f80c 	bl	8001cb8 <HAL_GetTick>
 8003ca0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ca4:	f7fe f808 	bl	8001cb8 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e007      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc2:	d1ef      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3730      	adds	r7, #48	; 0x30
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	42470070 	.word	0x42470070

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b0ae      	sub	sp, #184	; 0xb8
 8003cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfe:	4bcb      	ldr	r3, [pc, #812]	; (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	f200 8206 	bhi.w	8004118 <HAL_RCC_GetSysClockFreq+0x440>
 8003d0c:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d12:	bf00      	nop
 8003d14:	08003d49 	.word	0x08003d49
 8003d18:	08004119 	.word	0x08004119
 8003d1c:	08004119 	.word	0x08004119
 8003d20:	08004119 	.word	0x08004119
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08004119 	.word	0x08004119
 8003d2c:	08004119 	.word	0x08004119
 8003d30:	08004119 	.word	0x08004119
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08004119 	.word	0x08004119
 8003d3c:	08004119 	.word	0x08004119
 8003d40:	08004119 	.word	0x08004119
 8003d44:	08003f49 	.word	0x08003f49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4bb9      	ldr	r3, [pc, #740]	; (8004030 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003d4e:	e1e7      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d50:	4bb8      	ldr	r3, [pc, #736]	; (8004034 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d56:	e1e3      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d58:	4bb4      	ldr	r3, [pc, #720]	; (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d64:	4bb1      	ldr	r3, [pc, #708]	; (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d071      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d70:	4bae      	ldr	r3, [pc, #696]	; (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d7c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d96:	4622      	mov	r2, r4
 8003d98:	462b      	mov	r3, r5
 8003d9a:	f04f 0000 	mov.w	r0, #0
 8003d9e:	f04f 0100 	mov.w	r1, #0
 8003da2:	0159      	lsls	r1, r3, #5
 8003da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da8:	0150      	lsls	r0, r2, #5
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4621      	mov	r1, r4
 8003db0:	1a51      	subs	r1, r2, r1
 8003db2:	6439      	str	r1, [r7, #64]	; 0x40
 8003db4:	4629      	mov	r1, r5
 8003db6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dba:	647b      	str	r3, [r7, #68]	; 0x44
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003dc8:	4649      	mov	r1, r9
 8003dca:	018b      	lsls	r3, r1, #6
 8003dcc:	4641      	mov	r1, r8
 8003dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	018a      	lsls	r2, r1, #6
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	1a51      	subs	r1, r2, r1
 8003dda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ddc:	4649      	mov	r1, r9
 8003dde:	eb63 0301 	sbc.w	r3, r3, r1
 8003de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003df0:	4649      	mov	r1, r9
 8003df2:	00cb      	lsls	r3, r1, #3
 8003df4:	4641      	mov	r1, r8
 8003df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	00ca      	lsls	r2, r1, #3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	4622      	mov	r2, r4
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	eb42 0303 	adc.w	r3, r2, r3
 8003e12:	637b      	str	r3, [r7, #52]	; 0x34
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e20:	4629      	mov	r1, r5
 8003e22:	024b      	lsls	r3, r1, #9
 8003e24:	4621      	mov	r1, r4
 8003e26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	024a      	lsls	r2, r1, #9
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e40:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e44:	f7fc ff20 	bl	8000c88 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e52:	e067      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e54:	4b75      	ldr	r3, [pc, #468]	; (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	099b      	lsrs	r3, r3, #6
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e60:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e6e:	2300      	movs	r3, #0
 8003e70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e72:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003e76:	4622      	mov	r2, r4
 8003e78:	462b      	mov	r3, r5
 8003e7a:	f04f 0000 	mov.w	r0, #0
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	0159      	lsls	r1, r3, #5
 8003e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e88:	0150      	lsls	r0, r2, #5
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4621      	mov	r1, r4
 8003e90:	1a51      	subs	r1, r2, r1
 8003e92:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e94:	4629      	mov	r1, r5
 8003e96:	eb63 0301 	sbc.w	r3, r3, r1
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	018b      	lsls	r3, r1, #6
 8003eac:	4641      	mov	r1, r8
 8003eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	018a      	lsls	r2, r1, #6
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ece:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ed2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed6:	4692      	mov	sl, r2
 8003ed8:	469b      	mov	fp, r3
 8003eda:	4623      	mov	r3, r4
 8003edc:	eb1a 0303 	adds.w	r3, sl, r3
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	462b      	mov	r3, r5
 8003ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	028b      	lsls	r3, r1, #10
 8003efa:	4621      	mov	r1, r4
 8003efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f00:	4621      	mov	r1, r4
 8003f02:	028a      	lsls	r2, r1, #10
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f10:	677a      	str	r2, [r7, #116]	; 0x74
 8003f12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f16:	f7fc feb7 	bl	8000c88 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f24:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f46:	e0eb      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f48:	4b38      	ldr	r3, [pc, #224]	; (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f54:	4b35      	ldr	r3, [pc, #212]	; (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d06b      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f60:	4b32      	ldr	r3, [pc, #200]	; (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	2200      	movs	r2, #0
 8003f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f72:	663b      	str	r3, [r7, #96]	; 0x60
 8003f74:	2300      	movs	r3, #0
 8003f76:	667b      	str	r3, [r7, #100]	; 0x64
 8003f78:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	462b      	mov	r3, r5
 8003f80:	f04f 0000 	mov.w	r0, #0
 8003f84:	f04f 0100 	mov.w	r1, #0
 8003f88:	0159      	lsls	r1, r3, #5
 8003f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8e:	0150      	lsls	r0, r2, #5
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4621      	mov	r1, r4
 8003f96:	1a51      	subs	r1, r2, r1
 8003f98:	61b9      	str	r1, [r7, #24]
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fae:	4659      	mov	r1, fp
 8003fb0:	018b      	lsls	r3, r1, #6
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fb8:	4651      	mov	r1, sl
 8003fba:	018a      	lsls	r2, r1, #6
 8003fbc:	4651      	mov	r1, sl
 8003fbe:	ebb2 0801 	subs.w	r8, r2, r1
 8003fc2:	4659      	mov	r1, fp
 8003fc4:	eb63 0901 	sbc.w	r9, r3, r1
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fdc:	4690      	mov	r8, r2
 8003fde:	4699      	mov	r9, r3
 8003fe0:	4623      	mov	r3, r4
 8003fe2:	eb18 0303 	adds.w	r3, r8, r3
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	462b      	mov	r3, r5
 8003fea:	eb49 0303 	adc.w	r3, r9, r3
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	024b      	lsls	r3, r1, #9
 8004000:	4621      	mov	r1, r4
 8004002:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004006:	4621      	mov	r1, r4
 8004008:	024a      	lsls	r2, r1, #9
 800400a:	4610      	mov	r0, r2
 800400c:	4619      	mov	r1, r3
 800400e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004012:	2200      	movs	r2, #0
 8004014:	65bb      	str	r3, [r7, #88]	; 0x58
 8004016:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004018:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800401c:	f7fc fe34 	bl	8000c88 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4613      	mov	r3, r2
 8004026:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800402a:	e065      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x420>
 800402c:	40023800 	.word	0x40023800
 8004030:	00f42400 	.word	0x00f42400
 8004034:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004038:	4b3d      	ldr	r3, [pc, #244]	; (8004130 <HAL_RCC_GetSysClockFreq+0x458>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	099b      	lsrs	r3, r3, #6
 800403e:	2200      	movs	r2, #0
 8004040:	4618      	mov	r0, r3
 8004042:	4611      	mov	r1, r2
 8004044:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004048:	653b      	str	r3, [r7, #80]	; 0x50
 800404a:	2300      	movs	r3, #0
 800404c:	657b      	str	r3, [r7, #84]	; 0x54
 800404e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004052:	4642      	mov	r2, r8
 8004054:	464b      	mov	r3, r9
 8004056:	f04f 0000 	mov.w	r0, #0
 800405a:	f04f 0100 	mov.w	r1, #0
 800405e:	0159      	lsls	r1, r3, #5
 8004060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004064:	0150      	lsls	r0, r2, #5
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4641      	mov	r1, r8
 800406c:	1a51      	subs	r1, r2, r1
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	4649      	mov	r1, r9
 8004072:	eb63 0301 	sbc.w	r3, r3, r1
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004084:	4659      	mov	r1, fp
 8004086:	018b      	lsls	r3, r1, #6
 8004088:	4651      	mov	r1, sl
 800408a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800408e:	4651      	mov	r1, sl
 8004090:	018a      	lsls	r2, r1, #6
 8004092:	4651      	mov	r1, sl
 8004094:	1a54      	subs	r4, r2, r1
 8004096:	4659      	mov	r1, fp
 8004098:	eb63 0501 	sbc.w	r5, r3, r1
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	00eb      	lsls	r3, r5, #3
 80040a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040aa:	00e2      	lsls	r2, r4, #3
 80040ac:	4614      	mov	r4, r2
 80040ae:	461d      	mov	r5, r3
 80040b0:	4643      	mov	r3, r8
 80040b2:	18e3      	adds	r3, r4, r3
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	464b      	mov	r3, r9
 80040b8:	eb45 0303 	adc.w	r3, r5, r3
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ca:	4629      	mov	r1, r5
 80040cc:	028b      	lsls	r3, r1, #10
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d4:	4621      	mov	r1, r4
 80040d6:	028a      	lsls	r2, r1, #10
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040e0:	2200      	movs	r2, #0
 80040e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80040e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040ea:	f7fc fdcd 	bl	8000c88 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4613      	mov	r3, r2
 80040f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040f8:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <HAL_RCC_GetSysClockFreq+0x458>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0f1b      	lsrs	r3, r3, #28
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800410a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004116:	e003      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_GetSysClockFreq+0x45c>)
 800411a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800411e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004120:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004124:	4618      	mov	r0, r3
 8004126:	37b8      	adds	r7, #184	; 0xb8
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	00f42400 	.word	0x00f42400

08004138 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e28d      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8083 	beq.w	800425e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004158:	4b94      	ldr	r3, [pc, #592]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b04      	cmp	r3, #4
 8004162:	d019      	beq.n	8004198 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004164:	4b91      	ldr	r3, [pc, #580]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800416c:	2b08      	cmp	r3, #8
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004170:	4b8e      	ldr	r3, [pc, #568]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800417c:	d00c      	beq.n	8004198 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417e:	4b8b      	ldr	r3, [pc, #556]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d112      	bne.n	80041b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418a:	4b88      	ldr	r3, [pc, #544]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004196:	d10b      	bne.n	80041b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	4b84      	ldr	r3, [pc, #528]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d05b      	beq.n	800425c <HAL_RCC_OscConfig+0x124>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d157      	bne.n	800425c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e25a      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b8:	d106      	bne.n	80041c8 <HAL_RCC_OscConfig+0x90>
 80041ba:	4b7c      	ldr	r3, [pc, #496]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a7b      	ldr	r2, [pc, #492]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e01d      	b.n	8004204 <HAL_RCC_OscConfig+0xcc>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0xb4>
 80041d2:	4b76      	ldr	r3, [pc, #472]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a75      	ldr	r2, [pc, #468]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	4b73      	ldr	r3, [pc, #460]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a72      	ldr	r2, [pc, #456]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e00b      	b.n	8004204 <HAL_RCC_OscConfig+0xcc>
 80041ec:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a6e      	ldr	r2, [pc, #440]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a6b      	ldr	r2, [pc, #428]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80041fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d013      	beq.n	8004234 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fd fd54 	bl	8001cb8 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004214:	f7fd fd50 	bl	8001cb8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b64      	cmp	r3, #100	; 0x64
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e21f      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0xdc>
 8004232:	e014      	b.n	800425e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fd fd40 	bl	8001cb8 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800423c:	f7fd fd3c 	bl	8001cb8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b64      	cmp	r3, #100	; 0x64
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e20b      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424e:	4b57      	ldr	r3, [pc, #348]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x104>
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d06f      	beq.n	800434a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800426a:	4b50      	ldr	r3, [pc, #320]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
 8004272:	2b00      	cmp	r3, #0
 8004274:	d017      	beq.n	80042a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004276:	4b4d      	ldr	r3, [pc, #308]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800427e:	2b08      	cmp	r3, #8
 8004280:	d105      	bne.n	800428e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004282:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d11c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800429a:	4b44      	ldr	r3, [pc, #272]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d116      	bne.n	80042d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	4b41      	ldr	r3, [pc, #260]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x186>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e1d3      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4937      	ldr	r1, [pc, #220]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	e03a      	b.n	800434a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d020      	beq.n	800431e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042dc:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <HAL_RCC_OscConfig+0x278>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fd fce9 	bl	8001cb8 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ea:	f7fd fce5 	bl	8001cb8 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1b4      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4925      	ldr	r1, [pc, #148]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <HAL_RCC_OscConfig+0x278>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd fcc8 	bl	8001cb8 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432c:	f7fd fcc4 	bl	8001cb8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e193      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d036      	beq.n	80043c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d016      	beq.n	800438c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <HAL_RCC_OscConfig+0x27c>)
 8004360:	2201      	movs	r2, #1
 8004362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd fca8 	bl	8001cb8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436c:	f7fd fca4 	bl	8001cb8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e173      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x274>)
 8004380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x234>
 800438a:	e01b      	b.n	80043c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_OscConfig+0x27c>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004392:	f7fd fc91 	bl	8001cb8 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004398:	e00e      	b.n	80043b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439a:	f7fd fc8d 	bl	8001cb8 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d907      	bls.n	80043b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e15c      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
 80043ac:	40023800 	.word	0x40023800
 80043b0:	42470000 	.word	0x42470000
 80043b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	4b8a      	ldr	r3, [pc, #552]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ea      	bne.n	800439a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8097 	beq.w	8004500 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b83      	ldr	r3, [pc, #524]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	4b7f      	ldr	r3, [pc, #508]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4a7e      	ldr	r2, [pc, #504]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f0:	6413      	str	r3, [r2, #64]	; 0x40
 80043f2:	4b7c      	ldr	r3, [pc, #496]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004402:	4b79      	ldr	r3, [pc, #484]	; (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d118      	bne.n	8004440 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440e:	4b76      	ldr	r3, [pc, #472]	; (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a75      	ldr	r2, [pc, #468]	; (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441a:	f7fd fc4d 	bl	8001cb8 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004422:	f7fd fc49 	bl	8001cb8 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e118      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	4b6c      	ldr	r3, [pc, #432]	; (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d106      	bne.n	8004456 <HAL_RCC_OscConfig+0x31e>
 8004448:	4b66      	ldr	r3, [pc, #408]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	4a65      	ldr	r2, [pc, #404]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	; 0x70
 8004454:	e01c      	b.n	8004490 <HAL_RCC_OscConfig+0x358>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x340>
 800445e:	4b61      	ldr	r3, [pc, #388]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a60      	ldr	r2, [pc, #384]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	6713      	str	r3, [r2, #112]	; 0x70
 800446a:	4b5e      	ldr	r3, [pc, #376]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	4a5d      	ldr	r2, [pc, #372]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6713      	str	r3, [r2, #112]	; 0x70
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0x358>
 8004478:	4b5a      	ldr	r3, [pc, #360]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4a59      	ldr	r2, [pc, #356]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	6713      	str	r3, [r2, #112]	; 0x70
 8004484:	4b57      	ldr	r3, [pc, #348]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a56      	ldr	r2, [pc, #344]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800448a:	f023 0304 	bic.w	r3, r3, #4
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d015      	beq.n	80044c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fd fc0e 	bl	8001cb8 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fd fc0a 	bl	8001cb8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e0d7      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	4b4b      	ldr	r3, [pc, #300]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ee      	beq.n	80044a0 <HAL_RCC_OscConfig+0x368>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd fbf8 	bl	8001cb8 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fd fbf4 	bl	8001cb8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0c1      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	4b40      	ldr	r3, [pc, #256]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ee      	bne.n	80044cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	4a3a      	ldr	r2, [pc, #232]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80ad 	beq.w	8004664 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b08      	cmp	r3, #8
 8004514:	d060      	beq.n	80045d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d145      	bne.n	80045aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451e:	4b33      	ldr	r3, [pc, #204]	; (80045ec <HAL_RCC_OscConfig+0x4b4>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd fbc8 	bl	8001cb8 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452c:	f7fd fbc4 	bl	8001cb8 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e093      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	071b      	lsls	r3, r3, #28
 8004576:	491b      	ldr	r1, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <HAL_RCC_OscConfig+0x4b4>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd fb99 	bl	8001cb8 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fd fb95 	bl	8001cb8 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e064      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x452>
 80045a8:	e05c      	b.n	8004664 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <HAL_RCC_OscConfig+0x4b4>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fb82 	bl	8001cb8 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd fb7e 	bl	8001cb8 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e04d      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x480>
 80045d6:	e045      	b.n	8004664 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e040      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40007000 	.word	0x40007000
 80045ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045f0:	4b1f      	ldr	r3, [pc, #124]	; (8004670 <HAL_RCC_OscConfig+0x538>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d030      	beq.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d129      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d122      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004628:	4293      	cmp	r3, r2
 800462a:	d119      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d10f      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e03f      	b.n	8004706 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd f8c2 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f929 	bl	8004910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b08a      	sub	sp, #40	; 0x28
 8004712:	af02      	add	r7, sp, #8
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b20      	cmp	r3, #32
 800472c:	d17c      	bne.n	8004828 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_UART_Transmit+0x2c>
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e075      	b.n	800482a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_UART_Transmit+0x3e>
 8004748:	2302      	movs	r3, #2
 800474a:	e06e      	b.n	800482a <HAL_UART_Transmit+0x11c>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2221      	movs	r2, #33	; 0x21
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004762:	f7fd faa9 	bl	8001cb8 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477c:	d108      	bne.n	8004790 <HAL_UART_Transmit+0x82>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d104      	bne.n	8004790 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	e003      	b.n	8004798 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047a0:	e02a      	b.n	80047f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2200      	movs	r2, #0
 80047aa:	2180      	movs	r1, #128	; 0x80
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f840 	bl	8004832 <UART_WaitOnFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e036      	b.n	800482a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	3302      	adds	r3, #2
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	e007      	b.n	80047ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	3301      	adds	r3, #1
 80047e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1cf      	bne.n	80047a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	2140      	movs	r1, #64	; 0x40
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f810 	bl	8004832 <UART_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e006      	b.n	800482a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b090      	sub	sp, #64	; 0x40
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	603b      	str	r3, [r7, #0]
 800483e:	4613      	mov	r3, r2
 8004840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004842:	e050      	b.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800484a:	d04c      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800484c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x30>
 8004852:	f7fd fa31 	bl	8001cb8 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800485e:	429a      	cmp	r2, r3
 8004860:	d241      	bcs.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004882:	637a      	str	r2, [r7, #52]	; 0x34
 8004884:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e5      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3314      	adds	r3, #20
 800489c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	613b      	str	r3, [r7, #16]
   return(result);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048b6:	623a      	str	r2, [r7, #32]
 80048b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	69f9      	ldr	r1, [r7, #28]
 80048bc:	6a3a      	ldr	r2, [r7, #32]
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e5      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e00f      	b.n	8004906 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4013      	ands	r3, r2
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	bf0c      	ite	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	2300      	movne	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	429a      	cmp	r2, r3
 8004902:	d09f      	beq.n	8004844 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3740      	adds	r7, #64	; 0x40
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004914:	b0c0      	sub	sp, #256	; 0x100
 8004916:	af00      	add	r7, sp, #0
 8004918:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	68d9      	ldr	r1, [r3, #12]
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	ea40 0301 	orr.w	r3, r0, r1
 8004938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	431a      	orrs	r2, r3
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004968:	f021 010c 	bic.w	r1, r1, #12
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004976:	430b      	orrs	r3, r1
 8004978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	6999      	ldr	r1, [r3, #24]
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	ea40 0301 	orr.w	r3, r0, r1
 8004996:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b8f      	ldr	r3, [pc, #572]	; (8004bdc <UART_SetConfig+0x2cc>)
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d005      	beq.n	80049b0 <UART_SetConfig+0xa0>
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <UART_SetConfig+0x2d0>)
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d104      	bne.n	80049ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7fe fe54 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 80049b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049b8:	e003      	b.n	80049c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ba:	f7fe fe3b 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 80049be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049cc:	f040 810c 	bne.w	8004be8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	1891      	adds	r1, r2, r2
 80049e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ea:	415b      	adcs	r3, r3
 80049ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049f2:	4621      	mov	r1, r4
 80049f4:	eb12 0801 	adds.w	r8, r2, r1
 80049f8:	4629      	mov	r1, r5
 80049fa:	eb43 0901 	adc.w	r9, r3, r1
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a12:	4690      	mov	r8, r2
 8004a14:	4699      	mov	r9, r3
 8004a16:	4623      	mov	r3, r4
 8004a18:	eb18 0303 	adds.w	r3, r8, r3
 8004a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a20:	462b      	mov	r3, r5
 8004a22:	eb49 0303 	adc.w	r3, r9, r3
 8004a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a3e:	460b      	mov	r3, r1
 8004a40:	18db      	adds	r3, r3, r3
 8004a42:	653b      	str	r3, [r7, #80]	; 0x50
 8004a44:	4613      	mov	r3, r2
 8004a46:	eb42 0303 	adc.w	r3, r2, r3
 8004a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a54:	f7fc f918 	bl	8000c88 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4b61      	ldr	r3, [pc, #388]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	011c      	lsls	r4, r3, #4
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a80:	415b      	adcs	r3, r3
 8004a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a88:	4641      	mov	r1, r8
 8004a8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a8e:	4649      	mov	r1, r9
 8004a90:	eb43 0b01 	adc.w	fp, r3, r1
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa8:	4692      	mov	sl, r2
 8004aaa:	469b      	mov	fp, r3
 8004aac:	4643      	mov	r3, r8
 8004aae:	eb1a 0303 	adds.w	r3, sl, r3
 8004ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8004abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004acc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	18db      	adds	r3, r3, r3
 8004ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8004ada:	4613      	mov	r3, r2
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aea:	f7fc f8cd 	bl	8000c88 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004af6:	fba3 2301 	umull	r2, r3, r3, r1
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2264      	movs	r2, #100	; 0x64
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	1acb      	subs	r3, r1, r3
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b0a:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b18:	441c      	add	r4, r3
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b34:	415b      	adcs	r3, r3
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	1851      	adds	r1, r2, r1
 8004b40:	6339      	str	r1, [r7, #48]	; 0x30
 8004b42:	4649      	mov	r1, r9
 8004b44:	414b      	adcs	r3, r1
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b54:	4659      	mov	r1, fp
 8004b56:	00cb      	lsls	r3, r1, #3
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5e:	4651      	mov	r1, sl
 8004b60:	00ca      	lsls	r2, r1, #3
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b70:	464b      	mov	r3, r9
 8004b72:	460a      	mov	r2, r1
 8004b74:	eb42 0303 	adc.w	r3, r2, r3
 8004b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b90:	460b      	mov	r3, r1
 8004b92:	18db      	adds	r3, r3, r3
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b96:	4613      	mov	r3, r2
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ba2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ba6:	f7fc f86f 	bl	8000c88 <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	2164      	movs	r1, #100	; 0x64
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	3332      	adds	r3, #50	; 0x32
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	f003 0207 	and.w	r2, r3, #7
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4422      	add	r2, r4
 8004bd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bd8:	e105      	b.n	8004de6 <UART_SetConfig+0x4d6>
 8004bda:	bf00      	nop
 8004bdc:	40011000 	.word	0x40011000
 8004be0:	40011400 	.word	0x40011400
 8004be4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bf2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bfa:	4642      	mov	r2, r8
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	1891      	adds	r1, r2, r2
 8004c00:	6239      	str	r1, [r7, #32]
 8004c02:	415b      	adcs	r3, r3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	1854      	adds	r4, r2, r1
 8004c0e:	4649      	mov	r1, r9
 8004c10:	eb43 0501 	adc.w	r5, r3, r1
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	00eb      	lsls	r3, r5, #3
 8004c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c22:	00e2      	lsls	r2, r4, #3
 8004c24:	4614      	mov	r4, r2
 8004c26:	461d      	mov	r5, r3
 8004c28:	4643      	mov	r3, r8
 8004c2a:	18e3      	adds	r3, r4, r3
 8004c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c30:	464b      	mov	r3, r9
 8004c32:	eb45 0303 	adc.w	r3, r5, r3
 8004c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c56:	4629      	mov	r1, r5
 8004c58:	008b      	lsls	r3, r1, #2
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c60:	4621      	mov	r1, r4
 8004c62:	008a      	lsls	r2, r1, #2
 8004c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c68:	f7fc f80e 	bl	8000c88 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4b60      	ldr	r3, [pc, #384]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004c72:	fba3 2302 	umull	r2, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	011c      	lsls	r4, r3, #4
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	61b9      	str	r1, [r7, #24]
 8004c94:	415b      	adcs	r3, r3
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	1851      	adds	r1, r2, r1
 8004ca0:	6139      	str	r1, [r7, #16]
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	414b      	adcs	r3, r1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	00cb      	lsls	r3, r1, #3
 8004cb8:	4651      	mov	r1, sl
 8004cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	00ca      	lsls	r2, r1, #3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4642      	mov	r2, r8
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	460a      	mov	r2, r1
 8004cd4:	eb42 0303 	adc.w	r3, r2, r3
 8004cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ce6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	008b      	lsls	r3, r1, #2
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cfe:	4641      	mov	r1, r8
 8004d00:	008a      	lsls	r2, r1, #2
 8004d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d06:	f7fb ffbf 	bl	8000c88 <__aeabi_uldivmod>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004d10:	fba3 1302 	umull	r1, r3, r3, r2
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	2164      	movs	r1, #100	; 0x64
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	3332      	adds	r3, #50	; 0x32
 8004d22:	4a34      	ldr	r2, [pc, #208]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2e:	441c      	add	r4, r3
 8004d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d34:	2200      	movs	r2, #0
 8004d36:	673b      	str	r3, [r7, #112]	; 0x70
 8004d38:	677a      	str	r2, [r7, #116]	; 0x74
 8004d3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d3e:	4642      	mov	r2, r8
 8004d40:	464b      	mov	r3, r9
 8004d42:	1891      	adds	r1, r2, r2
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	415b      	adcs	r3, r3
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4e:	4641      	mov	r1, r8
 8004d50:	1851      	adds	r1, r2, r1
 8004d52:	6039      	str	r1, [r7, #0]
 8004d54:	4649      	mov	r1, r9
 8004d56:	414b      	adcs	r3, r1
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d66:	4659      	mov	r1, fp
 8004d68:	00cb      	lsls	r3, r1, #3
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d70:	4651      	mov	r1, sl
 8004d72:	00ca      	lsls	r2, r1, #3
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4642      	mov	r2, r8
 8004d7c:	189b      	adds	r3, r3, r2
 8004d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d80:	464b      	mov	r3, r9
 8004d82:	460a      	mov	r2, r1
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	663b      	str	r3, [r7, #96]	; 0x60
 8004d94:	667a      	str	r2, [r7, #100]	; 0x64
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004da2:	4649      	mov	r1, r9
 8004da4:	008b      	lsls	r3, r1, #2
 8004da6:	4641      	mov	r1, r8
 8004da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dac:	4641      	mov	r1, r8
 8004dae:	008a      	lsls	r2, r1, #2
 8004db0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004db4:	f7fb ff68 	bl	8000c88 <__aeabi_uldivmod>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004dbe:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	2164      	movs	r1, #100	; 0x64
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	3332      	adds	r3, #50	; 0x32
 8004dd0:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	f003 020f 	and.w	r2, r3, #15
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4422      	add	r2, r4
 8004de4:	609a      	str	r2, [r3, #8]
}
 8004de6:	bf00      	nop
 8004de8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df2:	bf00      	nop
 8004df4:	51eb851f 	.word	0x51eb851f

08004df8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004df8:	b084      	sub	sp, #16
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	f107 001c 	add.w	r0, r7, #28
 8004e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d122      	bne.n	8004e56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d105      	bne.n	8004e4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fa9c 	bl	8005388 <USB_CoreReset>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	e01a      	b.n	8004e8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa90 	bl	8005388 <USB_CoreReset>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e7e:	e005      	b.n	8004e8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d10b      	bne.n	8004eaa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f043 0206 	orr.w	r2, r3, #6
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb6:	b004      	add	sp, #16
 8004eb8:	4770      	bx	lr

08004eba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d115      	bne.n	8004f2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	f7fc fee0 	bl	8001cd0 <HAL_Delay>
      ms++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fa28 	bl	800536c <USB_GetMode>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d01e      	beq.n	8004f60 <USB_SetCurrentMode+0x84>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b31      	cmp	r3, #49	; 0x31
 8004f26:	d9f0      	bls.n	8004f0a <USB_SetCurrentMode+0x2e>
 8004f28:	e01a      	b.n	8004f60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d115      	bne.n	8004f5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	f7fc fec7 	bl	8001cd0 <HAL_Delay>
      ms++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3301      	adds	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fa0f 	bl	800536c <USB_GetMode>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <USB_SetCurrentMode+0x84>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b31      	cmp	r3, #49	; 0x31
 8004f58:	d9f0      	bls.n	8004f3c <USB_SetCurrentMode+0x60>
 8004f5a:	e001      	b.n	8004f60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e005      	b.n	8004f6c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b32      	cmp	r3, #50	; 0x32
 8004f64:	d101      	bne.n	8004f6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f74:	b084      	sub	sp, #16
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e009      	b.n	8004fa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3340      	adds	r3, #64	; 0x40
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	2b0e      	cmp	r3, #14
 8004fac:	d9f2      	bls.n	8004f94 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d11c      	bne.n	8004fee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fc2:	f043 0302 	orr.w	r3, r3, #2
 8004fc6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e005      	b.n	8004ffa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005000:	461a      	mov	r2, r3
 8005002:	2300      	movs	r3, #0
 8005004:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500c:	4619      	mov	r1, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005014:	461a      	mov	r2, r3
 8005016:	680b      	ldr	r3, [r1, #0]
 8005018:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	2b01      	cmp	r3, #1
 800501e:	d10c      	bne.n	800503a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005026:	2100      	movs	r1, #0
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f965 	bl	80052f8 <USB_SetDevSpeed>
 800502e:	e008      	b.n	8005042 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005030:	2101      	movs	r1, #1
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f960 	bl	80052f8 <USB_SetDevSpeed>
 8005038:	e003      	b.n	8005042 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800503a:	2103      	movs	r1, #3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f95b 	bl	80052f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005042:	2110      	movs	r1, #16
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f8f3 	bl	8005230 <USB_FlushTxFifo>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f91f 	bl	8005298 <USB_FlushRxFifo>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506a:	461a      	mov	r2, r3
 800506c:	2300      	movs	r3, #0
 800506e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	461a      	mov	r2, r3
 8005078:	2300      	movs	r3, #0
 800507a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	461a      	mov	r2, r3
 8005084:	2300      	movs	r3, #0
 8005086:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	e043      	b.n	8005116 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050a4:	d118      	bne.n	80050d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	e013      	b.n	80050ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	461a      	mov	r2, r3
 80050d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	e008      	b.n	80050ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	461a      	mov	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	461a      	mov	r2, r3
 80050f8:	2300      	movs	r3, #0
 80050fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005108:	461a      	mov	r2, r3
 800510a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800510e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	3301      	adds	r3, #1
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	429a      	cmp	r2, r3
 800511c:	d3b7      	bcc.n	800508e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e043      	b.n	80051ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800513a:	d118      	bne.n	800516e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514e:	461a      	mov	r2, r3
 8005150:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	e013      	b.n	8005180 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	461a      	mov	r2, r3
 8005166:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e008      	b.n	8005180 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517a:	461a      	mov	r2, r3
 800517c:	2300      	movs	r3, #0
 800517e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	461a      	mov	r2, r3
 800518e:	2300      	movs	r3, #0
 8005190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	461a      	mov	r2, r3
 80051a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	3301      	adds	r3, #1
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d3b7      	bcc.n	8005124 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f043 0210 	orr.w	r2, r3, #16
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	4b0f      	ldr	r3, [pc, #60]	; (800522c <USB_DevInit+0x2b8>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f043 0208 	orr.w	r2, r3, #8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d107      	bne.n	800521c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005214:	f043 0304 	orr.w	r3, r3, #4
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005228:	b004      	add	sp, #16
 800522a:	4770      	bx	lr
 800522c:	803c3800 	.word	0x803c3800

08005230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a13      	ldr	r2, [pc, #76]	; (8005294 <USB_FlushTxFifo+0x64>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d901      	bls.n	8005250 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e01b      	b.n	8005288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	daf2      	bge.n	800523e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	019b      	lsls	r3, r3, #6
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3301      	adds	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4a08      	ldr	r2, [pc, #32]	; (8005294 <USB_FlushTxFifo+0x64>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d901      	bls.n	800527a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e006      	b.n	8005288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b20      	cmp	r3, #32
 8005284:	d0f0      	beq.n	8005268 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	00030d40 	.word	0x00030d40

08005298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4a11      	ldr	r2, [pc, #68]	; (80052f4 <USB_FlushRxFifo+0x5c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e018      	b.n	80052e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	daf2      	bge.n	80052a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2210      	movs	r2, #16
 80052c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <USB_FlushRxFifo+0x5c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e006      	b.n	80052e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d0f0      	beq.n	80052c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	00030d40 	.word	0x00030d40

080052f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	68f9      	ldr	r1, [r7, #12]
 8005314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005318:	4313      	orrs	r3, r2
 800531a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005344:	f023 0303 	bic.w	r3, r3, #3
 8005348:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005358:	f043 0302 	orr.w	r3, r3, #2
 800535c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0301 	and.w	r3, r3, #1
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3301      	adds	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4a13      	ldr	r2, [pc, #76]	; (80053ec <USB_CoreReset+0x64>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e01b      	b.n	80053de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	daf2      	bge.n	8005394 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f043 0201 	orr.w	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <USB_CoreReset+0x64>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e006      	b.n	80053de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d0f0      	beq.n	80053be <USB_CoreReset+0x36>

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	00030d40 	.word	0x00030d40

080053f0 <__errno>:
 80053f0:	4b01      	ldr	r3, [pc, #4]	; (80053f8 <__errno+0x8>)
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	2000000c 	.word	0x2000000c

080053fc <__libc_init_array>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	4d0d      	ldr	r5, [pc, #52]	; (8005434 <__libc_init_array+0x38>)
 8005400:	4c0d      	ldr	r4, [pc, #52]	; (8005438 <__libc_init_array+0x3c>)
 8005402:	1b64      	subs	r4, r4, r5
 8005404:	10a4      	asrs	r4, r4, #2
 8005406:	2600      	movs	r6, #0
 8005408:	42a6      	cmp	r6, r4
 800540a:	d109      	bne.n	8005420 <__libc_init_array+0x24>
 800540c:	4d0b      	ldr	r5, [pc, #44]	; (800543c <__libc_init_array+0x40>)
 800540e:	4c0c      	ldr	r4, [pc, #48]	; (8005440 <__libc_init_array+0x44>)
 8005410:	f002 ff90 	bl	8008334 <_init>
 8005414:	1b64      	subs	r4, r4, r5
 8005416:	10a4      	asrs	r4, r4, #2
 8005418:	2600      	movs	r6, #0
 800541a:	42a6      	cmp	r6, r4
 800541c:	d105      	bne.n	800542a <__libc_init_array+0x2e>
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	f855 3b04 	ldr.w	r3, [r5], #4
 8005424:	4798      	blx	r3
 8005426:	3601      	adds	r6, #1
 8005428:	e7ee      	b.n	8005408 <__libc_init_array+0xc>
 800542a:	f855 3b04 	ldr.w	r3, [r5], #4
 800542e:	4798      	blx	r3
 8005430:	3601      	adds	r6, #1
 8005432:	e7f2      	b.n	800541a <__libc_init_array+0x1e>
 8005434:	080087b4 	.word	0x080087b4
 8005438:	080087b4 	.word	0x080087b4
 800543c:	080087b4 	.word	0x080087b4
 8005440:	080087b8 	.word	0x080087b8

08005444 <memcpy>:
 8005444:	440a      	add	r2, r1
 8005446:	4291      	cmp	r1, r2
 8005448:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800544c:	d100      	bne.n	8005450 <memcpy+0xc>
 800544e:	4770      	bx	lr
 8005450:	b510      	push	{r4, lr}
 8005452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800545a:	4291      	cmp	r1, r2
 800545c:	d1f9      	bne.n	8005452 <memcpy+0xe>
 800545e:	bd10      	pop	{r4, pc}

08005460 <memset>:
 8005460:	4402      	add	r2, r0
 8005462:	4603      	mov	r3, r0
 8005464:	4293      	cmp	r3, r2
 8005466:	d100      	bne.n	800546a <memset+0xa>
 8005468:	4770      	bx	lr
 800546a:	f803 1b01 	strb.w	r1, [r3], #1
 800546e:	e7f9      	b.n	8005464 <memset+0x4>

08005470 <__cvt>:
 8005470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	ec55 4b10 	vmov	r4, r5, d0
 8005478:	2d00      	cmp	r5, #0
 800547a:	460e      	mov	r6, r1
 800547c:	4619      	mov	r1, r3
 800547e:	462b      	mov	r3, r5
 8005480:	bfbb      	ittet	lt
 8005482:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005486:	461d      	movlt	r5, r3
 8005488:	2300      	movge	r3, #0
 800548a:	232d      	movlt	r3, #45	; 0x2d
 800548c:	700b      	strb	r3, [r1, #0]
 800548e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005490:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005494:	4691      	mov	r9, r2
 8005496:	f023 0820 	bic.w	r8, r3, #32
 800549a:	bfbc      	itt	lt
 800549c:	4622      	movlt	r2, r4
 800549e:	4614      	movlt	r4, r2
 80054a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054a4:	d005      	beq.n	80054b2 <__cvt+0x42>
 80054a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054aa:	d100      	bne.n	80054ae <__cvt+0x3e>
 80054ac:	3601      	adds	r6, #1
 80054ae:	2102      	movs	r1, #2
 80054b0:	e000      	b.n	80054b4 <__cvt+0x44>
 80054b2:	2103      	movs	r1, #3
 80054b4:	ab03      	add	r3, sp, #12
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	ab02      	add	r3, sp, #8
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	ec45 4b10 	vmov	d0, r4, r5
 80054c0:	4653      	mov	r3, sl
 80054c2:	4632      	mov	r2, r6
 80054c4:	f000 fe38 	bl	8006138 <_dtoa_r>
 80054c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054cc:	4607      	mov	r7, r0
 80054ce:	d102      	bne.n	80054d6 <__cvt+0x66>
 80054d0:	f019 0f01 	tst.w	r9, #1
 80054d4:	d022      	beq.n	800551c <__cvt+0xac>
 80054d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054da:	eb07 0906 	add.w	r9, r7, r6
 80054de:	d110      	bne.n	8005502 <__cvt+0x92>
 80054e0:	783b      	ldrb	r3, [r7, #0]
 80054e2:	2b30      	cmp	r3, #48	; 0x30
 80054e4:	d10a      	bne.n	80054fc <__cvt+0x8c>
 80054e6:	2200      	movs	r2, #0
 80054e8:	2300      	movs	r3, #0
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fb fb0b 	bl	8000b08 <__aeabi_dcmpeq>
 80054f2:	b918      	cbnz	r0, 80054fc <__cvt+0x8c>
 80054f4:	f1c6 0601 	rsb	r6, r6, #1
 80054f8:	f8ca 6000 	str.w	r6, [sl]
 80054fc:	f8da 3000 	ldr.w	r3, [sl]
 8005500:	4499      	add	r9, r3
 8005502:	2200      	movs	r2, #0
 8005504:	2300      	movs	r3, #0
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	f7fb fafd 	bl	8000b08 <__aeabi_dcmpeq>
 800550e:	b108      	cbz	r0, 8005514 <__cvt+0xa4>
 8005510:	f8cd 900c 	str.w	r9, [sp, #12]
 8005514:	2230      	movs	r2, #48	; 0x30
 8005516:	9b03      	ldr	r3, [sp, #12]
 8005518:	454b      	cmp	r3, r9
 800551a:	d307      	bcc.n	800552c <__cvt+0xbc>
 800551c:	9b03      	ldr	r3, [sp, #12]
 800551e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005520:	1bdb      	subs	r3, r3, r7
 8005522:	4638      	mov	r0, r7
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	b004      	add	sp, #16
 8005528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552c:	1c59      	adds	r1, r3, #1
 800552e:	9103      	str	r1, [sp, #12]
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e7f0      	b.n	8005516 <__cvt+0xa6>

08005534 <__exponent>:
 8005534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005536:	4603      	mov	r3, r0
 8005538:	2900      	cmp	r1, #0
 800553a:	bfb8      	it	lt
 800553c:	4249      	neglt	r1, r1
 800553e:	f803 2b02 	strb.w	r2, [r3], #2
 8005542:	bfb4      	ite	lt
 8005544:	222d      	movlt	r2, #45	; 0x2d
 8005546:	222b      	movge	r2, #43	; 0x2b
 8005548:	2909      	cmp	r1, #9
 800554a:	7042      	strb	r2, [r0, #1]
 800554c:	dd2a      	ble.n	80055a4 <__exponent+0x70>
 800554e:	f10d 0407 	add.w	r4, sp, #7
 8005552:	46a4      	mov	ip, r4
 8005554:	270a      	movs	r7, #10
 8005556:	46a6      	mov	lr, r4
 8005558:	460a      	mov	r2, r1
 800555a:	fb91 f6f7 	sdiv	r6, r1, r7
 800555e:	fb07 1516 	mls	r5, r7, r6, r1
 8005562:	3530      	adds	r5, #48	; 0x30
 8005564:	2a63      	cmp	r2, #99	; 0x63
 8005566:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800556a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800556e:	4631      	mov	r1, r6
 8005570:	dcf1      	bgt.n	8005556 <__exponent+0x22>
 8005572:	3130      	adds	r1, #48	; 0x30
 8005574:	f1ae 0502 	sub.w	r5, lr, #2
 8005578:	f804 1c01 	strb.w	r1, [r4, #-1]
 800557c:	1c44      	adds	r4, r0, #1
 800557e:	4629      	mov	r1, r5
 8005580:	4561      	cmp	r1, ip
 8005582:	d30a      	bcc.n	800559a <__exponent+0x66>
 8005584:	f10d 0209 	add.w	r2, sp, #9
 8005588:	eba2 020e 	sub.w	r2, r2, lr
 800558c:	4565      	cmp	r5, ip
 800558e:	bf88      	it	hi
 8005590:	2200      	movhi	r2, #0
 8005592:	4413      	add	r3, r2
 8005594:	1a18      	subs	r0, r3, r0
 8005596:	b003      	add	sp, #12
 8005598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800559a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800559e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055a2:	e7ed      	b.n	8005580 <__exponent+0x4c>
 80055a4:	2330      	movs	r3, #48	; 0x30
 80055a6:	3130      	adds	r1, #48	; 0x30
 80055a8:	7083      	strb	r3, [r0, #2]
 80055aa:	70c1      	strb	r1, [r0, #3]
 80055ac:	1d03      	adds	r3, r0, #4
 80055ae:	e7f1      	b.n	8005594 <__exponent+0x60>

080055b0 <_printf_float>:
 80055b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b4:	ed2d 8b02 	vpush	{d8}
 80055b8:	b08d      	sub	sp, #52	; 0x34
 80055ba:	460c      	mov	r4, r1
 80055bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055c0:	4616      	mov	r6, r2
 80055c2:	461f      	mov	r7, r3
 80055c4:	4605      	mov	r5, r0
 80055c6:	f001 fd5d 	bl	8007084 <_localeconv_r>
 80055ca:	f8d0 a000 	ldr.w	sl, [r0]
 80055ce:	4650      	mov	r0, sl
 80055d0:	f7fa fe1e 	bl	8000210 <strlen>
 80055d4:	2300      	movs	r3, #0
 80055d6:	930a      	str	r3, [sp, #40]	; 0x28
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	9305      	str	r3, [sp, #20]
 80055dc:	f8d8 3000 	ldr.w	r3, [r8]
 80055e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055e4:	3307      	adds	r3, #7
 80055e6:	f023 0307 	bic.w	r3, r3, #7
 80055ea:	f103 0208 	add.w	r2, r3, #8
 80055ee:	f8c8 2000 	str.w	r2, [r8]
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005602:	9307      	str	r3, [sp, #28]
 8005604:	f8cd 8018 	str.w	r8, [sp, #24]
 8005608:	ee08 0a10 	vmov	s16, r0
 800560c:	4b9f      	ldr	r3, [pc, #636]	; (800588c <_printf_float+0x2dc>)
 800560e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005616:	f7fb faa9 	bl	8000b6c <__aeabi_dcmpun>
 800561a:	bb88      	cbnz	r0, 8005680 <_printf_float+0xd0>
 800561c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005620:	4b9a      	ldr	r3, [pc, #616]	; (800588c <_printf_float+0x2dc>)
 8005622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005626:	f7fb fa83 	bl	8000b30 <__aeabi_dcmple>
 800562a:	bb48      	cbnz	r0, 8005680 <_printf_float+0xd0>
 800562c:	2200      	movs	r2, #0
 800562e:	2300      	movs	r3, #0
 8005630:	4640      	mov	r0, r8
 8005632:	4649      	mov	r1, r9
 8005634:	f7fb fa72 	bl	8000b1c <__aeabi_dcmplt>
 8005638:	b110      	cbz	r0, 8005640 <_printf_float+0x90>
 800563a:	232d      	movs	r3, #45	; 0x2d
 800563c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005640:	4b93      	ldr	r3, [pc, #588]	; (8005890 <_printf_float+0x2e0>)
 8005642:	4894      	ldr	r0, [pc, #592]	; (8005894 <_printf_float+0x2e4>)
 8005644:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005648:	bf94      	ite	ls
 800564a:	4698      	movls	r8, r3
 800564c:	4680      	movhi	r8, r0
 800564e:	2303      	movs	r3, #3
 8005650:	6123      	str	r3, [r4, #16]
 8005652:	9b05      	ldr	r3, [sp, #20]
 8005654:	f023 0204 	bic.w	r2, r3, #4
 8005658:	6022      	str	r2, [r4, #0]
 800565a:	f04f 0900 	mov.w	r9, #0
 800565e:	9700      	str	r7, [sp, #0]
 8005660:	4633      	mov	r3, r6
 8005662:	aa0b      	add	r2, sp, #44	; 0x2c
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f9d8 	bl	8005a1c <_printf_common>
 800566c:	3001      	adds	r0, #1
 800566e:	f040 8090 	bne.w	8005792 <_printf_float+0x1e2>
 8005672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005676:	b00d      	add	sp, #52	; 0x34
 8005678:	ecbd 8b02 	vpop	{d8}
 800567c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005680:	4642      	mov	r2, r8
 8005682:	464b      	mov	r3, r9
 8005684:	4640      	mov	r0, r8
 8005686:	4649      	mov	r1, r9
 8005688:	f7fb fa70 	bl	8000b6c <__aeabi_dcmpun>
 800568c:	b140      	cbz	r0, 80056a0 <_printf_float+0xf0>
 800568e:	464b      	mov	r3, r9
 8005690:	2b00      	cmp	r3, #0
 8005692:	bfbc      	itt	lt
 8005694:	232d      	movlt	r3, #45	; 0x2d
 8005696:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800569a:	487f      	ldr	r0, [pc, #508]	; (8005898 <_printf_float+0x2e8>)
 800569c:	4b7f      	ldr	r3, [pc, #508]	; (800589c <_printf_float+0x2ec>)
 800569e:	e7d1      	b.n	8005644 <_printf_float+0x94>
 80056a0:	6863      	ldr	r3, [r4, #4]
 80056a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056a6:	9206      	str	r2, [sp, #24]
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	d13f      	bne.n	800572c <_printf_float+0x17c>
 80056ac:	2306      	movs	r3, #6
 80056ae:	6063      	str	r3, [r4, #4]
 80056b0:	9b05      	ldr	r3, [sp, #20]
 80056b2:	6861      	ldr	r1, [r4, #4]
 80056b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056b8:	2300      	movs	r3, #0
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	ab0a      	add	r3, sp, #40	; 0x28
 80056be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056c2:	ab09      	add	r3, sp, #36	; 0x24
 80056c4:	ec49 8b10 	vmov	d0, r8, r9
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056d0:	4628      	mov	r0, r5
 80056d2:	f7ff fecd 	bl	8005470 <__cvt>
 80056d6:	9b06      	ldr	r3, [sp, #24]
 80056d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056da:	2b47      	cmp	r3, #71	; 0x47
 80056dc:	4680      	mov	r8, r0
 80056de:	d108      	bne.n	80056f2 <_printf_float+0x142>
 80056e0:	1cc8      	adds	r0, r1, #3
 80056e2:	db02      	blt.n	80056ea <_printf_float+0x13a>
 80056e4:	6863      	ldr	r3, [r4, #4]
 80056e6:	4299      	cmp	r1, r3
 80056e8:	dd41      	ble.n	800576e <_printf_float+0x1be>
 80056ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80056ee:	fa5f fb8b 	uxtb.w	fp, fp
 80056f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056f6:	d820      	bhi.n	800573a <_printf_float+0x18a>
 80056f8:	3901      	subs	r1, #1
 80056fa:	465a      	mov	r2, fp
 80056fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005700:	9109      	str	r1, [sp, #36]	; 0x24
 8005702:	f7ff ff17 	bl	8005534 <__exponent>
 8005706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005708:	1813      	adds	r3, r2, r0
 800570a:	2a01      	cmp	r2, #1
 800570c:	4681      	mov	r9, r0
 800570e:	6123      	str	r3, [r4, #16]
 8005710:	dc02      	bgt.n	8005718 <_printf_float+0x168>
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	07d2      	lsls	r2, r2, #31
 8005716:	d501      	bpl.n	800571c <_printf_float+0x16c>
 8005718:	3301      	adds	r3, #1
 800571a:	6123      	str	r3, [r4, #16]
 800571c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005720:	2b00      	cmp	r3, #0
 8005722:	d09c      	beq.n	800565e <_printf_float+0xae>
 8005724:	232d      	movs	r3, #45	; 0x2d
 8005726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800572a:	e798      	b.n	800565e <_printf_float+0xae>
 800572c:	9a06      	ldr	r2, [sp, #24]
 800572e:	2a47      	cmp	r2, #71	; 0x47
 8005730:	d1be      	bne.n	80056b0 <_printf_float+0x100>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1bc      	bne.n	80056b0 <_printf_float+0x100>
 8005736:	2301      	movs	r3, #1
 8005738:	e7b9      	b.n	80056ae <_printf_float+0xfe>
 800573a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800573e:	d118      	bne.n	8005772 <_printf_float+0x1c2>
 8005740:	2900      	cmp	r1, #0
 8005742:	6863      	ldr	r3, [r4, #4]
 8005744:	dd0b      	ble.n	800575e <_printf_float+0x1ae>
 8005746:	6121      	str	r1, [r4, #16]
 8005748:	b913      	cbnz	r3, 8005750 <_printf_float+0x1a0>
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	07d0      	lsls	r0, r2, #31
 800574e:	d502      	bpl.n	8005756 <_printf_float+0x1a6>
 8005750:	3301      	adds	r3, #1
 8005752:	440b      	add	r3, r1
 8005754:	6123      	str	r3, [r4, #16]
 8005756:	65a1      	str	r1, [r4, #88]	; 0x58
 8005758:	f04f 0900 	mov.w	r9, #0
 800575c:	e7de      	b.n	800571c <_printf_float+0x16c>
 800575e:	b913      	cbnz	r3, 8005766 <_printf_float+0x1b6>
 8005760:	6822      	ldr	r2, [r4, #0]
 8005762:	07d2      	lsls	r2, r2, #31
 8005764:	d501      	bpl.n	800576a <_printf_float+0x1ba>
 8005766:	3302      	adds	r3, #2
 8005768:	e7f4      	b.n	8005754 <_printf_float+0x1a4>
 800576a:	2301      	movs	r3, #1
 800576c:	e7f2      	b.n	8005754 <_printf_float+0x1a4>
 800576e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005774:	4299      	cmp	r1, r3
 8005776:	db05      	blt.n	8005784 <_printf_float+0x1d4>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	6121      	str	r1, [r4, #16]
 800577c:	07d8      	lsls	r0, r3, #31
 800577e:	d5ea      	bpl.n	8005756 <_printf_float+0x1a6>
 8005780:	1c4b      	adds	r3, r1, #1
 8005782:	e7e7      	b.n	8005754 <_printf_float+0x1a4>
 8005784:	2900      	cmp	r1, #0
 8005786:	bfd4      	ite	le
 8005788:	f1c1 0202 	rsble	r2, r1, #2
 800578c:	2201      	movgt	r2, #1
 800578e:	4413      	add	r3, r2
 8005790:	e7e0      	b.n	8005754 <_printf_float+0x1a4>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	055a      	lsls	r2, r3, #21
 8005796:	d407      	bmi.n	80057a8 <_printf_float+0x1f8>
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	4642      	mov	r2, r8
 800579c:	4631      	mov	r1, r6
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	d12c      	bne.n	8005800 <_printf_float+0x250>
 80057a6:	e764      	b.n	8005672 <_printf_float+0xc2>
 80057a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057ac:	f240 80e0 	bls.w	8005970 <_printf_float+0x3c0>
 80057b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057b4:	2200      	movs	r2, #0
 80057b6:	2300      	movs	r3, #0
 80057b8:	f7fb f9a6 	bl	8000b08 <__aeabi_dcmpeq>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d034      	beq.n	800582a <_printf_float+0x27a>
 80057c0:	4a37      	ldr	r2, [pc, #220]	; (80058a0 <_printf_float+0x2f0>)
 80057c2:	2301      	movs	r3, #1
 80057c4:	4631      	mov	r1, r6
 80057c6:	4628      	mov	r0, r5
 80057c8:	47b8      	blx	r7
 80057ca:	3001      	adds	r0, #1
 80057cc:	f43f af51 	beq.w	8005672 <_printf_float+0xc2>
 80057d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057d4:	429a      	cmp	r2, r3
 80057d6:	db02      	blt.n	80057de <_printf_float+0x22e>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	07d8      	lsls	r0, r3, #31
 80057dc:	d510      	bpl.n	8005800 <_printf_float+0x250>
 80057de:	ee18 3a10 	vmov	r3, s16
 80057e2:	4652      	mov	r2, sl
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f af41 	beq.w	8005672 <_printf_float+0xc2>
 80057f0:	f04f 0800 	mov.w	r8, #0
 80057f4:	f104 091a 	add.w	r9, r4, #26
 80057f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057fa:	3b01      	subs	r3, #1
 80057fc:	4543      	cmp	r3, r8
 80057fe:	dc09      	bgt.n	8005814 <_printf_float+0x264>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	079b      	lsls	r3, r3, #30
 8005804:	f100 8105 	bmi.w	8005a12 <_printf_float+0x462>
 8005808:	68e0      	ldr	r0, [r4, #12]
 800580a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800580c:	4298      	cmp	r0, r3
 800580e:	bfb8      	it	lt
 8005810:	4618      	movlt	r0, r3
 8005812:	e730      	b.n	8005676 <_printf_float+0xc6>
 8005814:	2301      	movs	r3, #1
 8005816:	464a      	mov	r2, r9
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	f43f af27 	beq.w	8005672 <_printf_float+0xc2>
 8005824:	f108 0801 	add.w	r8, r8, #1
 8005828:	e7e6      	b.n	80057f8 <_printf_float+0x248>
 800582a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	dc39      	bgt.n	80058a4 <_printf_float+0x2f4>
 8005830:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <_printf_float+0x2f0>)
 8005832:	2301      	movs	r3, #1
 8005834:	4631      	mov	r1, r6
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	f43f af19 	beq.w	8005672 <_printf_float+0xc2>
 8005840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005844:	4313      	orrs	r3, r2
 8005846:	d102      	bne.n	800584e <_printf_float+0x29e>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	07d9      	lsls	r1, r3, #31
 800584c:	d5d8      	bpl.n	8005800 <_printf_float+0x250>
 800584e:	ee18 3a10 	vmov	r3, s16
 8005852:	4652      	mov	r2, sl
 8005854:	4631      	mov	r1, r6
 8005856:	4628      	mov	r0, r5
 8005858:	47b8      	blx	r7
 800585a:	3001      	adds	r0, #1
 800585c:	f43f af09 	beq.w	8005672 <_printf_float+0xc2>
 8005860:	f04f 0900 	mov.w	r9, #0
 8005864:	f104 0a1a 	add.w	sl, r4, #26
 8005868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800586a:	425b      	negs	r3, r3
 800586c:	454b      	cmp	r3, r9
 800586e:	dc01      	bgt.n	8005874 <_printf_float+0x2c4>
 8005870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005872:	e792      	b.n	800579a <_printf_float+0x1ea>
 8005874:	2301      	movs	r3, #1
 8005876:	4652      	mov	r2, sl
 8005878:	4631      	mov	r1, r6
 800587a:	4628      	mov	r0, r5
 800587c:	47b8      	blx	r7
 800587e:	3001      	adds	r0, #1
 8005880:	f43f aef7 	beq.w	8005672 <_printf_float+0xc2>
 8005884:	f109 0901 	add.w	r9, r9, #1
 8005888:	e7ee      	b.n	8005868 <_printf_float+0x2b8>
 800588a:	bf00      	nop
 800588c:	7fefffff 	.word	0x7fefffff
 8005890:	080083d8 	.word	0x080083d8
 8005894:	080083dc 	.word	0x080083dc
 8005898:	080083e4 	.word	0x080083e4
 800589c:	080083e0 	.word	0x080083e0
 80058a0:	080083e8 	.word	0x080083e8
 80058a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058a8:	429a      	cmp	r2, r3
 80058aa:	bfa8      	it	ge
 80058ac:	461a      	movge	r2, r3
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	4691      	mov	r9, r2
 80058b2:	dc37      	bgt.n	8005924 <_printf_float+0x374>
 80058b4:	f04f 0b00 	mov.w	fp, #0
 80058b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058bc:	f104 021a 	add.w	r2, r4, #26
 80058c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058c2:	9305      	str	r3, [sp, #20]
 80058c4:	eba3 0309 	sub.w	r3, r3, r9
 80058c8:	455b      	cmp	r3, fp
 80058ca:	dc33      	bgt.n	8005934 <_printf_float+0x384>
 80058cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058d0:	429a      	cmp	r2, r3
 80058d2:	db3b      	blt.n	800594c <_printf_float+0x39c>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	07da      	lsls	r2, r3, #31
 80058d8:	d438      	bmi.n	800594c <_printf_float+0x39c>
 80058da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058dc:	9a05      	ldr	r2, [sp, #20]
 80058de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058e0:	1a9a      	subs	r2, r3, r2
 80058e2:	eba3 0901 	sub.w	r9, r3, r1
 80058e6:	4591      	cmp	r9, r2
 80058e8:	bfa8      	it	ge
 80058ea:	4691      	movge	r9, r2
 80058ec:	f1b9 0f00 	cmp.w	r9, #0
 80058f0:	dc35      	bgt.n	800595e <_printf_float+0x3ae>
 80058f2:	f04f 0800 	mov.w	r8, #0
 80058f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058fa:	f104 0a1a 	add.w	sl, r4, #26
 80058fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	eba3 0309 	sub.w	r3, r3, r9
 8005908:	4543      	cmp	r3, r8
 800590a:	f77f af79 	ble.w	8005800 <_printf_float+0x250>
 800590e:	2301      	movs	r3, #1
 8005910:	4652      	mov	r2, sl
 8005912:	4631      	mov	r1, r6
 8005914:	4628      	mov	r0, r5
 8005916:	47b8      	blx	r7
 8005918:	3001      	adds	r0, #1
 800591a:	f43f aeaa 	beq.w	8005672 <_printf_float+0xc2>
 800591e:	f108 0801 	add.w	r8, r8, #1
 8005922:	e7ec      	b.n	80058fe <_printf_float+0x34e>
 8005924:	4613      	mov	r3, r2
 8005926:	4631      	mov	r1, r6
 8005928:	4642      	mov	r2, r8
 800592a:	4628      	mov	r0, r5
 800592c:	47b8      	blx	r7
 800592e:	3001      	adds	r0, #1
 8005930:	d1c0      	bne.n	80058b4 <_printf_float+0x304>
 8005932:	e69e      	b.n	8005672 <_printf_float+0xc2>
 8005934:	2301      	movs	r3, #1
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	9205      	str	r2, [sp, #20]
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f ae97 	beq.w	8005672 <_printf_float+0xc2>
 8005944:	9a05      	ldr	r2, [sp, #20]
 8005946:	f10b 0b01 	add.w	fp, fp, #1
 800594a:	e7b9      	b.n	80058c0 <_printf_float+0x310>
 800594c:	ee18 3a10 	vmov	r3, s16
 8005950:	4652      	mov	r2, sl
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	d1be      	bne.n	80058da <_printf_float+0x32a>
 800595c:	e689      	b.n	8005672 <_printf_float+0xc2>
 800595e:	9a05      	ldr	r2, [sp, #20]
 8005960:	464b      	mov	r3, r9
 8005962:	4442      	add	r2, r8
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	47b8      	blx	r7
 800596a:	3001      	adds	r0, #1
 800596c:	d1c1      	bne.n	80058f2 <_printf_float+0x342>
 800596e:	e680      	b.n	8005672 <_printf_float+0xc2>
 8005970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005972:	2a01      	cmp	r2, #1
 8005974:	dc01      	bgt.n	800597a <_printf_float+0x3ca>
 8005976:	07db      	lsls	r3, r3, #31
 8005978:	d538      	bpl.n	80059ec <_printf_float+0x43c>
 800597a:	2301      	movs	r3, #1
 800597c:	4642      	mov	r2, r8
 800597e:	4631      	mov	r1, r6
 8005980:	4628      	mov	r0, r5
 8005982:	47b8      	blx	r7
 8005984:	3001      	adds	r0, #1
 8005986:	f43f ae74 	beq.w	8005672 <_printf_float+0xc2>
 800598a:	ee18 3a10 	vmov	r3, s16
 800598e:	4652      	mov	r2, sl
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f ae6b 	beq.w	8005672 <_printf_float+0xc2>
 800599c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059a0:	2200      	movs	r2, #0
 80059a2:	2300      	movs	r3, #0
 80059a4:	f7fb f8b0 	bl	8000b08 <__aeabi_dcmpeq>
 80059a8:	b9d8      	cbnz	r0, 80059e2 <_printf_float+0x432>
 80059aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ac:	f108 0201 	add.w	r2, r8, #1
 80059b0:	3b01      	subs	r3, #1
 80059b2:	4631      	mov	r1, r6
 80059b4:	4628      	mov	r0, r5
 80059b6:	47b8      	blx	r7
 80059b8:	3001      	adds	r0, #1
 80059ba:	d10e      	bne.n	80059da <_printf_float+0x42a>
 80059bc:	e659      	b.n	8005672 <_printf_float+0xc2>
 80059be:	2301      	movs	r3, #1
 80059c0:	4652      	mov	r2, sl
 80059c2:	4631      	mov	r1, r6
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b8      	blx	r7
 80059c8:	3001      	adds	r0, #1
 80059ca:	f43f ae52 	beq.w	8005672 <_printf_float+0xc2>
 80059ce:	f108 0801 	add.w	r8, r8, #1
 80059d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d4:	3b01      	subs	r3, #1
 80059d6:	4543      	cmp	r3, r8
 80059d8:	dcf1      	bgt.n	80059be <_printf_float+0x40e>
 80059da:	464b      	mov	r3, r9
 80059dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059e0:	e6dc      	b.n	800579c <_printf_float+0x1ec>
 80059e2:	f04f 0800 	mov.w	r8, #0
 80059e6:	f104 0a1a 	add.w	sl, r4, #26
 80059ea:	e7f2      	b.n	80059d2 <_printf_float+0x422>
 80059ec:	2301      	movs	r3, #1
 80059ee:	4642      	mov	r2, r8
 80059f0:	e7df      	b.n	80059b2 <_printf_float+0x402>
 80059f2:	2301      	movs	r3, #1
 80059f4:	464a      	mov	r2, r9
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	f43f ae38 	beq.w	8005672 <_printf_float+0xc2>
 8005a02:	f108 0801 	add.w	r8, r8, #1
 8005a06:	68e3      	ldr	r3, [r4, #12]
 8005a08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a0a:	1a5b      	subs	r3, r3, r1
 8005a0c:	4543      	cmp	r3, r8
 8005a0e:	dcf0      	bgt.n	80059f2 <_printf_float+0x442>
 8005a10:	e6fa      	b.n	8005808 <_printf_float+0x258>
 8005a12:	f04f 0800 	mov.w	r8, #0
 8005a16:	f104 0919 	add.w	r9, r4, #25
 8005a1a:	e7f4      	b.n	8005a06 <_printf_float+0x456>

08005a1c <_printf_common>:
 8005a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	4616      	mov	r6, r2
 8005a22:	4699      	mov	r9, r3
 8005a24:	688a      	ldr	r2, [r1, #8]
 8005a26:	690b      	ldr	r3, [r1, #16]
 8005a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	bfb8      	it	lt
 8005a30:	4613      	movlt	r3, r2
 8005a32:	6033      	str	r3, [r6, #0]
 8005a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a38:	4607      	mov	r7, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	b10a      	cbz	r2, 8005a42 <_printf_common+0x26>
 8005a3e:	3301      	adds	r3, #1
 8005a40:	6033      	str	r3, [r6, #0]
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	0699      	lsls	r1, r3, #26
 8005a46:	bf42      	ittt	mi
 8005a48:	6833      	ldrmi	r3, [r6, #0]
 8005a4a:	3302      	addmi	r3, #2
 8005a4c:	6033      	strmi	r3, [r6, #0]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	f015 0506 	ands.w	r5, r5, #6
 8005a54:	d106      	bne.n	8005a64 <_printf_common+0x48>
 8005a56:	f104 0a19 	add.w	sl, r4, #25
 8005a5a:	68e3      	ldr	r3, [r4, #12]
 8005a5c:	6832      	ldr	r2, [r6, #0]
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	dc26      	bgt.n	8005ab2 <_printf_common+0x96>
 8005a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a68:	1e13      	subs	r3, r2, #0
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	bf18      	it	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	0692      	lsls	r2, r2, #26
 8005a72:	d42b      	bmi.n	8005acc <_printf_common+0xb0>
 8005a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c0      	blx	r8
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d01e      	beq.n	8005ac0 <_printf_common+0xa4>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	68e5      	ldr	r5, [r4, #12]
 8005a86:	6832      	ldr	r2, [r6, #0]
 8005a88:	f003 0306 	and.w	r3, r3, #6
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	bf08      	it	eq
 8005a90:	1aad      	subeq	r5, r5, r2
 8005a92:	68a3      	ldr	r3, [r4, #8]
 8005a94:	6922      	ldr	r2, [r4, #16]
 8005a96:	bf0c      	ite	eq
 8005a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a9c:	2500      	movne	r5, #0
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	bfc4      	itt	gt
 8005aa2:	1a9b      	subgt	r3, r3, r2
 8005aa4:	18ed      	addgt	r5, r5, r3
 8005aa6:	2600      	movs	r6, #0
 8005aa8:	341a      	adds	r4, #26
 8005aaa:	42b5      	cmp	r5, r6
 8005aac:	d11a      	bne.n	8005ae4 <_printf_common+0xc8>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e008      	b.n	8005ac4 <_printf_common+0xa8>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4652      	mov	r2, sl
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	4638      	mov	r0, r7
 8005aba:	47c0      	blx	r8
 8005abc:	3001      	adds	r0, #1
 8005abe:	d103      	bne.n	8005ac8 <_printf_common+0xac>
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	3501      	adds	r5, #1
 8005aca:	e7c6      	b.n	8005a5a <_printf_common+0x3e>
 8005acc:	18e1      	adds	r1, r4, r3
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	2030      	movs	r0, #48	; 0x30
 8005ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ad6:	4422      	add	r2, r4
 8005ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	e7c7      	b.n	8005a74 <_printf_common+0x58>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4649      	mov	r1, r9
 8005aea:	4638      	mov	r0, r7
 8005aec:	47c0      	blx	r8
 8005aee:	3001      	adds	r0, #1
 8005af0:	d0e6      	beq.n	8005ac0 <_printf_common+0xa4>
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7d9      	b.n	8005aaa <_printf_common+0x8e>
	...

08005af8 <_printf_i>:
 8005af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005afc:	7e0f      	ldrb	r7, [r1, #24]
 8005afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b00:	2f78      	cmp	r7, #120	; 0x78
 8005b02:	4691      	mov	r9, r2
 8005b04:	4680      	mov	r8, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b0e:	d807      	bhi.n	8005b20 <_printf_i+0x28>
 8005b10:	2f62      	cmp	r7, #98	; 0x62
 8005b12:	d80a      	bhi.n	8005b2a <_printf_i+0x32>
 8005b14:	2f00      	cmp	r7, #0
 8005b16:	f000 80d8 	beq.w	8005cca <_printf_i+0x1d2>
 8005b1a:	2f58      	cmp	r7, #88	; 0x58
 8005b1c:	f000 80a3 	beq.w	8005c66 <_printf_i+0x16e>
 8005b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b28:	e03a      	b.n	8005ba0 <_printf_i+0xa8>
 8005b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b2e:	2b15      	cmp	r3, #21
 8005b30:	d8f6      	bhi.n	8005b20 <_printf_i+0x28>
 8005b32:	a101      	add	r1, pc, #4	; (adr r1, 8005b38 <_printf_i+0x40>)
 8005b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b38:	08005b91 	.word	0x08005b91
 8005b3c:	08005ba5 	.word	0x08005ba5
 8005b40:	08005b21 	.word	0x08005b21
 8005b44:	08005b21 	.word	0x08005b21
 8005b48:	08005b21 	.word	0x08005b21
 8005b4c:	08005b21 	.word	0x08005b21
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005b21 	.word	0x08005b21
 8005b58:	08005b21 	.word	0x08005b21
 8005b5c:	08005b21 	.word	0x08005b21
 8005b60:	08005b21 	.word	0x08005b21
 8005b64:	08005cb1 	.word	0x08005cb1
 8005b68:	08005bd5 	.word	0x08005bd5
 8005b6c:	08005c93 	.word	0x08005c93
 8005b70:	08005b21 	.word	0x08005b21
 8005b74:	08005b21 	.word	0x08005b21
 8005b78:	08005cd3 	.word	0x08005cd3
 8005b7c:	08005b21 	.word	0x08005b21
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005b21 	.word	0x08005b21
 8005b88:	08005b21 	.word	0x08005b21
 8005b8c:	08005c9b 	.word	0x08005c9b
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	1d1a      	adds	r2, r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	602a      	str	r2, [r5, #0]
 8005b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0a3      	b.n	8005cec <_printf_i+0x1f4>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	6829      	ldr	r1, [r5, #0]
 8005ba8:	0606      	lsls	r6, r0, #24
 8005baa:	f101 0304 	add.w	r3, r1, #4
 8005bae:	d50a      	bpl.n	8005bc6 <_printf_i+0xce>
 8005bb0:	680e      	ldr	r6, [r1, #0]
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	2e00      	cmp	r6, #0
 8005bb6:	da03      	bge.n	8005bc0 <_printf_i+0xc8>
 8005bb8:	232d      	movs	r3, #45	; 0x2d
 8005bba:	4276      	negs	r6, r6
 8005bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc0:	485e      	ldr	r0, [pc, #376]	; (8005d3c <_printf_i+0x244>)
 8005bc2:	230a      	movs	r3, #10
 8005bc4:	e019      	b.n	8005bfa <_printf_i+0x102>
 8005bc6:	680e      	ldr	r6, [r1, #0]
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bce:	bf18      	it	ne
 8005bd0:	b236      	sxthne	r6, r6
 8005bd2:	e7ef      	b.n	8005bb4 <_printf_i+0xbc>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	6820      	ldr	r0, [r4, #0]
 8005bd8:	1d19      	adds	r1, r3, #4
 8005bda:	6029      	str	r1, [r5, #0]
 8005bdc:	0601      	lsls	r1, r0, #24
 8005bde:	d501      	bpl.n	8005be4 <_printf_i+0xec>
 8005be0:	681e      	ldr	r6, [r3, #0]
 8005be2:	e002      	b.n	8005bea <_printf_i+0xf2>
 8005be4:	0646      	lsls	r6, r0, #25
 8005be6:	d5fb      	bpl.n	8005be0 <_printf_i+0xe8>
 8005be8:	881e      	ldrh	r6, [r3, #0]
 8005bea:	4854      	ldr	r0, [pc, #336]	; (8005d3c <_printf_i+0x244>)
 8005bec:	2f6f      	cmp	r7, #111	; 0x6f
 8005bee:	bf0c      	ite	eq
 8005bf0:	2308      	moveq	r3, #8
 8005bf2:	230a      	movne	r3, #10
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bfa:	6865      	ldr	r5, [r4, #4]
 8005bfc:	60a5      	str	r5, [r4, #8]
 8005bfe:	2d00      	cmp	r5, #0
 8005c00:	bfa2      	ittt	ge
 8005c02:	6821      	ldrge	r1, [r4, #0]
 8005c04:	f021 0104 	bicge.w	r1, r1, #4
 8005c08:	6021      	strge	r1, [r4, #0]
 8005c0a:	b90e      	cbnz	r6, 8005c10 <_printf_i+0x118>
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	d04d      	beq.n	8005cac <_printf_i+0x1b4>
 8005c10:	4615      	mov	r5, r2
 8005c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c16:	fb03 6711 	mls	r7, r3, r1, r6
 8005c1a:	5dc7      	ldrb	r7, [r0, r7]
 8005c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c20:	4637      	mov	r7, r6
 8005c22:	42bb      	cmp	r3, r7
 8005c24:	460e      	mov	r6, r1
 8005c26:	d9f4      	bls.n	8005c12 <_printf_i+0x11a>
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d10b      	bne.n	8005c44 <_printf_i+0x14c>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	07de      	lsls	r6, r3, #31
 8005c30:	d508      	bpl.n	8005c44 <_printf_i+0x14c>
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	6861      	ldr	r1, [r4, #4]
 8005c36:	4299      	cmp	r1, r3
 8005c38:	bfde      	ittt	le
 8005c3a:	2330      	movle	r3, #48	; 0x30
 8005c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c44:	1b52      	subs	r2, r2, r5
 8005c46:	6122      	str	r2, [r4, #16]
 8005c48:	f8cd a000 	str.w	sl, [sp]
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	aa03      	add	r2, sp, #12
 8005c50:	4621      	mov	r1, r4
 8005c52:	4640      	mov	r0, r8
 8005c54:	f7ff fee2 	bl	8005a1c <_printf_common>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d14c      	bne.n	8005cf6 <_printf_i+0x1fe>
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c60:	b004      	add	sp, #16
 8005c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c66:	4835      	ldr	r0, [pc, #212]	; (8005d3c <_printf_i+0x244>)
 8005c68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c6c:	6829      	ldr	r1, [r5, #0]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c74:	6029      	str	r1, [r5, #0]
 8005c76:	061d      	lsls	r5, r3, #24
 8005c78:	d514      	bpl.n	8005ca4 <_printf_i+0x1ac>
 8005c7a:	07df      	lsls	r7, r3, #31
 8005c7c:	bf44      	itt	mi
 8005c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c82:	6023      	strmi	r3, [r4, #0]
 8005c84:	b91e      	cbnz	r6, 8005c8e <_printf_i+0x196>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f023 0320 	bic.w	r3, r3, #32
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	2310      	movs	r3, #16
 8005c90:	e7b0      	b.n	8005bf4 <_printf_i+0xfc>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	f043 0320 	orr.w	r3, r3, #32
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	2378      	movs	r3, #120	; 0x78
 8005c9c:	4828      	ldr	r0, [pc, #160]	; (8005d40 <_printf_i+0x248>)
 8005c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ca2:	e7e3      	b.n	8005c6c <_printf_i+0x174>
 8005ca4:	0659      	lsls	r1, r3, #25
 8005ca6:	bf48      	it	mi
 8005ca8:	b2b6      	uxthmi	r6, r6
 8005caa:	e7e6      	b.n	8005c7a <_printf_i+0x182>
 8005cac:	4615      	mov	r5, r2
 8005cae:	e7bb      	b.n	8005c28 <_printf_i+0x130>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	6826      	ldr	r6, [r4, #0]
 8005cb4:	6961      	ldr	r1, [r4, #20]
 8005cb6:	1d18      	adds	r0, r3, #4
 8005cb8:	6028      	str	r0, [r5, #0]
 8005cba:	0635      	lsls	r5, r6, #24
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	d501      	bpl.n	8005cc4 <_printf_i+0x1cc>
 8005cc0:	6019      	str	r1, [r3, #0]
 8005cc2:	e002      	b.n	8005cca <_printf_i+0x1d2>
 8005cc4:	0670      	lsls	r0, r6, #25
 8005cc6:	d5fb      	bpl.n	8005cc0 <_printf_i+0x1c8>
 8005cc8:	8019      	strh	r1, [r3, #0]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6123      	str	r3, [r4, #16]
 8005cce:	4615      	mov	r5, r2
 8005cd0:	e7ba      	b.n	8005c48 <_printf_i+0x150>
 8005cd2:	682b      	ldr	r3, [r5, #0]
 8005cd4:	1d1a      	adds	r2, r3, #4
 8005cd6:	602a      	str	r2, [r5, #0]
 8005cd8:	681d      	ldr	r5, [r3, #0]
 8005cda:	6862      	ldr	r2, [r4, #4]
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f7fa fa9e 	bl	8000220 <memchr>
 8005ce4:	b108      	cbz	r0, 8005cea <_printf_i+0x1f2>
 8005ce6:	1b40      	subs	r0, r0, r5
 8005ce8:	6060      	str	r0, [r4, #4]
 8005cea:	6863      	ldr	r3, [r4, #4]
 8005cec:	6123      	str	r3, [r4, #16]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf4:	e7a8      	b.n	8005c48 <_printf_i+0x150>
 8005cf6:	6923      	ldr	r3, [r4, #16]
 8005cf8:	462a      	mov	r2, r5
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	47d0      	blx	sl
 8005d00:	3001      	adds	r0, #1
 8005d02:	d0ab      	beq.n	8005c5c <_printf_i+0x164>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	079b      	lsls	r3, r3, #30
 8005d08:	d413      	bmi.n	8005d32 <_printf_i+0x23a>
 8005d0a:	68e0      	ldr	r0, [r4, #12]
 8005d0c:	9b03      	ldr	r3, [sp, #12]
 8005d0e:	4298      	cmp	r0, r3
 8005d10:	bfb8      	it	lt
 8005d12:	4618      	movlt	r0, r3
 8005d14:	e7a4      	b.n	8005c60 <_printf_i+0x168>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4632      	mov	r2, r6
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	47d0      	blx	sl
 8005d20:	3001      	adds	r0, #1
 8005d22:	d09b      	beq.n	8005c5c <_printf_i+0x164>
 8005d24:	3501      	adds	r5, #1
 8005d26:	68e3      	ldr	r3, [r4, #12]
 8005d28:	9903      	ldr	r1, [sp, #12]
 8005d2a:	1a5b      	subs	r3, r3, r1
 8005d2c:	42ab      	cmp	r3, r5
 8005d2e:	dcf2      	bgt.n	8005d16 <_printf_i+0x21e>
 8005d30:	e7eb      	b.n	8005d0a <_printf_i+0x212>
 8005d32:	2500      	movs	r5, #0
 8005d34:	f104 0619 	add.w	r6, r4, #25
 8005d38:	e7f5      	b.n	8005d26 <_printf_i+0x22e>
 8005d3a:	bf00      	nop
 8005d3c:	080083ea 	.word	0x080083ea
 8005d40:	080083fb 	.word	0x080083fb

08005d44 <iprintf>:
 8005d44:	b40f      	push	{r0, r1, r2, r3}
 8005d46:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <iprintf+0x2c>)
 8005d48:	b513      	push	{r0, r1, r4, lr}
 8005d4a:	681c      	ldr	r4, [r3, #0]
 8005d4c:	b124      	cbz	r4, 8005d58 <iprintf+0x14>
 8005d4e:	69a3      	ldr	r3, [r4, #24]
 8005d50:	b913      	cbnz	r3, 8005d58 <iprintf+0x14>
 8005d52:	4620      	mov	r0, r4
 8005d54:	f001 f8f8 	bl	8006f48 <__sinit>
 8005d58:	ab05      	add	r3, sp, #20
 8005d5a:	9a04      	ldr	r2, [sp, #16]
 8005d5c:	68a1      	ldr	r1, [r4, #8]
 8005d5e:	9301      	str	r3, [sp, #4]
 8005d60:	4620      	mov	r0, r4
 8005d62:	f002 f803 	bl	8007d6c <_vfiprintf_r>
 8005d66:	b002      	add	sp, #8
 8005d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d6c:	b004      	add	sp, #16
 8005d6e:	4770      	bx	lr
 8005d70:	2000000c 	.word	0x2000000c

08005d74 <_puts_r>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	460e      	mov	r6, r1
 8005d78:	4605      	mov	r5, r0
 8005d7a:	b118      	cbz	r0, 8005d84 <_puts_r+0x10>
 8005d7c:	6983      	ldr	r3, [r0, #24]
 8005d7e:	b90b      	cbnz	r3, 8005d84 <_puts_r+0x10>
 8005d80:	f001 f8e2 	bl	8006f48 <__sinit>
 8005d84:	69ab      	ldr	r3, [r5, #24]
 8005d86:	68ac      	ldr	r4, [r5, #8]
 8005d88:	b913      	cbnz	r3, 8005d90 <_puts_r+0x1c>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f001 f8dc 	bl	8006f48 <__sinit>
 8005d90:	4b2c      	ldr	r3, [pc, #176]	; (8005e44 <_puts_r+0xd0>)
 8005d92:	429c      	cmp	r4, r3
 8005d94:	d120      	bne.n	8005dd8 <_puts_r+0x64>
 8005d96:	686c      	ldr	r4, [r5, #4]
 8005d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d9a:	07db      	lsls	r3, r3, #31
 8005d9c:	d405      	bmi.n	8005daa <_puts_r+0x36>
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	0598      	lsls	r0, r3, #22
 8005da2:	d402      	bmi.n	8005daa <_puts_r+0x36>
 8005da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005da6:	f001 f972 	bl	800708e <__retarget_lock_acquire_recursive>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	0719      	lsls	r1, r3, #28
 8005dae:	d51d      	bpl.n	8005dec <_puts_r+0x78>
 8005db0:	6923      	ldr	r3, [r4, #16]
 8005db2:	b1db      	cbz	r3, 8005dec <_puts_r+0x78>
 8005db4:	3e01      	subs	r6, #1
 8005db6:	68a3      	ldr	r3, [r4, #8]
 8005db8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	60a3      	str	r3, [r4, #8]
 8005dc0:	bb39      	cbnz	r1, 8005e12 <_puts_r+0x9e>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da38      	bge.n	8005e38 <_puts_r+0xc4>
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	210a      	movs	r1, #10
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f868 	bl	8005ea0 <__swbuf_r>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d011      	beq.n	8005df8 <_puts_r+0x84>
 8005dd4:	250a      	movs	r5, #10
 8005dd6:	e011      	b.n	8005dfc <_puts_r+0x88>
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <_puts_r+0xd4>)
 8005dda:	429c      	cmp	r4, r3
 8005ddc:	d101      	bne.n	8005de2 <_puts_r+0x6e>
 8005dde:	68ac      	ldr	r4, [r5, #8]
 8005de0:	e7da      	b.n	8005d98 <_puts_r+0x24>
 8005de2:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <_puts_r+0xd8>)
 8005de4:	429c      	cmp	r4, r3
 8005de6:	bf08      	it	eq
 8005de8:	68ec      	ldreq	r4, [r5, #12]
 8005dea:	e7d5      	b.n	8005d98 <_puts_r+0x24>
 8005dec:	4621      	mov	r1, r4
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 f8a8 	bl	8005f44 <__swsetup_r>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d0dd      	beq.n	8005db4 <_puts_r+0x40>
 8005df8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dfe:	07da      	lsls	r2, r3, #31
 8005e00:	d405      	bmi.n	8005e0e <_puts_r+0x9a>
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	059b      	lsls	r3, r3, #22
 8005e06:	d402      	bmi.n	8005e0e <_puts_r+0x9a>
 8005e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e0a:	f001 f941 	bl	8007090 <__retarget_lock_release_recursive>
 8005e0e:	4628      	mov	r0, r5
 8005e10:	bd70      	pop	{r4, r5, r6, pc}
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da04      	bge.n	8005e20 <_puts_r+0xac>
 8005e16:	69a2      	ldr	r2, [r4, #24]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	dc06      	bgt.n	8005e2a <_puts_r+0xb6>
 8005e1c:	290a      	cmp	r1, #10
 8005e1e:	d004      	beq.n	8005e2a <_puts_r+0xb6>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	6022      	str	r2, [r4, #0]
 8005e26:	7019      	strb	r1, [r3, #0]
 8005e28:	e7c5      	b.n	8005db6 <_puts_r+0x42>
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f000 f837 	bl	8005ea0 <__swbuf_r>
 8005e32:	3001      	adds	r0, #1
 8005e34:	d1bf      	bne.n	8005db6 <_puts_r+0x42>
 8005e36:	e7df      	b.n	8005df8 <_puts_r+0x84>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	250a      	movs	r5, #10
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	6022      	str	r2, [r4, #0]
 8005e40:	701d      	strb	r5, [r3, #0]
 8005e42:	e7db      	b.n	8005dfc <_puts_r+0x88>
 8005e44:	080084bc 	.word	0x080084bc
 8005e48:	080084dc 	.word	0x080084dc
 8005e4c:	0800849c 	.word	0x0800849c

08005e50 <puts>:
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <puts+0xc>)
 8005e52:	4601      	mov	r1, r0
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	f7ff bf8d 	b.w	8005d74 <_puts_r>
 8005e5a:	bf00      	nop
 8005e5c:	2000000c 	.word	0x2000000c

08005e60 <siprintf>:
 8005e60:	b40e      	push	{r1, r2, r3}
 8005e62:	b500      	push	{lr}
 8005e64:	b09c      	sub	sp, #112	; 0x70
 8005e66:	ab1d      	add	r3, sp, #116	; 0x74
 8005e68:	9002      	str	r0, [sp, #8]
 8005e6a:	9006      	str	r0, [sp, #24]
 8005e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e70:	4809      	ldr	r0, [pc, #36]	; (8005e98 <siprintf+0x38>)
 8005e72:	9107      	str	r1, [sp, #28]
 8005e74:	9104      	str	r1, [sp, #16]
 8005e76:	4909      	ldr	r1, [pc, #36]	; (8005e9c <siprintf+0x3c>)
 8005e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e7c:	9105      	str	r1, [sp, #20]
 8005e7e:	6800      	ldr	r0, [r0, #0]
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	a902      	add	r1, sp, #8
 8005e84:	f001 fe48 	bl	8007b18 <_svfiprintf_r>
 8005e88:	9b02      	ldr	r3, [sp, #8]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	b01c      	add	sp, #112	; 0x70
 8005e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e94:	b003      	add	sp, #12
 8005e96:	4770      	bx	lr
 8005e98:	2000000c 	.word	0x2000000c
 8005e9c:	ffff0208 	.word	0xffff0208

08005ea0 <__swbuf_r>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	460e      	mov	r6, r1
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	b118      	cbz	r0, 8005eb2 <__swbuf_r+0x12>
 8005eaa:	6983      	ldr	r3, [r0, #24]
 8005eac:	b90b      	cbnz	r3, 8005eb2 <__swbuf_r+0x12>
 8005eae:	f001 f84b 	bl	8006f48 <__sinit>
 8005eb2:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <__swbuf_r+0x98>)
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	d12b      	bne.n	8005f10 <__swbuf_r+0x70>
 8005eb8:	686c      	ldr	r4, [r5, #4]
 8005eba:	69a3      	ldr	r3, [r4, #24]
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	071a      	lsls	r2, r3, #28
 8005ec2:	d52f      	bpl.n	8005f24 <__swbuf_r+0x84>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	b36b      	cbz	r3, 8005f24 <__swbuf_r+0x84>
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	6820      	ldr	r0, [r4, #0]
 8005ecc:	1ac0      	subs	r0, r0, r3
 8005ece:	6963      	ldr	r3, [r4, #20]
 8005ed0:	b2f6      	uxtb	r6, r6
 8005ed2:	4283      	cmp	r3, r0
 8005ed4:	4637      	mov	r7, r6
 8005ed6:	dc04      	bgt.n	8005ee2 <__swbuf_r+0x42>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	f000 ffa0 	bl	8006e20 <_fflush_r>
 8005ee0:	bb30      	cbnz	r0, 8005f30 <__swbuf_r+0x90>
 8005ee2:	68a3      	ldr	r3, [r4, #8]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	60a3      	str	r3, [r4, #8]
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	6022      	str	r2, [r4, #0]
 8005eee:	701e      	strb	r6, [r3, #0]
 8005ef0:	6963      	ldr	r3, [r4, #20]
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	4283      	cmp	r3, r0
 8005ef6:	d004      	beq.n	8005f02 <__swbuf_r+0x62>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	07db      	lsls	r3, r3, #31
 8005efc:	d506      	bpl.n	8005f0c <__swbuf_r+0x6c>
 8005efe:	2e0a      	cmp	r6, #10
 8005f00:	d104      	bne.n	8005f0c <__swbuf_r+0x6c>
 8005f02:	4621      	mov	r1, r4
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 ff8b 	bl	8006e20 <_fflush_r>
 8005f0a:	b988      	cbnz	r0, 8005f30 <__swbuf_r+0x90>
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <__swbuf_r+0x9c>)
 8005f12:	429c      	cmp	r4, r3
 8005f14:	d101      	bne.n	8005f1a <__swbuf_r+0x7a>
 8005f16:	68ac      	ldr	r4, [r5, #8]
 8005f18:	e7cf      	b.n	8005eba <__swbuf_r+0x1a>
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <__swbuf_r+0xa0>)
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	bf08      	it	eq
 8005f20:	68ec      	ldreq	r4, [r5, #12]
 8005f22:	e7ca      	b.n	8005eba <__swbuf_r+0x1a>
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f80c 	bl	8005f44 <__swsetup_r>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d0cb      	beq.n	8005ec8 <__swbuf_r+0x28>
 8005f30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f34:	e7ea      	b.n	8005f0c <__swbuf_r+0x6c>
 8005f36:	bf00      	nop
 8005f38:	080084bc 	.word	0x080084bc
 8005f3c:	080084dc 	.word	0x080084dc
 8005f40:	0800849c 	.word	0x0800849c

08005f44 <__swsetup_r>:
 8005f44:	4b32      	ldr	r3, [pc, #200]	; (8006010 <__swsetup_r+0xcc>)
 8005f46:	b570      	push	{r4, r5, r6, lr}
 8005f48:	681d      	ldr	r5, [r3, #0]
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	b125      	cbz	r5, 8005f5a <__swsetup_r+0x16>
 8005f50:	69ab      	ldr	r3, [r5, #24]
 8005f52:	b913      	cbnz	r3, 8005f5a <__swsetup_r+0x16>
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 fff7 	bl	8006f48 <__sinit>
 8005f5a:	4b2e      	ldr	r3, [pc, #184]	; (8006014 <__swsetup_r+0xd0>)
 8005f5c:	429c      	cmp	r4, r3
 8005f5e:	d10f      	bne.n	8005f80 <__swsetup_r+0x3c>
 8005f60:	686c      	ldr	r4, [r5, #4]
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f68:	0719      	lsls	r1, r3, #28
 8005f6a:	d42c      	bmi.n	8005fc6 <__swsetup_r+0x82>
 8005f6c:	06dd      	lsls	r5, r3, #27
 8005f6e:	d411      	bmi.n	8005f94 <__swsetup_r+0x50>
 8005f70:	2309      	movs	r3, #9
 8005f72:	6033      	str	r3, [r6, #0]
 8005f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f7e:	e03e      	b.n	8005ffe <__swsetup_r+0xba>
 8005f80:	4b25      	ldr	r3, [pc, #148]	; (8006018 <__swsetup_r+0xd4>)
 8005f82:	429c      	cmp	r4, r3
 8005f84:	d101      	bne.n	8005f8a <__swsetup_r+0x46>
 8005f86:	68ac      	ldr	r4, [r5, #8]
 8005f88:	e7eb      	b.n	8005f62 <__swsetup_r+0x1e>
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <__swsetup_r+0xd8>)
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	bf08      	it	eq
 8005f90:	68ec      	ldreq	r4, [r5, #12]
 8005f92:	e7e6      	b.n	8005f62 <__swsetup_r+0x1e>
 8005f94:	0758      	lsls	r0, r3, #29
 8005f96:	d512      	bpl.n	8005fbe <__swsetup_r+0x7a>
 8005f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f9a:	b141      	cbz	r1, 8005fae <__swsetup_r+0x6a>
 8005f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	d002      	beq.n	8005faa <__swsetup_r+0x66>
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f001 fc7b 	bl	80078a0 <_free_r>
 8005faa:	2300      	movs	r3, #0
 8005fac:	6363      	str	r3, [r4, #52]	; 0x34
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fb4:	81a3      	strh	r3, [r4, #12]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6063      	str	r3, [r4, #4]
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f043 0308 	orr.w	r3, r3, #8
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	6923      	ldr	r3, [r4, #16]
 8005fc8:	b94b      	cbnz	r3, 8005fde <__swsetup_r+0x9a>
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd4:	d003      	beq.n	8005fde <__swsetup_r+0x9a>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f001 f87f 	bl	80070dc <__smakebuf_r>
 8005fde:	89a0      	ldrh	r0, [r4, #12]
 8005fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fe4:	f010 0301 	ands.w	r3, r0, #1
 8005fe8:	d00a      	beq.n	8006000 <__swsetup_r+0xbc>
 8005fea:	2300      	movs	r3, #0
 8005fec:	60a3      	str	r3, [r4, #8]
 8005fee:	6963      	ldr	r3, [r4, #20]
 8005ff0:	425b      	negs	r3, r3
 8005ff2:	61a3      	str	r3, [r4, #24]
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	b943      	cbnz	r3, 800600a <__swsetup_r+0xc6>
 8005ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ffc:	d1ba      	bne.n	8005f74 <__swsetup_r+0x30>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	0781      	lsls	r1, r0, #30
 8006002:	bf58      	it	pl
 8006004:	6963      	ldrpl	r3, [r4, #20]
 8006006:	60a3      	str	r3, [r4, #8]
 8006008:	e7f4      	b.n	8005ff4 <__swsetup_r+0xb0>
 800600a:	2000      	movs	r0, #0
 800600c:	e7f7      	b.n	8005ffe <__swsetup_r+0xba>
 800600e:	bf00      	nop
 8006010:	2000000c 	.word	0x2000000c
 8006014:	080084bc 	.word	0x080084bc
 8006018:	080084dc 	.word	0x080084dc
 800601c:	0800849c 	.word	0x0800849c

08006020 <quorem>:
 8006020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006024:	6903      	ldr	r3, [r0, #16]
 8006026:	690c      	ldr	r4, [r1, #16]
 8006028:	42a3      	cmp	r3, r4
 800602a:	4607      	mov	r7, r0
 800602c:	f2c0 8081 	blt.w	8006132 <quorem+0x112>
 8006030:	3c01      	subs	r4, #1
 8006032:	f101 0814 	add.w	r8, r1, #20
 8006036:	f100 0514 	add.w	r5, r0, #20
 800603a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006044:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006048:	3301      	adds	r3, #1
 800604a:	429a      	cmp	r2, r3
 800604c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006050:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006054:	fbb2 f6f3 	udiv	r6, r2, r3
 8006058:	d331      	bcc.n	80060be <quorem+0x9e>
 800605a:	f04f 0e00 	mov.w	lr, #0
 800605e:	4640      	mov	r0, r8
 8006060:	46ac      	mov	ip, r5
 8006062:	46f2      	mov	sl, lr
 8006064:	f850 2b04 	ldr.w	r2, [r0], #4
 8006068:	b293      	uxth	r3, r2
 800606a:	fb06 e303 	mla	r3, r6, r3, lr
 800606e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006072:	b29b      	uxth	r3, r3
 8006074:	ebaa 0303 	sub.w	r3, sl, r3
 8006078:	f8dc a000 	ldr.w	sl, [ip]
 800607c:	0c12      	lsrs	r2, r2, #16
 800607e:	fa13 f38a 	uxtah	r3, r3, sl
 8006082:	fb06 e202 	mla	r2, r6, r2, lr
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	9b00      	ldr	r3, [sp, #0]
 800608a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800608e:	b292      	uxth	r2, r2
 8006090:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006094:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006098:	f8bd 3000 	ldrh.w	r3, [sp]
 800609c:	4581      	cmp	r9, r0
 800609e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060a2:	f84c 3b04 	str.w	r3, [ip], #4
 80060a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060aa:	d2db      	bcs.n	8006064 <quorem+0x44>
 80060ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80060b0:	b92b      	cbnz	r3, 80060be <quorem+0x9e>
 80060b2:	9b01      	ldr	r3, [sp, #4]
 80060b4:	3b04      	subs	r3, #4
 80060b6:	429d      	cmp	r5, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	d32e      	bcc.n	800611a <quorem+0xfa>
 80060bc:	613c      	str	r4, [r7, #16]
 80060be:	4638      	mov	r0, r7
 80060c0:	f001 fad6 	bl	8007670 <__mcmp>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	db24      	blt.n	8006112 <quorem+0xf2>
 80060c8:	3601      	adds	r6, #1
 80060ca:	4628      	mov	r0, r5
 80060cc:	f04f 0c00 	mov.w	ip, #0
 80060d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80060d4:	f8d0 e000 	ldr.w	lr, [r0]
 80060d8:	b293      	uxth	r3, r2
 80060da:	ebac 0303 	sub.w	r3, ip, r3
 80060de:	0c12      	lsrs	r2, r2, #16
 80060e0:	fa13 f38e 	uxtah	r3, r3, lr
 80060e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060f2:	45c1      	cmp	r9, r8
 80060f4:	f840 3b04 	str.w	r3, [r0], #4
 80060f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060fc:	d2e8      	bcs.n	80060d0 <quorem+0xb0>
 80060fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006106:	b922      	cbnz	r2, 8006112 <quorem+0xf2>
 8006108:	3b04      	subs	r3, #4
 800610a:	429d      	cmp	r5, r3
 800610c:	461a      	mov	r2, r3
 800610e:	d30a      	bcc.n	8006126 <quorem+0x106>
 8006110:	613c      	str	r4, [r7, #16]
 8006112:	4630      	mov	r0, r6
 8006114:	b003      	add	sp, #12
 8006116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	3b04      	subs	r3, #4
 800611e:	2a00      	cmp	r2, #0
 8006120:	d1cc      	bne.n	80060bc <quorem+0x9c>
 8006122:	3c01      	subs	r4, #1
 8006124:	e7c7      	b.n	80060b6 <quorem+0x96>
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	3b04      	subs	r3, #4
 800612a:	2a00      	cmp	r2, #0
 800612c:	d1f0      	bne.n	8006110 <quorem+0xf0>
 800612e:	3c01      	subs	r4, #1
 8006130:	e7eb      	b.n	800610a <quorem+0xea>
 8006132:	2000      	movs	r0, #0
 8006134:	e7ee      	b.n	8006114 <quorem+0xf4>
	...

08006138 <_dtoa_r>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	ed2d 8b04 	vpush	{d8-d9}
 8006140:	ec57 6b10 	vmov	r6, r7, d0
 8006144:	b093      	sub	sp, #76	; 0x4c
 8006146:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006148:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800614c:	9106      	str	r1, [sp, #24]
 800614e:	ee10 aa10 	vmov	sl, s0
 8006152:	4604      	mov	r4, r0
 8006154:	9209      	str	r2, [sp, #36]	; 0x24
 8006156:	930c      	str	r3, [sp, #48]	; 0x30
 8006158:	46bb      	mov	fp, r7
 800615a:	b975      	cbnz	r5, 800617a <_dtoa_r+0x42>
 800615c:	2010      	movs	r0, #16
 800615e:	f000 fffd 	bl	800715c <malloc>
 8006162:	4602      	mov	r2, r0
 8006164:	6260      	str	r0, [r4, #36]	; 0x24
 8006166:	b920      	cbnz	r0, 8006172 <_dtoa_r+0x3a>
 8006168:	4ba7      	ldr	r3, [pc, #668]	; (8006408 <_dtoa_r+0x2d0>)
 800616a:	21ea      	movs	r1, #234	; 0xea
 800616c:	48a7      	ldr	r0, [pc, #668]	; (800640c <_dtoa_r+0x2d4>)
 800616e:	f001 ff93 	bl	8008098 <__assert_func>
 8006172:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006176:	6005      	str	r5, [r0, #0]
 8006178:	60c5      	str	r5, [r0, #12]
 800617a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800617c:	6819      	ldr	r1, [r3, #0]
 800617e:	b151      	cbz	r1, 8006196 <_dtoa_r+0x5e>
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	604a      	str	r2, [r1, #4]
 8006184:	2301      	movs	r3, #1
 8006186:	4093      	lsls	r3, r2
 8006188:	608b      	str	r3, [r1, #8]
 800618a:	4620      	mov	r0, r4
 800618c:	f001 f82e 	bl	80071ec <_Bfree>
 8006190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	1e3b      	subs	r3, r7, #0
 8006198:	bfaa      	itet	ge
 800619a:	2300      	movge	r3, #0
 800619c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80061a0:	f8c8 3000 	strge.w	r3, [r8]
 80061a4:	4b9a      	ldr	r3, [pc, #616]	; (8006410 <_dtoa_r+0x2d8>)
 80061a6:	bfbc      	itt	lt
 80061a8:	2201      	movlt	r2, #1
 80061aa:	f8c8 2000 	strlt.w	r2, [r8]
 80061ae:	ea33 030b 	bics.w	r3, r3, fp
 80061b2:	d11b      	bne.n	80061ec <_dtoa_r+0xb4>
 80061b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061c0:	4333      	orrs	r3, r6
 80061c2:	f000 8592 	beq.w	8006cea <_dtoa_r+0xbb2>
 80061c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061c8:	b963      	cbnz	r3, 80061e4 <_dtoa_r+0xac>
 80061ca:	4b92      	ldr	r3, [pc, #584]	; (8006414 <_dtoa_r+0x2dc>)
 80061cc:	e022      	b.n	8006214 <_dtoa_r+0xdc>
 80061ce:	4b92      	ldr	r3, [pc, #584]	; (8006418 <_dtoa_r+0x2e0>)
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	3308      	adds	r3, #8
 80061d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	9801      	ldr	r0, [sp, #4]
 80061da:	b013      	add	sp, #76	; 0x4c
 80061dc:	ecbd 8b04 	vpop	{d8-d9}
 80061e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e4:	4b8b      	ldr	r3, [pc, #556]	; (8006414 <_dtoa_r+0x2dc>)
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	3303      	adds	r3, #3
 80061ea:	e7f3      	b.n	80061d4 <_dtoa_r+0x9c>
 80061ec:	2200      	movs	r2, #0
 80061ee:	2300      	movs	r3, #0
 80061f0:	4650      	mov	r0, sl
 80061f2:	4659      	mov	r1, fp
 80061f4:	f7fa fc88 	bl	8000b08 <__aeabi_dcmpeq>
 80061f8:	ec4b ab19 	vmov	d9, sl, fp
 80061fc:	4680      	mov	r8, r0
 80061fe:	b158      	cbz	r0, 8006218 <_dtoa_r+0xe0>
 8006200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006202:	2301      	movs	r3, #1
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 856b 	beq.w	8006ce4 <_dtoa_r+0xbac>
 800620e:	4883      	ldr	r0, [pc, #524]	; (800641c <_dtoa_r+0x2e4>)
 8006210:	6018      	str	r0, [r3, #0]
 8006212:	1e43      	subs	r3, r0, #1
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	e7df      	b.n	80061d8 <_dtoa_r+0xa0>
 8006218:	ec4b ab10 	vmov	d0, sl, fp
 800621c:	aa10      	add	r2, sp, #64	; 0x40
 800621e:	a911      	add	r1, sp, #68	; 0x44
 8006220:	4620      	mov	r0, r4
 8006222:	f001 facb 	bl	80077bc <__d2b>
 8006226:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800622a:	ee08 0a10 	vmov	s16, r0
 800622e:	2d00      	cmp	r5, #0
 8006230:	f000 8084 	beq.w	800633c <_dtoa_r+0x204>
 8006234:	ee19 3a90 	vmov	r3, s19
 8006238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800623c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006240:	4656      	mov	r6, sl
 8006242:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800624a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800624e:	4b74      	ldr	r3, [pc, #464]	; (8006420 <_dtoa_r+0x2e8>)
 8006250:	2200      	movs	r2, #0
 8006252:	4630      	mov	r0, r6
 8006254:	4639      	mov	r1, r7
 8006256:	f7fa f837 	bl	80002c8 <__aeabi_dsub>
 800625a:	a365      	add	r3, pc, #404	; (adr r3, 80063f0 <_dtoa_r+0x2b8>)
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f7fa f9ea 	bl	8000638 <__aeabi_dmul>
 8006264:	a364      	add	r3, pc, #400	; (adr r3, 80063f8 <_dtoa_r+0x2c0>)
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	f7fa f82f 	bl	80002cc <__adddf3>
 800626e:	4606      	mov	r6, r0
 8006270:	4628      	mov	r0, r5
 8006272:	460f      	mov	r7, r1
 8006274:	f7fa f976 	bl	8000564 <__aeabi_i2d>
 8006278:	a361      	add	r3, pc, #388	; (adr r3, 8006400 <_dtoa_r+0x2c8>)
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f7fa f9db 	bl	8000638 <__aeabi_dmul>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4630      	mov	r0, r6
 8006288:	4639      	mov	r1, r7
 800628a:	f7fa f81f 	bl	80002cc <__adddf3>
 800628e:	4606      	mov	r6, r0
 8006290:	460f      	mov	r7, r1
 8006292:	f7fa fc81 	bl	8000b98 <__aeabi_d2iz>
 8006296:	2200      	movs	r2, #0
 8006298:	9000      	str	r0, [sp, #0]
 800629a:	2300      	movs	r3, #0
 800629c:	4630      	mov	r0, r6
 800629e:	4639      	mov	r1, r7
 80062a0:	f7fa fc3c 	bl	8000b1c <__aeabi_dcmplt>
 80062a4:	b150      	cbz	r0, 80062bc <_dtoa_r+0x184>
 80062a6:	9800      	ldr	r0, [sp, #0]
 80062a8:	f7fa f95c 	bl	8000564 <__aeabi_i2d>
 80062ac:	4632      	mov	r2, r6
 80062ae:	463b      	mov	r3, r7
 80062b0:	f7fa fc2a 	bl	8000b08 <__aeabi_dcmpeq>
 80062b4:	b910      	cbnz	r0, 80062bc <_dtoa_r+0x184>
 80062b6:	9b00      	ldr	r3, [sp, #0]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	9b00      	ldr	r3, [sp, #0]
 80062be:	2b16      	cmp	r3, #22
 80062c0:	d85a      	bhi.n	8006378 <_dtoa_r+0x240>
 80062c2:	9a00      	ldr	r2, [sp, #0]
 80062c4:	4b57      	ldr	r3, [pc, #348]	; (8006424 <_dtoa_r+0x2ec>)
 80062c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	ec51 0b19 	vmov	r0, r1, d9
 80062d2:	f7fa fc23 	bl	8000b1c <__aeabi_dcmplt>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d050      	beq.n	800637c <_dtoa_r+0x244>
 80062da:	9b00      	ldr	r3, [sp, #0]
 80062dc:	3b01      	subs	r3, #1
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	2300      	movs	r3, #0
 80062e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80062e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062e6:	1b5d      	subs	r5, r3, r5
 80062e8:	1e6b      	subs	r3, r5, #1
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	bf45      	ittet	mi
 80062ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80062f2:	9304      	strmi	r3, [sp, #16]
 80062f4:	2300      	movpl	r3, #0
 80062f6:	2300      	movmi	r3, #0
 80062f8:	bf4c      	ite	mi
 80062fa:	9305      	strmi	r3, [sp, #20]
 80062fc:	9304      	strpl	r3, [sp, #16]
 80062fe:	9b00      	ldr	r3, [sp, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	db3d      	blt.n	8006380 <_dtoa_r+0x248>
 8006304:	9b05      	ldr	r3, [sp, #20]
 8006306:	9a00      	ldr	r2, [sp, #0]
 8006308:	920a      	str	r2, [sp, #40]	; 0x28
 800630a:	4413      	add	r3, r2
 800630c:	9305      	str	r3, [sp, #20]
 800630e:	2300      	movs	r3, #0
 8006310:	9307      	str	r3, [sp, #28]
 8006312:	9b06      	ldr	r3, [sp, #24]
 8006314:	2b09      	cmp	r3, #9
 8006316:	f200 8089 	bhi.w	800642c <_dtoa_r+0x2f4>
 800631a:	2b05      	cmp	r3, #5
 800631c:	bfc4      	itt	gt
 800631e:	3b04      	subgt	r3, #4
 8006320:	9306      	strgt	r3, [sp, #24]
 8006322:	9b06      	ldr	r3, [sp, #24]
 8006324:	f1a3 0302 	sub.w	r3, r3, #2
 8006328:	bfcc      	ite	gt
 800632a:	2500      	movgt	r5, #0
 800632c:	2501      	movle	r5, #1
 800632e:	2b03      	cmp	r3, #3
 8006330:	f200 8087 	bhi.w	8006442 <_dtoa_r+0x30a>
 8006334:	e8df f003 	tbb	[pc, r3]
 8006338:	59383a2d 	.word	0x59383a2d
 800633c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006340:	441d      	add	r5, r3
 8006342:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006346:	2b20      	cmp	r3, #32
 8006348:	bfc1      	itttt	gt
 800634a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800634e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006352:	fa0b f303 	lslgt.w	r3, fp, r3
 8006356:	fa26 f000 	lsrgt.w	r0, r6, r0
 800635a:	bfda      	itte	le
 800635c:	f1c3 0320 	rsble	r3, r3, #32
 8006360:	fa06 f003 	lslle.w	r0, r6, r3
 8006364:	4318      	orrgt	r0, r3
 8006366:	f7fa f8ed 	bl	8000544 <__aeabi_ui2d>
 800636a:	2301      	movs	r3, #1
 800636c:	4606      	mov	r6, r0
 800636e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006372:	3d01      	subs	r5, #1
 8006374:	930e      	str	r3, [sp, #56]	; 0x38
 8006376:	e76a      	b.n	800624e <_dtoa_r+0x116>
 8006378:	2301      	movs	r3, #1
 800637a:	e7b2      	b.n	80062e2 <_dtoa_r+0x1aa>
 800637c:	900b      	str	r0, [sp, #44]	; 0x2c
 800637e:	e7b1      	b.n	80062e4 <_dtoa_r+0x1ac>
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	9a00      	ldr	r2, [sp, #0]
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	9304      	str	r3, [sp, #16]
 8006388:	4253      	negs	r3, r2
 800638a:	9307      	str	r3, [sp, #28]
 800638c:	2300      	movs	r3, #0
 800638e:	930a      	str	r3, [sp, #40]	; 0x28
 8006390:	e7bf      	b.n	8006312 <_dtoa_r+0x1da>
 8006392:	2300      	movs	r3, #0
 8006394:	9308      	str	r3, [sp, #32]
 8006396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	dc55      	bgt.n	8006448 <_dtoa_r+0x310>
 800639c:	2301      	movs	r3, #1
 800639e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063a2:	461a      	mov	r2, r3
 80063a4:	9209      	str	r2, [sp, #36]	; 0x24
 80063a6:	e00c      	b.n	80063c2 <_dtoa_r+0x28a>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e7f3      	b.n	8006394 <_dtoa_r+0x25c>
 80063ac:	2300      	movs	r3, #0
 80063ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063b0:	9308      	str	r3, [sp, #32]
 80063b2:	9b00      	ldr	r3, [sp, #0]
 80063b4:	4413      	add	r3, r2
 80063b6:	9302      	str	r3, [sp, #8]
 80063b8:	3301      	adds	r3, #1
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	9303      	str	r3, [sp, #12]
 80063be:	bfb8      	it	lt
 80063c0:	2301      	movlt	r3, #1
 80063c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063c4:	2200      	movs	r2, #0
 80063c6:	6042      	str	r2, [r0, #4]
 80063c8:	2204      	movs	r2, #4
 80063ca:	f102 0614 	add.w	r6, r2, #20
 80063ce:	429e      	cmp	r6, r3
 80063d0:	6841      	ldr	r1, [r0, #4]
 80063d2:	d93d      	bls.n	8006450 <_dtoa_r+0x318>
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 fec9 	bl	800716c <_Balloc>
 80063da:	9001      	str	r0, [sp, #4]
 80063dc:	2800      	cmp	r0, #0
 80063de:	d13b      	bne.n	8006458 <_dtoa_r+0x320>
 80063e0:	4b11      	ldr	r3, [pc, #68]	; (8006428 <_dtoa_r+0x2f0>)
 80063e2:	4602      	mov	r2, r0
 80063e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063e8:	e6c0      	b.n	800616c <_dtoa_r+0x34>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e7df      	b.n	80063ae <_dtoa_r+0x276>
 80063ee:	bf00      	nop
 80063f0:	636f4361 	.word	0x636f4361
 80063f4:	3fd287a7 	.word	0x3fd287a7
 80063f8:	8b60c8b3 	.word	0x8b60c8b3
 80063fc:	3fc68a28 	.word	0x3fc68a28
 8006400:	509f79fb 	.word	0x509f79fb
 8006404:	3fd34413 	.word	0x3fd34413
 8006408:	08008419 	.word	0x08008419
 800640c:	08008430 	.word	0x08008430
 8006410:	7ff00000 	.word	0x7ff00000
 8006414:	08008415 	.word	0x08008415
 8006418:	0800840c 	.word	0x0800840c
 800641c:	080083e9 	.word	0x080083e9
 8006420:	3ff80000 	.word	0x3ff80000
 8006424:	08008580 	.word	0x08008580
 8006428:	0800848b 	.word	0x0800848b
 800642c:	2501      	movs	r5, #1
 800642e:	2300      	movs	r3, #0
 8006430:	9306      	str	r3, [sp, #24]
 8006432:	9508      	str	r5, [sp, #32]
 8006434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006438:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800643c:	2200      	movs	r2, #0
 800643e:	2312      	movs	r3, #18
 8006440:	e7b0      	b.n	80063a4 <_dtoa_r+0x26c>
 8006442:	2301      	movs	r3, #1
 8006444:	9308      	str	r3, [sp, #32]
 8006446:	e7f5      	b.n	8006434 <_dtoa_r+0x2fc>
 8006448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800644e:	e7b8      	b.n	80063c2 <_dtoa_r+0x28a>
 8006450:	3101      	adds	r1, #1
 8006452:	6041      	str	r1, [r0, #4]
 8006454:	0052      	lsls	r2, r2, #1
 8006456:	e7b8      	b.n	80063ca <_dtoa_r+0x292>
 8006458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800645a:	9a01      	ldr	r2, [sp, #4]
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	2b0e      	cmp	r3, #14
 8006462:	f200 809d 	bhi.w	80065a0 <_dtoa_r+0x468>
 8006466:	2d00      	cmp	r5, #0
 8006468:	f000 809a 	beq.w	80065a0 <_dtoa_r+0x468>
 800646c:	9b00      	ldr	r3, [sp, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	dd32      	ble.n	80064d8 <_dtoa_r+0x3a0>
 8006472:	4ab7      	ldr	r2, [pc, #732]	; (8006750 <_dtoa_r+0x618>)
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800647c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006480:	9b00      	ldr	r3, [sp, #0]
 8006482:	05d8      	lsls	r0, r3, #23
 8006484:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006488:	d516      	bpl.n	80064b8 <_dtoa_r+0x380>
 800648a:	4bb2      	ldr	r3, [pc, #712]	; (8006754 <_dtoa_r+0x61c>)
 800648c:	ec51 0b19 	vmov	r0, r1, d9
 8006490:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006494:	f7fa f9fa 	bl	800088c <__aeabi_ddiv>
 8006498:	f007 070f 	and.w	r7, r7, #15
 800649c:	4682      	mov	sl, r0
 800649e:	468b      	mov	fp, r1
 80064a0:	2503      	movs	r5, #3
 80064a2:	4eac      	ldr	r6, [pc, #688]	; (8006754 <_dtoa_r+0x61c>)
 80064a4:	b957      	cbnz	r7, 80064bc <_dtoa_r+0x384>
 80064a6:	4642      	mov	r2, r8
 80064a8:	464b      	mov	r3, r9
 80064aa:	4650      	mov	r0, sl
 80064ac:	4659      	mov	r1, fp
 80064ae:	f7fa f9ed 	bl	800088c <__aeabi_ddiv>
 80064b2:	4682      	mov	sl, r0
 80064b4:	468b      	mov	fp, r1
 80064b6:	e028      	b.n	800650a <_dtoa_r+0x3d2>
 80064b8:	2502      	movs	r5, #2
 80064ba:	e7f2      	b.n	80064a2 <_dtoa_r+0x36a>
 80064bc:	07f9      	lsls	r1, r7, #31
 80064be:	d508      	bpl.n	80064d2 <_dtoa_r+0x39a>
 80064c0:	4640      	mov	r0, r8
 80064c2:	4649      	mov	r1, r9
 80064c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064c8:	f7fa f8b6 	bl	8000638 <__aeabi_dmul>
 80064cc:	3501      	adds	r5, #1
 80064ce:	4680      	mov	r8, r0
 80064d0:	4689      	mov	r9, r1
 80064d2:	107f      	asrs	r7, r7, #1
 80064d4:	3608      	adds	r6, #8
 80064d6:	e7e5      	b.n	80064a4 <_dtoa_r+0x36c>
 80064d8:	f000 809b 	beq.w	8006612 <_dtoa_r+0x4da>
 80064dc:	9b00      	ldr	r3, [sp, #0]
 80064de:	4f9d      	ldr	r7, [pc, #628]	; (8006754 <_dtoa_r+0x61c>)
 80064e0:	425e      	negs	r6, r3
 80064e2:	4b9b      	ldr	r3, [pc, #620]	; (8006750 <_dtoa_r+0x618>)
 80064e4:	f006 020f 	and.w	r2, r6, #15
 80064e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	ec51 0b19 	vmov	r0, r1, d9
 80064f4:	f7fa f8a0 	bl	8000638 <__aeabi_dmul>
 80064f8:	1136      	asrs	r6, r6, #4
 80064fa:	4682      	mov	sl, r0
 80064fc:	468b      	mov	fp, r1
 80064fe:	2300      	movs	r3, #0
 8006500:	2502      	movs	r5, #2
 8006502:	2e00      	cmp	r6, #0
 8006504:	d17a      	bne.n	80065fc <_dtoa_r+0x4c4>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1d3      	bne.n	80064b2 <_dtoa_r+0x37a>
 800650a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8082 	beq.w	8006616 <_dtoa_r+0x4de>
 8006512:	4b91      	ldr	r3, [pc, #580]	; (8006758 <_dtoa_r+0x620>)
 8006514:	2200      	movs	r2, #0
 8006516:	4650      	mov	r0, sl
 8006518:	4659      	mov	r1, fp
 800651a:	f7fa faff 	bl	8000b1c <__aeabi_dcmplt>
 800651e:	2800      	cmp	r0, #0
 8006520:	d079      	beq.n	8006616 <_dtoa_r+0x4de>
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d076      	beq.n	8006616 <_dtoa_r+0x4de>
 8006528:	9b02      	ldr	r3, [sp, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dd36      	ble.n	800659c <_dtoa_r+0x464>
 800652e:	9b00      	ldr	r3, [sp, #0]
 8006530:	4650      	mov	r0, sl
 8006532:	4659      	mov	r1, fp
 8006534:	1e5f      	subs	r7, r3, #1
 8006536:	2200      	movs	r2, #0
 8006538:	4b88      	ldr	r3, [pc, #544]	; (800675c <_dtoa_r+0x624>)
 800653a:	f7fa f87d 	bl	8000638 <__aeabi_dmul>
 800653e:	9e02      	ldr	r6, [sp, #8]
 8006540:	4682      	mov	sl, r0
 8006542:	468b      	mov	fp, r1
 8006544:	3501      	adds	r5, #1
 8006546:	4628      	mov	r0, r5
 8006548:	f7fa f80c 	bl	8000564 <__aeabi_i2d>
 800654c:	4652      	mov	r2, sl
 800654e:	465b      	mov	r3, fp
 8006550:	f7fa f872 	bl	8000638 <__aeabi_dmul>
 8006554:	4b82      	ldr	r3, [pc, #520]	; (8006760 <_dtoa_r+0x628>)
 8006556:	2200      	movs	r2, #0
 8006558:	f7f9 feb8 	bl	80002cc <__adddf3>
 800655c:	46d0      	mov	r8, sl
 800655e:	46d9      	mov	r9, fp
 8006560:	4682      	mov	sl, r0
 8006562:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006566:	2e00      	cmp	r6, #0
 8006568:	d158      	bne.n	800661c <_dtoa_r+0x4e4>
 800656a:	4b7e      	ldr	r3, [pc, #504]	; (8006764 <_dtoa_r+0x62c>)
 800656c:	2200      	movs	r2, #0
 800656e:	4640      	mov	r0, r8
 8006570:	4649      	mov	r1, r9
 8006572:	f7f9 fea9 	bl	80002c8 <__aeabi_dsub>
 8006576:	4652      	mov	r2, sl
 8006578:	465b      	mov	r3, fp
 800657a:	4680      	mov	r8, r0
 800657c:	4689      	mov	r9, r1
 800657e:	f7fa faeb 	bl	8000b58 <__aeabi_dcmpgt>
 8006582:	2800      	cmp	r0, #0
 8006584:	f040 8295 	bne.w	8006ab2 <_dtoa_r+0x97a>
 8006588:	4652      	mov	r2, sl
 800658a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800658e:	4640      	mov	r0, r8
 8006590:	4649      	mov	r1, r9
 8006592:	f7fa fac3 	bl	8000b1c <__aeabi_dcmplt>
 8006596:	2800      	cmp	r0, #0
 8006598:	f040 8289 	bne.w	8006aae <_dtoa_r+0x976>
 800659c:	ec5b ab19 	vmov	sl, fp, d9
 80065a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f2c0 8148 	blt.w	8006838 <_dtoa_r+0x700>
 80065a8:	9a00      	ldr	r2, [sp, #0]
 80065aa:	2a0e      	cmp	r2, #14
 80065ac:	f300 8144 	bgt.w	8006838 <_dtoa_r+0x700>
 80065b0:	4b67      	ldr	r3, [pc, #412]	; (8006750 <_dtoa_r+0x618>)
 80065b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f280 80d5 	bge.w	800676c <_dtoa_r+0x634>
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f300 80d1 	bgt.w	800676c <_dtoa_r+0x634>
 80065ca:	f040 826f 	bne.w	8006aac <_dtoa_r+0x974>
 80065ce:	4b65      	ldr	r3, [pc, #404]	; (8006764 <_dtoa_r+0x62c>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	4640      	mov	r0, r8
 80065d4:	4649      	mov	r1, r9
 80065d6:	f7fa f82f 	bl	8000638 <__aeabi_dmul>
 80065da:	4652      	mov	r2, sl
 80065dc:	465b      	mov	r3, fp
 80065de:	f7fa fab1 	bl	8000b44 <__aeabi_dcmpge>
 80065e2:	9e03      	ldr	r6, [sp, #12]
 80065e4:	4637      	mov	r7, r6
 80065e6:	2800      	cmp	r0, #0
 80065e8:	f040 8245 	bne.w	8006a76 <_dtoa_r+0x93e>
 80065ec:	9d01      	ldr	r5, [sp, #4]
 80065ee:	2331      	movs	r3, #49	; 0x31
 80065f0:	f805 3b01 	strb.w	r3, [r5], #1
 80065f4:	9b00      	ldr	r3, [sp, #0]
 80065f6:	3301      	adds	r3, #1
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	e240      	b.n	8006a7e <_dtoa_r+0x946>
 80065fc:	07f2      	lsls	r2, r6, #31
 80065fe:	d505      	bpl.n	800660c <_dtoa_r+0x4d4>
 8006600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006604:	f7fa f818 	bl	8000638 <__aeabi_dmul>
 8006608:	3501      	adds	r5, #1
 800660a:	2301      	movs	r3, #1
 800660c:	1076      	asrs	r6, r6, #1
 800660e:	3708      	adds	r7, #8
 8006610:	e777      	b.n	8006502 <_dtoa_r+0x3ca>
 8006612:	2502      	movs	r5, #2
 8006614:	e779      	b.n	800650a <_dtoa_r+0x3d2>
 8006616:	9f00      	ldr	r7, [sp, #0]
 8006618:	9e03      	ldr	r6, [sp, #12]
 800661a:	e794      	b.n	8006546 <_dtoa_r+0x40e>
 800661c:	9901      	ldr	r1, [sp, #4]
 800661e:	4b4c      	ldr	r3, [pc, #304]	; (8006750 <_dtoa_r+0x618>)
 8006620:	4431      	add	r1, r6
 8006622:	910d      	str	r1, [sp, #52]	; 0x34
 8006624:	9908      	ldr	r1, [sp, #32]
 8006626:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800662a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800662e:	2900      	cmp	r1, #0
 8006630:	d043      	beq.n	80066ba <_dtoa_r+0x582>
 8006632:	494d      	ldr	r1, [pc, #308]	; (8006768 <_dtoa_r+0x630>)
 8006634:	2000      	movs	r0, #0
 8006636:	f7fa f929 	bl	800088c <__aeabi_ddiv>
 800663a:	4652      	mov	r2, sl
 800663c:	465b      	mov	r3, fp
 800663e:	f7f9 fe43 	bl	80002c8 <__aeabi_dsub>
 8006642:	9d01      	ldr	r5, [sp, #4]
 8006644:	4682      	mov	sl, r0
 8006646:	468b      	mov	fp, r1
 8006648:	4649      	mov	r1, r9
 800664a:	4640      	mov	r0, r8
 800664c:	f7fa faa4 	bl	8000b98 <__aeabi_d2iz>
 8006650:	4606      	mov	r6, r0
 8006652:	f7f9 ff87 	bl	8000564 <__aeabi_i2d>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4640      	mov	r0, r8
 800665c:	4649      	mov	r1, r9
 800665e:	f7f9 fe33 	bl	80002c8 <__aeabi_dsub>
 8006662:	3630      	adds	r6, #48	; 0x30
 8006664:	f805 6b01 	strb.w	r6, [r5], #1
 8006668:	4652      	mov	r2, sl
 800666a:	465b      	mov	r3, fp
 800666c:	4680      	mov	r8, r0
 800666e:	4689      	mov	r9, r1
 8006670:	f7fa fa54 	bl	8000b1c <__aeabi_dcmplt>
 8006674:	2800      	cmp	r0, #0
 8006676:	d163      	bne.n	8006740 <_dtoa_r+0x608>
 8006678:	4642      	mov	r2, r8
 800667a:	464b      	mov	r3, r9
 800667c:	4936      	ldr	r1, [pc, #216]	; (8006758 <_dtoa_r+0x620>)
 800667e:	2000      	movs	r0, #0
 8006680:	f7f9 fe22 	bl	80002c8 <__aeabi_dsub>
 8006684:	4652      	mov	r2, sl
 8006686:	465b      	mov	r3, fp
 8006688:	f7fa fa48 	bl	8000b1c <__aeabi_dcmplt>
 800668c:	2800      	cmp	r0, #0
 800668e:	f040 80b5 	bne.w	80067fc <_dtoa_r+0x6c4>
 8006692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006694:	429d      	cmp	r5, r3
 8006696:	d081      	beq.n	800659c <_dtoa_r+0x464>
 8006698:	4b30      	ldr	r3, [pc, #192]	; (800675c <_dtoa_r+0x624>)
 800669a:	2200      	movs	r2, #0
 800669c:	4650      	mov	r0, sl
 800669e:	4659      	mov	r1, fp
 80066a0:	f7f9 ffca 	bl	8000638 <__aeabi_dmul>
 80066a4:	4b2d      	ldr	r3, [pc, #180]	; (800675c <_dtoa_r+0x624>)
 80066a6:	4682      	mov	sl, r0
 80066a8:	468b      	mov	fp, r1
 80066aa:	4640      	mov	r0, r8
 80066ac:	4649      	mov	r1, r9
 80066ae:	2200      	movs	r2, #0
 80066b0:	f7f9 ffc2 	bl	8000638 <__aeabi_dmul>
 80066b4:	4680      	mov	r8, r0
 80066b6:	4689      	mov	r9, r1
 80066b8:	e7c6      	b.n	8006648 <_dtoa_r+0x510>
 80066ba:	4650      	mov	r0, sl
 80066bc:	4659      	mov	r1, fp
 80066be:	f7f9 ffbb 	bl	8000638 <__aeabi_dmul>
 80066c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066c4:	9d01      	ldr	r5, [sp, #4]
 80066c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c8:	4682      	mov	sl, r0
 80066ca:	468b      	mov	fp, r1
 80066cc:	4649      	mov	r1, r9
 80066ce:	4640      	mov	r0, r8
 80066d0:	f7fa fa62 	bl	8000b98 <__aeabi_d2iz>
 80066d4:	4606      	mov	r6, r0
 80066d6:	f7f9 ff45 	bl	8000564 <__aeabi_i2d>
 80066da:	3630      	adds	r6, #48	; 0x30
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4640      	mov	r0, r8
 80066e2:	4649      	mov	r1, r9
 80066e4:	f7f9 fdf0 	bl	80002c8 <__aeabi_dsub>
 80066e8:	f805 6b01 	strb.w	r6, [r5], #1
 80066ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066ee:	429d      	cmp	r5, r3
 80066f0:	4680      	mov	r8, r0
 80066f2:	4689      	mov	r9, r1
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	d124      	bne.n	8006744 <_dtoa_r+0x60c>
 80066fa:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <_dtoa_r+0x630>)
 80066fc:	4650      	mov	r0, sl
 80066fe:	4659      	mov	r1, fp
 8006700:	f7f9 fde4 	bl	80002cc <__adddf3>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4640      	mov	r0, r8
 800670a:	4649      	mov	r1, r9
 800670c:	f7fa fa24 	bl	8000b58 <__aeabi_dcmpgt>
 8006710:	2800      	cmp	r0, #0
 8006712:	d173      	bne.n	80067fc <_dtoa_r+0x6c4>
 8006714:	4652      	mov	r2, sl
 8006716:	465b      	mov	r3, fp
 8006718:	4913      	ldr	r1, [pc, #76]	; (8006768 <_dtoa_r+0x630>)
 800671a:	2000      	movs	r0, #0
 800671c:	f7f9 fdd4 	bl	80002c8 <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4640      	mov	r0, r8
 8006726:	4649      	mov	r1, r9
 8006728:	f7fa f9f8 	bl	8000b1c <__aeabi_dcmplt>
 800672c:	2800      	cmp	r0, #0
 800672e:	f43f af35 	beq.w	800659c <_dtoa_r+0x464>
 8006732:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006734:	1e6b      	subs	r3, r5, #1
 8006736:	930f      	str	r3, [sp, #60]	; 0x3c
 8006738:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800673c:	2b30      	cmp	r3, #48	; 0x30
 800673e:	d0f8      	beq.n	8006732 <_dtoa_r+0x5fa>
 8006740:	9700      	str	r7, [sp, #0]
 8006742:	e049      	b.n	80067d8 <_dtoa_r+0x6a0>
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <_dtoa_r+0x624>)
 8006746:	f7f9 ff77 	bl	8000638 <__aeabi_dmul>
 800674a:	4680      	mov	r8, r0
 800674c:	4689      	mov	r9, r1
 800674e:	e7bd      	b.n	80066cc <_dtoa_r+0x594>
 8006750:	08008580 	.word	0x08008580
 8006754:	08008558 	.word	0x08008558
 8006758:	3ff00000 	.word	0x3ff00000
 800675c:	40240000 	.word	0x40240000
 8006760:	401c0000 	.word	0x401c0000
 8006764:	40140000 	.word	0x40140000
 8006768:	3fe00000 	.word	0x3fe00000
 800676c:	9d01      	ldr	r5, [sp, #4]
 800676e:	4656      	mov	r6, sl
 8006770:	465f      	mov	r7, fp
 8006772:	4642      	mov	r2, r8
 8006774:	464b      	mov	r3, r9
 8006776:	4630      	mov	r0, r6
 8006778:	4639      	mov	r1, r7
 800677a:	f7fa f887 	bl	800088c <__aeabi_ddiv>
 800677e:	f7fa fa0b 	bl	8000b98 <__aeabi_d2iz>
 8006782:	4682      	mov	sl, r0
 8006784:	f7f9 feee 	bl	8000564 <__aeabi_i2d>
 8006788:	4642      	mov	r2, r8
 800678a:	464b      	mov	r3, r9
 800678c:	f7f9 ff54 	bl	8000638 <__aeabi_dmul>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4630      	mov	r0, r6
 8006796:	4639      	mov	r1, r7
 8006798:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800679c:	f7f9 fd94 	bl	80002c8 <__aeabi_dsub>
 80067a0:	f805 6b01 	strb.w	r6, [r5], #1
 80067a4:	9e01      	ldr	r6, [sp, #4]
 80067a6:	9f03      	ldr	r7, [sp, #12]
 80067a8:	1bae      	subs	r6, r5, r6
 80067aa:	42b7      	cmp	r7, r6
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	d135      	bne.n	800681e <_dtoa_r+0x6e6>
 80067b2:	f7f9 fd8b 	bl	80002cc <__adddf3>
 80067b6:	4642      	mov	r2, r8
 80067b8:	464b      	mov	r3, r9
 80067ba:	4606      	mov	r6, r0
 80067bc:	460f      	mov	r7, r1
 80067be:	f7fa f9cb 	bl	8000b58 <__aeabi_dcmpgt>
 80067c2:	b9d0      	cbnz	r0, 80067fa <_dtoa_r+0x6c2>
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	4630      	mov	r0, r6
 80067ca:	4639      	mov	r1, r7
 80067cc:	f7fa f99c 	bl	8000b08 <__aeabi_dcmpeq>
 80067d0:	b110      	cbz	r0, 80067d8 <_dtoa_r+0x6a0>
 80067d2:	f01a 0f01 	tst.w	sl, #1
 80067d6:	d110      	bne.n	80067fa <_dtoa_r+0x6c2>
 80067d8:	4620      	mov	r0, r4
 80067da:	ee18 1a10 	vmov	r1, s16
 80067de:	f000 fd05 	bl	80071ec <_Bfree>
 80067e2:	2300      	movs	r3, #0
 80067e4:	9800      	ldr	r0, [sp, #0]
 80067e6:	702b      	strb	r3, [r5, #0]
 80067e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067ea:	3001      	adds	r0, #1
 80067ec:	6018      	str	r0, [r3, #0]
 80067ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f43f acf1 	beq.w	80061d8 <_dtoa_r+0xa0>
 80067f6:	601d      	str	r5, [r3, #0]
 80067f8:	e4ee      	b.n	80061d8 <_dtoa_r+0xa0>
 80067fa:	9f00      	ldr	r7, [sp, #0]
 80067fc:	462b      	mov	r3, r5
 80067fe:	461d      	mov	r5, r3
 8006800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006804:	2a39      	cmp	r2, #57	; 0x39
 8006806:	d106      	bne.n	8006816 <_dtoa_r+0x6de>
 8006808:	9a01      	ldr	r2, [sp, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d1f7      	bne.n	80067fe <_dtoa_r+0x6c6>
 800680e:	9901      	ldr	r1, [sp, #4]
 8006810:	2230      	movs	r2, #48	; 0x30
 8006812:	3701      	adds	r7, #1
 8006814:	700a      	strb	r2, [r1, #0]
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	3201      	adds	r2, #1
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	e790      	b.n	8006740 <_dtoa_r+0x608>
 800681e:	4ba6      	ldr	r3, [pc, #664]	; (8006ab8 <_dtoa_r+0x980>)
 8006820:	2200      	movs	r2, #0
 8006822:	f7f9 ff09 	bl	8000638 <__aeabi_dmul>
 8006826:	2200      	movs	r2, #0
 8006828:	2300      	movs	r3, #0
 800682a:	4606      	mov	r6, r0
 800682c:	460f      	mov	r7, r1
 800682e:	f7fa f96b 	bl	8000b08 <__aeabi_dcmpeq>
 8006832:	2800      	cmp	r0, #0
 8006834:	d09d      	beq.n	8006772 <_dtoa_r+0x63a>
 8006836:	e7cf      	b.n	80067d8 <_dtoa_r+0x6a0>
 8006838:	9a08      	ldr	r2, [sp, #32]
 800683a:	2a00      	cmp	r2, #0
 800683c:	f000 80d7 	beq.w	80069ee <_dtoa_r+0x8b6>
 8006840:	9a06      	ldr	r2, [sp, #24]
 8006842:	2a01      	cmp	r2, #1
 8006844:	f300 80ba 	bgt.w	80069bc <_dtoa_r+0x884>
 8006848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800684a:	2a00      	cmp	r2, #0
 800684c:	f000 80b2 	beq.w	80069b4 <_dtoa_r+0x87c>
 8006850:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006854:	9e07      	ldr	r6, [sp, #28]
 8006856:	9d04      	ldr	r5, [sp, #16]
 8006858:	9a04      	ldr	r2, [sp, #16]
 800685a:	441a      	add	r2, r3
 800685c:	9204      	str	r2, [sp, #16]
 800685e:	9a05      	ldr	r2, [sp, #20]
 8006860:	2101      	movs	r1, #1
 8006862:	441a      	add	r2, r3
 8006864:	4620      	mov	r0, r4
 8006866:	9205      	str	r2, [sp, #20]
 8006868:	f000 fd78 	bl	800735c <__i2b>
 800686c:	4607      	mov	r7, r0
 800686e:	2d00      	cmp	r5, #0
 8006870:	dd0c      	ble.n	800688c <_dtoa_r+0x754>
 8006872:	9b05      	ldr	r3, [sp, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	dd09      	ble.n	800688c <_dtoa_r+0x754>
 8006878:	42ab      	cmp	r3, r5
 800687a:	9a04      	ldr	r2, [sp, #16]
 800687c:	bfa8      	it	ge
 800687e:	462b      	movge	r3, r5
 8006880:	1ad2      	subs	r2, r2, r3
 8006882:	9204      	str	r2, [sp, #16]
 8006884:	9a05      	ldr	r2, [sp, #20]
 8006886:	1aed      	subs	r5, r5, r3
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	9305      	str	r3, [sp, #20]
 800688c:	9b07      	ldr	r3, [sp, #28]
 800688e:	b31b      	cbz	r3, 80068d8 <_dtoa_r+0x7a0>
 8006890:	9b08      	ldr	r3, [sp, #32]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 80af 	beq.w	80069f6 <_dtoa_r+0x8be>
 8006898:	2e00      	cmp	r6, #0
 800689a:	dd13      	ble.n	80068c4 <_dtoa_r+0x78c>
 800689c:	4639      	mov	r1, r7
 800689e:	4632      	mov	r2, r6
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fe1b 	bl	80074dc <__pow5mult>
 80068a6:	ee18 2a10 	vmov	r2, s16
 80068aa:	4601      	mov	r1, r0
 80068ac:	4607      	mov	r7, r0
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 fd6a 	bl	8007388 <__multiply>
 80068b4:	ee18 1a10 	vmov	r1, s16
 80068b8:	4680      	mov	r8, r0
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 fc96 	bl	80071ec <_Bfree>
 80068c0:	ee08 8a10 	vmov	s16, r8
 80068c4:	9b07      	ldr	r3, [sp, #28]
 80068c6:	1b9a      	subs	r2, r3, r6
 80068c8:	d006      	beq.n	80068d8 <_dtoa_r+0x7a0>
 80068ca:	ee18 1a10 	vmov	r1, s16
 80068ce:	4620      	mov	r0, r4
 80068d0:	f000 fe04 	bl	80074dc <__pow5mult>
 80068d4:	ee08 0a10 	vmov	s16, r0
 80068d8:	2101      	movs	r1, #1
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 fd3e 	bl	800735c <__i2b>
 80068e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	4606      	mov	r6, r0
 80068e6:	f340 8088 	ble.w	80069fa <_dtoa_r+0x8c2>
 80068ea:	461a      	mov	r2, r3
 80068ec:	4601      	mov	r1, r0
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 fdf4 	bl	80074dc <__pow5mult>
 80068f4:	9b06      	ldr	r3, [sp, #24]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	4606      	mov	r6, r0
 80068fa:	f340 8081 	ble.w	8006a00 <_dtoa_r+0x8c8>
 80068fe:	f04f 0800 	mov.w	r8, #0
 8006902:	6933      	ldr	r3, [r6, #16]
 8006904:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006908:	6918      	ldr	r0, [r3, #16]
 800690a:	f000 fcd7 	bl	80072bc <__hi0bits>
 800690e:	f1c0 0020 	rsb	r0, r0, #32
 8006912:	9b05      	ldr	r3, [sp, #20]
 8006914:	4418      	add	r0, r3
 8006916:	f010 001f 	ands.w	r0, r0, #31
 800691a:	f000 8092 	beq.w	8006a42 <_dtoa_r+0x90a>
 800691e:	f1c0 0320 	rsb	r3, r0, #32
 8006922:	2b04      	cmp	r3, #4
 8006924:	f340 808a 	ble.w	8006a3c <_dtoa_r+0x904>
 8006928:	f1c0 001c 	rsb	r0, r0, #28
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	4403      	add	r3, r0
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	9b05      	ldr	r3, [sp, #20]
 8006934:	4403      	add	r3, r0
 8006936:	4405      	add	r5, r0
 8006938:	9305      	str	r3, [sp, #20]
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	dd07      	ble.n	8006950 <_dtoa_r+0x818>
 8006940:	ee18 1a10 	vmov	r1, s16
 8006944:	461a      	mov	r2, r3
 8006946:	4620      	mov	r0, r4
 8006948:	f000 fe22 	bl	8007590 <__lshift>
 800694c:	ee08 0a10 	vmov	s16, r0
 8006950:	9b05      	ldr	r3, [sp, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	dd05      	ble.n	8006962 <_dtoa_r+0x82a>
 8006956:	4631      	mov	r1, r6
 8006958:	461a      	mov	r2, r3
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fe18 	bl	8007590 <__lshift>
 8006960:	4606      	mov	r6, r0
 8006962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d06e      	beq.n	8006a46 <_dtoa_r+0x90e>
 8006968:	ee18 0a10 	vmov	r0, s16
 800696c:	4631      	mov	r1, r6
 800696e:	f000 fe7f 	bl	8007670 <__mcmp>
 8006972:	2800      	cmp	r0, #0
 8006974:	da67      	bge.n	8006a46 <_dtoa_r+0x90e>
 8006976:	9b00      	ldr	r3, [sp, #0]
 8006978:	3b01      	subs	r3, #1
 800697a:	ee18 1a10 	vmov	r1, s16
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	220a      	movs	r2, #10
 8006982:	2300      	movs	r3, #0
 8006984:	4620      	mov	r0, r4
 8006986:	f000 fc53 	bl	8007230 <__multadd>
 800698a:	9b08      	ldr	r3, [sp, #32]
 800698c:	ee08 0a10 	vmov	s16, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 81b1 	beq.w	8006cf8 <_dtoa_r+0xbc0>
 8006996:	2300      	movs	r3, #0
 8006998:	4639      	mov	r1, r7
 800699a:	220a      	movs	r2, #10
 800699c:	4620      	mov	r0, r4
 800699e:	f000 fc47 	bl	8007230 <__multadd>
 80069a2:	9b02      	ldr	r3, [sp, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	4607      	mov	r7, r0
 80069a8:	f300 808e 	bgt.w	8006ac8 <_dtoa_r+0x990>
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	dc51      	bgt.n	8006a56 <_dtoa_r+0x91e>
 80069b2:	e089      	b.n	8006ac8 <_dtoa_r+0x990>
 80069b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069ba:	e74b      	b.n	8006854 <_dtoa_r+0x71c>
 80069bc:	9b03      	ldr	r3, [sp, #12]
 80069be:	1e5e      	subs	r6, r3, #1
 80069c0:	9b07      	ldr	r3, [sp, #28]
 80069c2:	42b3      	cmp	r3, r6
 80069c4:	bfbf      	itttt	lt
 80069c6:	9b07      	ldrlt	r3, [sp, #28]
 80069c8:	9607      	strlt	r6, [sp, #28]
 80069ca:	1af2      	sublt	r2, r6, r3
 80069cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069ce:	bfb6      	itet	lt
 80069d0:	189b      	addlt	r3, r3, r2
 80069d2:	1b9e      	subge	r6, r3, r6
 80069d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	bfb8      	it	lt
 80069da:	2600      	movlt	r6, #0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bfb7      	itett	lt
 80069e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80069e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80069e8:	1a9d      	sublt	r5, r3, r2
 80069ea:	2300      	movlt	r3, #0
 80069ec:	e734      	b.n	8006858 <_dtoa_r+0x720>
 80069ee:	9e07      	ldr	r6, [sp, #28]
 80069f0:	9d04      	ldr	r5, [sp, #16]
 80069f2:	9f08      	ldr	r7, [sp, #32]
 80069f4:	e73b      	b.n	800686e <_dtoa_r+0x736>
 80069f6:	9a07      	ldr	r2, [sp, #28]
 80069f8:	e767      	b.n	80068ca <_dtoa_r+0x792>
 80069fa:	9b06      	ldr	r3, [sp, #24]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	dc18      	bgt.n	8006a32 <_dtoa_r+0x8fa>
 8006a00:	f1ba 0f00 	cmp.w	sl, #0
 8006a04:	d115      	bne.n	8006a32 <_dtoa_r+0x8fa>
 8006a06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a0a:	b993      	cbnz	r3, 8006a32 <_dtoa_r+0x8fa>
 8006a0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a10:	0d1b      	lsrs	r3, r3, #20
 8006a12:	051b      	lsls	r3, r3, #20
 8006a14:	b183      	cbz	r3, 8006a38 <_dtoa_r+0x900>
 8006a16:	9b04      	ldr	r3, [sp, #16]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	9b05      	ldr	r3, [sp, #20]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	9305      	str	r3, [sp, #20]
 8006a22:	f04f 0801 	mov.w	r8, #1
 8006a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f47f af6a 	bne.w	8006902 <_dtoa_r+0x7ca>
 8006a2e:	2001      	movs	r0, #1
 8006a30:	e76f      	b.n	8006912 <_dtoa_r+0x7da>
 8006a32:	f04f 0800 	mov.w	r8, #0
 8006a36:	e7f6      	b.n	8006a26 <_dtoa_r+0x8ee>
 8006a38:	4698      	mov	r8, r3
 8006a3a:	e7f4      	b.n	8006a26 <_dtoa_r+0x8ee>
 8006a3c:	f43f af7d 	beq.w	800693a <_dtoa_r+0x802>
 8006a40:	4618      	mov	r0, r3
 8006a42:	301c      	adds	r0, #28
 8006a44:	e772      	b.n	800692c <_dtoa_r+0x7f4>
 8006a46:	9b03      	ldr	r3, [sp, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dc37      	bgt.n	8006abc <_dtoa_r+0x984>
 8006a4c:	9b06      	ldr	r3, [sp, #24]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	dd34      	ble.n	8006abc <_dtoa_r+0x984>
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	9302      	str	r3, [sp, #8]
 8006a56:	9b02      	ldr	r3, [sp, #8]
 8006a58:	b96b      	cbnz	r3, 8006a76 <_dtoa_r+0x93e>
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	2205      	movs	r2, #5
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 fbe6 	bl	8007230 <__multadd>
 8006a64:	4601      	mov	r1, r0
 8006a66:	4606      	mov	r6, r0
 8006a68:	ee18 0a10 	vmov	r0, s16
 8006a6c:	f000 fe00 	bl	8007670 <__mcmp>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	f73f adbb 	bgt.w	80065ec <_dtoa_r+0x4b4>
 8006a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a78:	9d01      	ldr	r5, [sp, #4]
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	f04f 0800 	mov.w	r8, #0
 8006a82:	4631      	mov	r1, r6
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 fbb1 	bl	80071ec <_Bfree>
 8006a8a:	2f00      	cmp	r7, #0
 8006a8c:	f43f aea4 	beq.w	80067d8 <_dtoa_r+0x6a0>
 8006a90:	f1b8 0f00 	cmp.w	r8, #0
 8006a94:	d005      	beq.n	8006aa2 <_dtoa_r+0x96a>
 8006a96:	45b8      	cmp	r8, r7
 8006a98:	d003      	beq.n	8006aa2 <_dtoa_r+0x96a>
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 fba5 	bl	80071ec <_Bfree>
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f000 fba1 	bl	80071ec <_Bfree>
 8006aaa:	e695      	b.n	80067d8 <_dtoa_r+0x6a0>
 8006aac:	2600      	movs	r6, #0
 8006aae:	4637      	mov	r7, r6
 8006ab0:	e7e1      	b.n	8006a76 <_dtoa_r+0x93e>
 8006ab2:	9700      	str	r7, [sp, #0]
 8006ab4:	4637      	mov	r7, r6
 8006ab6:	e599      	b.n	80065ec <_dtoa_r+0x4b4>
 8006ab8:	40240000 	.word	0x40240000
 8006abc:	9b08      	ldr	r3, [sp, #32]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 80ca 	beq.w	8006c58 <_dtoa_r+0xb20>
 8006ac4:	9b03      	ldr	r3, [sp, #12]
 8006ac6:	9302      	str	r3, [sp, #8]
 8006ac8:	2d00      	cmp	r5, #0
 8006aca:	dd05      	ble.n	8006ad8 <_dtoa_r+0x9a0>
 8006acc:	4639      	mov	r1, r7
 8006ace:	462a      	mov	r2, r5
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 fd5d 	bl	8007590 <__lshift>
 8006ad6:	4607      	mov	r7, r0
 8006ad8:	f1b8 0f00 	cmp.w	r8, #0
 8006adc:	d05b      	beq.n	8006b96 <_dtoa_r+0xa5e>
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 fb43 	bl	800716c <_Balloc>
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	b928      	cbnz	r0, 8006af6 <_dtoa_r+0x9be>
 8006aea:	4b87      	ldr	r3, [pc, #540]	; (8006d08 <_dtoa_r+0xbd0>)
 8006aec:	4602      	mov	r2, r0
 8006aee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006af2:	f7ff bb3b 	b.w	800616c <_dtoa_r+0x34>
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	3202      	adds	r2, #2
 8006afa:	0092      	lsls	r2, r2, #2
 8006afc:	f107 010c 	add.w	r1, r7, #12
 8006b00:	300c      	adds	r0, #12
 8006b02:	f7fe fc9f 	bl	8005444 <memcpy>
 8006b06:	2201      	movs	r2, #1
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 fd40 	bl	8007590 <__lshift>
 8006b10:	9b01      	ldr	r3, [sp, #4]
 8006b12:	f103 0901 	add.w	r9, r3, #1
 8006b16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	9305      	str	r3, [sp, #20]
 8006b1e:	f00a 0301 	and.w	r3, sl, #1
 8006b22:	46b8      	mov	r8, r7
 8006b24:	9304      	str	r3, [sp, #16]
 8006b26:	4607      	mov	r7, r0
 8006b28:	4631      	mov	r1, r6
 8006b2a:	ee18 0a10 	vmov	r0, s16
 8006b2e:	f7ff fa77 	bl	8006020 <quorem>
 8006b32:	4641      	mov	r1, r8
 8006b34:	9002      	str	r0, [sp, #8]
 8006b36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b3a:	ee18 0a10 	vmov	r0, s16
 8006b3e:	f000 fd97 	bl	8007670 <__mcmp>
 8006b42:	463a      	mov	r2, r7
 8006b44:	9003      	str	r0, [sp, #12]
 8006b46:	4631      	mov	r1, r6
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fdad 	bl	80076a8 <__mdiff>
 8006b4e:	68c2      	ldr	r2, [r0, #12]
 8006b50:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006b54:	4605      	mov	r5, r0
 8006b56:	bb02      	cbnz	r2, 8006b9a <_dtoa_r+0xa62>
 8006b58:	4601      	mov	r1, r0
 8006b5a:	ee18 0a10 	vmov	r0, s16
 8006b5e:	f000 fd87 	bl	8007670 <__mcmp>
 8006b62:	4602      	mov	r2, r0
 8006b64:	4629      	mov	r1, r5
 8006b66:	4620      	mov	r0, r4
 8006b68:	9207      	str	r2, [sp, #28]
 8006b6a:	f000 fb3f 	bl	80071ec <_Bfree>
 8006b6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b72:	ea43 0102 	orr.w	r1, r3, r2
 8006b76:	9b04      	ldr	r3, [sp, #16]
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	464d      	mov	r5, r9
 8006b7c:	d10f      	bne.n	8006b9e <_dtoa_r+0xa66>
 8006b7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b82:	d02a      	beq.n	8006bda <_dtoa_r+0xaa2>
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	dd02      	ble.n	8006b90 <_dtoa_r+0xa58>
 8006b8a:	9b02      	ldr	r3, [sp, #8]
 8006b8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b90:	f88b a000 	strb.w	sl, [fp]
 8006b94:	e775      	b.n	8006a82 <_dtoa_r+0x94a>
 8006b96:	4638      	mov	r0, r7
 8006b98:	e7ba      	b.n	8006b10 <_dtoa_r+0x9d8>
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	e7e2      	b.n	8006b64 <_dtoa_r+0xa2c>
 8006b9e:	9b03      	ldr	r3, [sp, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	db04      	blt.n	8006bae <_dtoa_r+0xa76>
 8006ba4:	9906      	ldr	r1, [sp, #24]
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	9904      	ldr	r1, [sp, #16]
 8006baa:	430b      	orrs	r3, r1
 8006bac:	d122      	bne.n	8006bf4 <_dtoa_r+0xabc>
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	ddee      	ble.n	8006b90 <_dtoa_r+0xa58>
 8006bb2:	ee18 1a10 	vmov	r1, s16
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fce9 	bl	8007590 <__lshift>
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	ee08 0a10 	vmov	s16, r0
 8006bc4:	f000 fd54 	bl	8007670 <__mcmp>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	dc03      	bgt.n	8006bd4 <_dtoa_r+0xa9c>
 8006bcc:	d1e0      	bne.n	8006b90 <_dtoa_r+0xa58>
 8006bce:	f01a 0f01 	tst.w	sl, #1
 8006bd2:	d0dd      	beq.n	8006b90 <_dtoa_r+0xa58>
 8006bd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bd8:	d1d7      	bne.n	8006b8a <_dtoa_r+0xa52>
 8006bda:	2339      	movs	r3, #57	; 0x39
 8006bdc:	f88b 3000 	strb.w	r3, [fp]
 8006be0:	462b      	mov	r3, r5
 8006be2:	461d      	mov	r5, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bea:	2a39      	cmp	r2, #57	; 0x39
 8006bec:	d071      	beq.n	8006cd2 <_dtoa_r+0xb9a>
 8006bee:	3201      	adds	r2, #1
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	e746      	b.n	8006a82 <_dtoa_r+0x94a>
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	dd07      	ble.n	8006c08 <_dtoa_r+0xad0>
 8006bf8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bfc:	d0ed      	beq.n	8006bda <_dtoa_r+0xaa2>
 8006bfe:	f10a 0301 	add.w	r3, sl, #1
 8006c02:	f88b 3000 	strb.w	r3, [fp]
 8006c06:	e73c      	b.n	8006a82 <_dtoa_r+0x94a>
 8006c08:	9b05      	ldr	r3, [sp, #20]
 8006c0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006c0e:	4599      	cmp	r9, r3
 8006c10:	d047      	beq.n	8006ca2 <_dtoa_r+0xb6a>
 8006c12:	ee18 1a10 	vmov	r1, s16
 8006c16:	2300      	movs	r3, #0
 8006c18:	220a      	movs	r2, #10
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 fb08 	bl	8007230 <__multadd>
 8006c20:	45b8      	cmp	r8, r7
 8006c22:	ee08 0a10 	vmov	s16, r0
 8006c26:	f04f 0300 	mov.w	r3, #0
 8006c2a:	f04f 020a 	mov.w	r2, #10
 8006c2e:	4641      	mov	r1, r8
 8006c30:	4620      	mov	r0, r4
 8006c32:	d106      	bne.n	8006c42 <_dtoa_r+0xb0a>
 8006c34:	f000 fafc 	bl	8007230 <__multadd>
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4607      	mov	r7, r0
 8006c3c:	f109 0901 	add.w	r9, r9, #1
 8006c40:	e772      	b.n	8006b28 <_dtoa_r+0x9f0>
 8006c42:	f000 faf5 	bl	8007230 <__multadd>
 8006c46:	4639      	mov	r1, r7
 8006c48:	4680      	mov	r8, r0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	220a      	movs	r2, #10
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 faee 	bl	8007230 <__multadd>
 8006c54:	4607      	mov	r7, r0
 8006c56:	e7f1      	b.n	8006c3c <_dtoa_r+0xb04>
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	9302      	str	r3, [sp, #8]
 8006c5c:	9d01      	ldr	r5, [sp, #4]
 8006c5e:	ee18 0a10 	vmov	r0, s16
 8006c62:	4631      	mov	r1, r6
 8006c64:	f7ff f9dc 	bl	8006020 <quorem>
 8006c68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	f805 ab01 	strb.w	sl, [r5], #1
 8006c72:	1aea      	subs	r2, r5, r3
 8006c74:	9b02      	ldr	r3, [sp, #8]
 8006c76:	4293      	cmp	r3, r2
 8006c78:	dd09      	ble.n	8006c8e <_dtoa_r+0xb56>
 8006c7a:	ee18 1a10 	vmov	r1, s16
 8006c7e:	2300      	movs	r3, #0
 8006c80:	220a      	movs	r2, #10
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 fad4 	bl	8007230 <__multadd>
 8006c88:	ee08 0a10 	vmov	s16, r0
 8006c8c:	e7e7      	b.n	8006c5e <_dtoa_r+0xb26>
 8006c8e:	9b02      	ldr	r3, [sp, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bfc8      	it	gt
 8006c94:	461d      	movgt	r5, r3
 8006c96:	9b01      	ldr	r3, [sp, #4]
 8006c98:	bfd8      	it	le
 8006c9a:	2501      	movle	r5, #1
 8006c9c:	441d      	add	r5, r3
 8006c9e:	f04f 0800 	mov.w	r8, #0
 8006ca2:	ee18 1a10 	vmov	r1, s16
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 fc71 	bl	8007590 <__lshift>
 8006cae:	4631      	mov	r1, r6
 8006cb0:	ee08 0a10 	vmov	s16, r0
 8006cb4:	f000 fcdc 	bl	8007670 <__mcmp>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	dc91      	bgt.n	8006be0 <_dtoa_r+0xaa8>
 8006cbc:	d102      	bne.n	8006cc4 <_dtoa_r+0xb8c>
 8006cbe:	f01a 0f01 	tst.w	sl, #1
 8006cc2:	d18d      	bne.n	8006be0 <_dtoa_r+0xaa8>
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	461d      	mov	r5, r3
 8006cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ccc:	2a30      	cmp	r2, #48	; 0x30
 8006cce:	d0fa      	beq.n	8006cc6 <_dtoa_r+0xb8e>
 8006cd0:	e6d7      	b.n	8006a82 <_dtoa_r+0x94a>
 8006cd2:	9a01      	ldr	r2, [sp, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d184      	bne.n	8006be2 <_dtoa_r+0xaaa>
 8006cd8:	9b00      	ldr	r3, [sp, #0]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	2331      	movs	r3, #49	; 0x31
 8006ce0:	7013      	strb	r3, [r2, #0]
 8006ce2:	e6ce      	b.n	8006a82 <_dtoa_r+0x94a>
 8006ce4:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <_dtoa_r+0xbd4>)
 8006ce6:	f7ff ba95 	b.w	8006214 <_dtoa_r+0xdc>
 8006cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f47f aa6e 	bne.w	80061ce <_dtoa_r+0x96>
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <_dtoa_r+0xbd8>)
 8006cf4:	f7ff ba8e 	b.w	8006214 <_dtoa_r+0xdc>
 8006cf8:	9b02      	ldr	r3, [sp, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	dcae      	bgt.n	8006c5c <_dtoa_r+0xb24>
 8006cfe:	9b06      	ldr	r3, [sp, #24]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	f73f aea8 	bgt.w	8006a56 <_dtoa_r+0x91e>
 8006d06:	e7a9      	b.n	8006c5c <_dtoa_r+0xb24>
 8006d08:	0800848b 	.word	0x0800848b
 8006d0c:	080083e8 	.word	0x080083e8
 8006d10:	0800840c 	.word	0x0800840c

08006d14 <__sflush_r>:
 8006d14:	898a      	ldrh	r2, [r1, #12]
 8006d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	0710      	lsls	r0, r2, #28
 8006d1e:	460c      	mov	r4, r1
 8006d20:	d458      	bmi.n	8006dd4 <__sflush_r+0xc0>
 8006d22:	684b      	ldr	r3, [r1, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	dc05      	bgt.n	8006d34 <__sflush_r+0x20>
 8006d28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	dc02      	bgt.n	8006d34 <__sflush_r+0x20>
 8006d2e:	2000      	movs	r0, #0
 8006d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d36:	2e00      	cmp	r6, #0
 8006d38:	d0f9      	beq.n	8006d2e <__sflush_r+0x1a>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d40:	682f      	ldr	r7, [r5, #0]
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	d032      	beq.n	8006dac <__sflush_r+0x98>
 8006d46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	075a      	lsls	r2, r3, #29
 8006d4c:	d505      	bpl.n	8006d5a <__sflush_r+0x46>
 8006d4e:	6863      	ldr	r3, [r4, #4]
 8006d50:	1ac0      	subs	r0, r0, r3
 8006d52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d54:	b10b      	cbz	r3, 8006d5a <__sflush_r+0x46>
 8006d56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d58:	1ac0      	subs	r0, r0, r3
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d60:	6a21      	ldr	r1, [r4, #32]
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b0      	blx	r6
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	d106      	bne.n	8006d7a <__sflush_r+0x66>
 8006d6c:	6829      	ldr	r1, [r5, #0]
 8006d6e:	291d      	cmp	r1, #29
 8006d70:	d82c      	bhi.n	8006dcc <__sflush_r+0xb8>
 8006d72:	4a2a      	ldr	r2, [pc, #168]	; (8006e1c <__sflush_r+0x108>)
 8006d74:	40ca      	lsrs	r2, r1
 8006d76:	07d6      	lsls	r6, r2, #31
 8006d78:	d528      	bpl.n	8006dcc <__sflush_r+0xb8>
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	6062      	str	r2, [r4, #4]
 8006d7e:	04d9      	lsls	r1, r3, #19
 8006d80:	6922      	ldr	r2, [r4, #16]
 8006d82:	6022      	str	r2, [r4, #0]
 8006d84:	d504      	bpl.n	8006d90 <__sflush_r+0x7c>
 8006d86:	1c42      	adds	r2, r0, #1
 8006d88:	d101      	bne.n	8006d8e <__sflush_r+0x7a>
 8006d8a:	682b      	ldr	r3, [r5, #0]
 8006d8c:	b903      	cbnz	r3, 8006d90 <__sflush_r+0x7c>
 8006d8e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d92:	602f      	str	r7, [r5, #0]
 8006d94:	2900      	cmp	r1, #0
 8006d96:	d0ca      	beq.n	8006d2e <__sflush_r+0x1a>
 8006d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d9c:	4299      	cmp	r1, r3
 8006d9e:	d002      	beq.n	8006da6 <__sflush_r+0x92>
 8006da0:	4628      	mov	r0, r5
 8006da2:	f000 fd7d 	bl	80078a0 <_free_r>
 8006da6:	2000      	movs	r0, #0
 8006da8:	6360      	str	r0, [r4, #52]	; 0x34
 8006daa:	e7c1      	b.n	8006d30 <__sflush_r+0x1c>
 8006dac:	6a21      	ldr	r1, [r4, #32]
 8006dae:	2301      	movs	r3, #1
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b0      	blx	r6
 8006db4:	1c41      	adds	r1, r0, #1
 8006db6:	d1c7      	bne.n	8006d48 <__sflush_r+0x34>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0c4      	beq.n	8006d48 <__sflush_r+0x34>
 8006dbe:	2b1d      	cmp	r3, #29
 8006dc0:	d001      	beq.n	8006dc6 <__sflush_r+0xb2>
 8006dc2:	2b16      	cmp	r3, #22
 8006dc4:	d101      	bne.n	8006dca <__sflush_r+0xb6>
 8006dc6:	602f      	str	r7, [r5, #0]
 8006dc8:	e7b1      	b.n	8006d2e <__sflush_r+0x1a>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	e7ad      	b.n	8006d30 <__sflush_r+0x1c>
 8006dd4:	690f      	ldr	r7, [r1, #16]
 8006dd6:	2f00      	cmp	r7, #0
 8006dd8:	d0a9      	beq.n	8006d2e <__sflush_r+0x1a>
 8006dda:	0793      	lsls	r3, r2, #30
 8006ddc:	680e      	ldr	r6, [r1, #0]
 8006dde:	bf08      	it	eq
 8006de0:	694b      	ldreq	r3, [r1, #20]
 8006de2:	600f      	str	r7, [r1, #0]
 8006de4:	bf18      	it	ne
 8006de6:	2300      	movne	r3, #0
 8006de8:	eba6 0807 	sub.w	r8, r6, r7
 8006dec:	608b      	str	r3, [r1, #8]
 8006dee:	f1b8 0f00 	cmp.w	r8, #0
 8006df2:	dd9c      	ble.n	8006d2e <__sflush_r+0x1a>
 8006df4:	6a21      	ldr	r1, [r4, #32]
 8006df6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006df8:	4643      	mov	r3, r8
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	47b0      	blx	r6
 8006e00:	2800      	cmp	r0, #0
 8006e02:	dc06      	bgt.n	8006e12 <__sflush_r+0xfe>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e0a:	81a3      	strh	r3, [r4, #12]
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e10:	e78e      	b.n	8006d30 <__sflush_r+0x1c>
 8006e12:	4407      	add	r7, r0
 8006e14:	eba8 0800 	sub.w	r8, r8, r0
 8006e18:	e7e9      	b.n	8006dee <__sflush_r+0xda>
 8006e1a:	bf00      	nop
 8006e1c:	20400001 	.word	0x20400001

08006e20 <_fflush_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	690b      	ldr	r3, [r1, #16]
 8006e24:	4605      	mov	r5, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	b913      	cbnz	r3, 8006e30 <_fflush_r+0x10>
 8006e2a:	2500      	movs	r5, #0
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	b118      	cbz	r0, 8006e3a <_fflush_r+0x1a>
 8006e32:	6983      	ldr	r3, [r0, #24]
 8006e34:	b90b      	cbnz	r3, 8006e3a <_fflush_r+0x1a>
 8006e36:	f000 f887 	bl	8006f48 <__sinit>
 8006e3a:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <_fflush_r+0x6c>)
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d11b      	bne.n	8006e78 <_fflush_r+0x58>
 8006e40:	686c      	ldr	r4, [r5, #4]
 8006e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0ef      	beq.n	8006e2a <_fflush_r+0xa>
 8006e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e4c:	07d0      	lsls	r0, r2, #31
 8006e4e:	d404      	bmi.n	8006e5a <_fflush_r+0x3a>
 8006e50:	0599      	lsls	r1, r3, #22
 8006e52:	d402      	bmi.n	8006e5a <_fflush_r+0x3a>
 8006e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e56:	f000 f91a 	bl	800708e <__retarget_lock_acquire_recursive>
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	f7ff ff59 	bl	8006d14 <__sflush_r>
 8006e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e64:	07da      	lsls	r2, r3, #31
 8006e66:	4605      	mov	r5, r0
 8006e68:	d4e0      	bmi.n	8006e2c <_fflush_r+0xc>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	059b      	lsls	r3, r3, #22
 8006e6e:	d4dd      	bmi.n	8006e2c <_fflush_r+0xc>
 8006e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e72:	f000 f90d 	bl	8007090 <__retarget_lock_release_recursive>
 8006e76:	e7d9      	b.n	8006e2c <_fflush_r+0xc>
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <_fflush_r+0x70>)
 8006e7a:	429c      	cmp	r4, r3
 8006e7c:	d101      	bne.n	8006e82 <_fflush_r+0x62>
 8006e7e:	68ac      	ldr	r4, [r5, #8]
 8006e80:	e7df      	b.n	8006e42 <_fflush_r+0x22>
 8006e82:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <_fflush_r+0x74>)
 8006e84:	429c      	cmp	r4, r3
 8006e86:	bf08      	it	eq
 8006e88:	68ec      	ldreq	r4, [r5, #12]
 8006e8a:	e7da      	b.n	8006e42 <_fflush_r+0x22>
 8006e8c:	080084bc 	.word	0x080084bc
 8006e90:	080084dc 	.word	0x080084dc
 8006e94:	0800849c 	.word	0x0800849c

08006e98 <std>:
 8006e98:	2300      	movs	r3, #0
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ea6:	6083      	str	r3, [r0, #8]
 8006ea8:	8181      	strh	r1, [r0, #12]
 8006eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8006eac:	81c2      	strh	r2, [r0, #14]
 8006eae:	6183      	str	r3, [r0, #24]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	2208      	movs	r2, #8
 8006eb4:	305c      	adds	r0, #92	; 0x5c
 8006eb6:	f7fe fad3 	bl	8005460 <memset>
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <std+0x38>)
 8006ebc:	6263      	str	r3, [r4, #36]	; 0x24
 8006ebe:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <std+0x3c>)
 8006ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <std+0x40>)
 8006ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ec6:	4b05      	ldr	r3, [pc, #20]	; (8006edc <std+0x44>)
 8006ec8:	6224      	str	r4, [r4, #32]
 8006eca:	6323      	str	r3, [r4, #48]	; 0x30
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	08007fed 	.word	0x08007fed
 8006ed4:	0800800f 	.word	0x0800800f
 8006ed8:	08008047 	.word	0x08008047
 8006edc:	0800806b 	.word	0x0800806b

08006ee0 <_cleanup_r>:
 8006ee0:	4901      	ldr	r1, [pc, #4]	; (8006ee8 <_cleanup_r+0x8>)
 8006ee2:	f000 b8af 	b.w	8007044 <_fwalk_reent>
 8006ee6:	bf00      	nop
 8006ee8:	08006e21 	.word	0x08006e21

08006eec <__sfmoreglue>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	2268      	movs	r2, #104	; 0x68
 8006ef0:	1e4d      	subs	r5, r1, #1
 8006ef2:	4355      	muls	r5, r2
 8006ef4:	460e      	mov	r6, r1
 8006ef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006efa:	f000 fd3d 	bl	8007978 <_malloc_r>
 8006efe:	4604      	mov	r4, r0
 8006f00:	b140      	cbz	r0, 8006f14 <__sfmoreglue+0x28>
 8006f02:	2100      	movs	r1, #0
 8006f04:	e9c0 1600 	strd	r1, r6, [r0]
 8006f08:	300c      	adds	r0, #12
 8006f0a:	60a0      	str	r0, [r4, #8]
 8006f0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f10:	f7fe faa6 	bl	8005460 <memset>
 8006f14:	4620      	mov	r0, r4
 8006f16:	bd70      	pop	{r4, r5, r6, pc}

08006f18 <__sfp_lock_acquire>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__sfp_lock_acquire+0x8>)
 8006f1a:	f000 b8b8 	b.w	800708e <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	200007f5 	.word	0x200007f5

08006f24 <__sfp_lock_release>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__sfp_lock_release+0x8>)
 8006f26:	f000 b8b3 	b.w	8007090 <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	200007f5 	.word	0x200007f5

08006f30 <__sinit_lock_acquire>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__sinit_lock_acquire+0x8>)
 8006f32:	f000 b8ac 	b.w	800708e <__retarget_lock_acquire_recursive>
 8006f36:	bf00      	nop
 8006f38:	200007f6 	.word	0x200007f6

08006f3c <__sinit_lock_release>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	; (8006f44 <__sinit_lock_release+0x8>)
 8006f3e:	f000 b8a7 	b.w	8007090 <__retarget_lock_release_recursive>
 8006f42:	bf00      	nop
 8006f44:	200007f6 	.word	0x200007f6

08006f48 <__sinit>:
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	f7ff fff0 	bl	8006f30 <__sinit_lock_acquire>
 8006f50:	69a3      	ldr	r3, [r4, #24]
 8006f52:	b11b      	cbz	r3, 8006f5c <__sinit+0x14>
 8006f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f58:	f7ff bff0 	b.w	8006f3c <__sinit_lock_release>
 8006f5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f60:	6523      	str	r3, [r4, #80]	; 0x50
 8006f62:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <__sinit+0x68>)
 8006f64:	4a13      	ldr	r2, [pc, #76]	; (8006fb4 <__sinit+0x6c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	bf04      	itt	eq
 8006f6e:	2301      	moveq	r3, #1
 8006f70:	61a3      	streq	r3, [r4, #24]
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 f820 	bl	8006fb8 <__sfp>
 8006f78:	6060      	str	r0, [r4, #4]
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 f81c 	bl	8006fb8 <__sfp>
 8006f80:	60a0      	str	r0, [r4, #8]
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f818 	bl	8006fb8 <__sfp>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	60e0      	str	r0, [r4, #12]
 8006f8c:	2104      	movs	r1, #4
 8006f8e:	6860      	ldr	r0, [r4, #4]
 8006f90:	f7ff ff82 	bl	8006e98 <std>
 8006f94:	68a0      	ldr	r0, [r4, #8]
 8006f96:	2201      	movs	r2, #1
 8006f98:	2109      	movs	r1, #9
 8006f9a:	f7ff ff7d 	bl	8006e98 <std>
 8006f9e:	68e0      	ldr	r0, [r4, #12]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	2112      	movs	r1, #18
 8006fa4:	f7ff ff78 	bl	8006e98 <std>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	61a3      	str	r3, [r4, #24]
 8006fac:	e7d2      	b.n	8006f54 <__sinit+0xc>
 8006fae:	bf00      	nop
 8006fb0:	080083d4 	.word	0x080083d4
 8006fb4:	08006ee1 	.word	0x08006ee1

08006fb8 <__sfp>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	4607      	mov	r7, r0
 8006fbc:	f7ff ffac 	bl	8006f18 <__sfp_lock_acquire>
 8006fc0:	4b1e      	ldr	r3, [pc, #120]	; (800703c <__sfp+0x84>)
 8006fc2:	681e      	ldr	r6, [r3, #0]
 8006fc4:	69b3      	ldr	r3, [r6, #24]
 8006fc6:	b913      	cbnz	r3, 8006fce <__sfp+0x16>
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7ff ffbd 	bl	8006f48 <__sinit>
 8006fce:	3648      	adds	r6, #72	; 0x48
 8006fd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	d503      	bpl.n	8006fe0 <__sfp+0x28>
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	b30b      	cbz	r3, 8007020 <__sfp+0x68>
 8006fdc:	6836      	ldr	r6, [r6, #0]
 8006fde:	e7f7      	b.n	8006fd0 <__sfp+0x18>
 8006fe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fe4:	b9d5      	cbnz	r5, 800701c <__sfp+0x64>
 8006fe6:	4b16      	ldr	r3, [pc, #88]	; (8007040 <__sfp+0x88>)
 8006fe8:	60e3      	str	r3, [r4, #12]
 8006fea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fee:	6665      	str	r5, [r4, #100]	; 0x64
 8006ff0:	f000 f84c 	bl	800708c <__retarget_lock_init_recursive>
 8006ff4:	f7ff ff96 	bl	8006f24 <__sfp_lock_release>
 8006ff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ffc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007000:	6025      	str	r5, [r4, #0]
 8007002:	61a5      	str	r5, [r4, #24]
 8007004:	2208      	movs	r2, #8
 8007006:	4629      	mov	r1, r5
 8007008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800700c:	f7fe fa28 	bl	8005460 <memset>
 8007010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007018:	4620      	mov	r0, r4
 800701a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800701c:	3468      	adds	r4, #104	; 0x68
 800701e:	e7d9      	b.n	8006fd4 <__sfp+0x1c>
 8007020:	2104      	movs	r1, #4
 8007022:	4638      	mov	r0, r7
 8007024:	f7ff ff62 	bl	8006eec <__sfmoreglue>
 8007028:	4604      	mov	r4, r0
 800702a:	6030      	str	r0, [r6, #0]
 800702c:	2800      	cmp	r0, #0
 800702e:	d1d5      	bne.n	8006fdc <__sfp+0x24>
 8007030:	f7ff ff78 	bl	8006f24 <__sfp_lock_release>
 8007034:	230c      	movs	r3, #12
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	e7ee      	b.n	8007018 <__sfp+0x60>
 800703a:	bf00      	nop
 800703c:	080083d4 	.word	0x080083d4
 8007040:	ffff0001 	.word	0xffff0001

08007044 <_fwalk_reent>:
 8007044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007048:	4606      	mov	r6, r0
 800704a:	4688      	mov	r8, r1
 800704c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007050:	2700      	movs	r7, #0
 8007052:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007056:	f1b9 0901 	subs.w	r9, r9, #1
 800705a:	d505      	bpl.n	8007068 <_fwalk_reent+0x24>
 800705c:	6824      	ldr	r4, [r4, #0]
 800705e:	2c00      	cmp	r4, #0
 8007060:	d1f7      	bne.n	8007052 <_fwalk_reent+0xe>
 8007062:	4638      	mov	r0, r7
 8007064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007068:	89ab      	ldrh	r3, [r5, #12]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d907      	bls.n	800707e <_fwalk_reent+0x3a>
 800706e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007072:	3301      	adds	r3, #1
 8007074:	d003      	beq.n	800707e <_fwalk_reent+0x3a>
 8007076:	4629      	mov	r1, r5
 8007078:	4630      	mov	r0, r6
 800707a:	47c0      	blx	r8
 800707c:	4307      	orrs	r7, r0
 800707e:	3568      	adds	r5, #104	; 0x68
 8007080:	e7e9      	b.n	8007056 <_fwalk_reent+0x12>
	...

08007084 <_localeconv_r>:
 8007084:	4800      	ldr	r0, [pc, #0]	; (8007088 <_localeconv_r+0x4>)
 8007086:	4770      	bx	lr
 8007088:	20000160 	.word	0x20000160

0800708c <__retarget_lock_init_recursive>:
 800708c:	4770      	bx	lr

0800708e <__retarget_lock_acquire_recursive>:
 800708e:	4770      	bx	lr

08007090 <__retarget_lock_release_recursive>:
 8007090:	4770      	bx	lr

08007092 <__swhatbuf_r>:
 8007092:	b570      	push	{r4, r5, r6, lr}
 8007094:	460e      	mov	r6, r1
 8007096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709a:	2900      	cmp	r1, #0
 800709c:	b096      	sub	sp, #88	; 0x58
 800709e:	4614      	mov	r4, r2
 80070a0:	461d      	mov	r5, r3
 80070a2:	da08      	bge.n	80070b6 <__swhatbuf_r+0x24>
 80070a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	602a      	str	r2, [r5, #0]
 80070ac:	061a      	lsls	r2, r3, #24
 80070ae:	d410      	bmi.n	80070d2 <__swhatbuf_r+0x40>
 80070b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070b4:	e00e      	b.n	80070d4 <__swhatbuf_r+0x42>
 80070b6:	466a      	mov	r2, sp
 80070b8:	f001 f82e 	bl	8008118 <_fstat_r>
 80070bc:	2800      	cmp	r0, #0
 80070be:	dbf1      	blt.n	80070a4 <__swhatbuf_r+0x12>
 80070c0:	9a01      	ldr	r2, [sp, #4]
 80070c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070ca:	425a      	negs	r2, r3
 80070cc:	415a      	adcs	r2, r3
 80070ce:	602a      	str	r2, [r5, #0]
 80070d0:	e7ee      	b.n	80070b0 <__swhatbuf_r+0x1e>
 80070d2:	2340      	movs	r3, #64	; 0x40
 80070d4:	2000      	movs	r0, #0
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	b016      	add	sp, #88	; 0x58
 80070da:	bd70      	pop	{r4, r5, r6, pc}

080070dc <__smakebuf_r>:
 80070dc:	898b      	ldrh	r3, [r1, #12]
 80070de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070e0:	079d      	lsls	r5, r3, #30
 80070e2:	4606      	mov	r6, r0
 80070e4:	460c      	mov	r4, r1
 80070e6:	d507      	bpl.n	80070f8 <__smakebuf_r+0x1c>
 80070e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	2301      	movs	r3, #1
 80070f2:	6163      	str	r3, [r4, #20]
 80070f4:	b002      	add	sp, #8
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	ab01      	add	r3, sp, #4
 80070fa:	466a      	mov	r2, sp
 80070fc:	f7ff ffc9 	bl	8007092 <__swhatbuf_r>
 8007100:	9900      	ldr	r1, [sp, #0]
 8007102:	4605      	mov	r5, r0
 8007104:	4630      	mov	r0, r6
 8007106:	f000 fc37 	bl	8007978 <_malloc_r>
 800710a:	b948      	cbnz	r0, 8007120 <__smakebuf_r+0x44>
 800710c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007110:	059a      	lsls	r2, r3, #22
 8007112:	d4ef      	bmi.n	80070f4 <__smakebuf_r+0x18>
 8007114:	f023 0303 	bic.w	r3, r3, #3
 8007118:	f043 0302 	orr.w	r3, r3, #2
 800711c:	81a3      	strh	r3, [r4, #12]
 800711e:	e7e3      	b.n	80070e8 <__smakebuf_r+0xc>
 8007120:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <__smakebuf_r+0x7c>)
 8007122:	62b3      	str	r3, [r6, #40]	; 0x28
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	6020      	str	r0, [r4, #0]
 8007128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712c:	81a3      	strh	r3, [r4, #12]
 800712e:	9b00      	ldr	r3, [sp, #0]
 8007130:	6163      	str	r3, [r4, #20]
 8007132:	9b01      	ldr	r3, [sp, #4]
 8007134:	6120      	str	r0, [r4, #16]
 8007136:	b15b      	cbz	r3, 8007150 <__smakebuf_r+0x74>
 8007138:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800713c:	4630      	mov	r0, r6
 800713e:	f000 fffd 	bl	800813c <_isatty_r>
 8007142:	b128      	cbz	r0, 8007150 <__smakebuf_r+0x74>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	89a0      	ldrh	r0, [r4, #12]
 8007152:	4305      	orrs	r5, r0
 8007154:	81a5      	strh	r5, [r4, #12]
 8007156:	e7cd      	b.n	80070f4 <__smakebuf_r+0x18>
 8007158:	08006ee1 	.word	0x08006ee1

0800715c <malloc>:
 800715c:	4b02      	ldr	r3, [pc, #8]	; (8007168 <malloc+0xc>)
 800715e:	4601      	mov	r1, r0
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	f000 bc09 	b.w	8007978 <_malloc_r>
 8007166:	bf00      	nop
 8007168:	2000000c 	.word	0x2000000c

0800716c <_Balloc>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007170:	4604      	mov	r4, r0
 8007172:	460d      	mov	r5, r1
 8007174:	b976      	cbnz	r6, 8007194 <_Balloc+0x28>
 8007176:	2010      	movs	r0, #16
 8007178:	f7ff fff0 	bl	800715c <malloc>
 800717c:	4602      	mov	r2, r0
 800717e:	6260      	str	r0, [r4, #36]	; 0x24
 8007180:	b920      	cbnz	r0, 800718c <_Balloc+0x20>
 8007182:	4b18      	ldr	r3, [pc, #96]	; (80071e4 <_Balloc+0x78>)
 8007184:	4818      	ldr	r0, [pc, #96]	; (80071e8 <_Balloc+0x7c>)
 8007186:	2166      	movs	r1, #102	; 0x66
 8007188:	f000 ff86 	bl	8008098 <__assert_func>
 800718c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007190:	6006      	str	r6, [r0, #0]
 8007192:	60c6      	str	r6, [r0, #12]
 8007194:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007196:	68f3      	ldr	r3, [r6, #12]
 8007198:	b183      	cbz	r3, 80071bc <_Balloc+0x50>
 800719a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071a2:	b9b8      	cbnz	r0, 80071d4 <_Balloc+0x68>
 80071a4:	2101      	movs	r1, #1
 80071a6:	fa01 f605 	lsl.w	r6, r1, r5
 80071aa:	1d72      	adds	r2, r6, #5
 80071ac:	0092      	lsls	r2, r2, #2
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 fb60 	bl	8007874 <_calloc_r>
 80071b4:	b160      	cbz	r0, 80071d0 <_Balloc+0x64>
 80071b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071ba:	e00e      	b.n	80071da <_Balloc+0x6e>
 80071bc:	2221      	movs	r2, #33	; 0x21
 80071be:	2104      	movs	r1, #4
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fb57 	bl	8007874 <_calloc_r>
 80071c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c8:	60f0      	str	r0, [r6, #12]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e4      	bne.n	800719a <_Balloc+0x2e>
 80071d0:	2000      	movs	r0, #0
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	6802      	ldr	r2, [r0, #0]
 80071d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071da:	2300      	movs	r3, #0
 80071dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071e0:	e7f7      	b.n	80071d2 <_Balloc+0x66>
 80071e2:	bf00      	nop
 80071e4:	08008419 	.word	0x08008419
 80071e8:	080084fc 	.word	0x080084fc

080071ec <_Bfree>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071f0:	4605      	mov	r5, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	b976      	cbnz	r6, 8007214 <_Bfree+0x28>
 80071f6:	2010      	movs	r0, #16
 80071f8:	f7ff ffb0 	bl	800715c <malloc>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6268      	str	r0, [r5, #36]	; 0x24
 8007200:	b920      	cbnz	r0, 800720c <_Bfree+0x20>
 8007202:	4b09      	ldr	r3, [pc, #36]	; (8007228 <_Bfree+0x3c>)
 8007204:	4809      	ldr	r0, [pc, #36]	; (800722c <_Bfree+0x40>)
 8007206:	218a      	movs	r1, #138	; 0x8a
 8007208:	f000 ff46 	bl	8008098 <__assert_func>
 800720c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007210:	6006      	str	r6, [r0, #0]
 8007212:	60c6      	str	r6, [r0, #12]
 8007214:	b13c      	cbz	r4, 8007226 <_Bfree+0x3a>
 8007216:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007218:	6862      	ldr	r2, [r4, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007220:	6021      	str	r1, [r4, #0]
 8007222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	08008419 	.word	0x08008419
 800722c:	080084fc 	.word	0x080084fc

08007230 <__multadd>:
 8007230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007234:	690d      	ldr	r5, [r1, #16]
 8007236:	4607      	mov	r7, r0
 8007238:	460c      	mov	r4, r1
 800723a:	461e      	mov	r6, r3
 800723c:	f101 0c14 	add.w	ip, r1, #20
 8007240:	2000      	movs	r0, #0
 8007242:	f8dc 3000 	ldr.w	r3, [ip]
 8007246:	b299      	uxth	r1, r3
 8007248:	fb02 6101 	mla	r1, r2, r1, r6
 800724c:	0c1e      	lsrs	r6, r3, #16
 800724e:	0c0b      	lsrs	r3, r1, #16
 8007250:	fb02 3306 	mla	r3, r2, r6, r3
 8007254:	b289      	uxth	r1, r1
 8007256:	3001      	adds	r0, #1
 8007258:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800725c:	4285      	cmp	r5, r0
 800725e:	f84c 1b04 	str.w	r1, [ip], #4
 8007262:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007266:	dcec      	bgt.n	8007242 <__multadd+0x12>
 8007268:	b30e      	cbz	r6, 80072ae <__multadd+0x7e>
 800726a:	68a3      	ldr	r3, [r4, #8]
 800726c:	42ab      	cmp	r3, r5
 800726e:	dc19      	bgt.n	80072a4 <__multadd+0x74>
 8007270:	6861      	ldr	r1, [r4, #4]
 8007272:	4638      	mov	r0, r7
 8007274:	3101      	adds	r1, #1
 8007276:	f7ff ff79 	bl	800716c <_Balloc>
 800727a:	4680      	mov	r8, r0
 800727c:	b928      	cbnz	r0, 800728a <__multadd+0x5a>
 800727e:	4602      	mov	r2, r0
 8007280:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <__multadd+0x84>)
 8007282:	480d      	ldr	r0, [pc, #52]	; (80072b8 <__multadd+0x88>)
 8007284:	21b5      	movs	r1, #181	; 0xb5
 8007286:	f000 ff07 	bl	8008098 <__assert_func>
 800728a:	6922      	ldr	r2, [r4, #16]
 800728c:	3202      	adds	r2, #2
 800728e:	f104 010c 	add.w	r1, r4, #12
 8007292:	0092      	lsls	r2, r2, #2
 8007294:	300c      	adds	r0, #12
 8007296:	f7fe f8d5 	bl	8005444 <memcpy>
 800729a:	4621      	mov	r1, r4
 800729c:	4638      	mov	r0, r7
 800729e:	f7ff ffa5 	bl	80071ec <_Bfree>
 80072a2:	4644      	mov	r4, r8
 80072a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072a8:	3501      	adds	r5, #1
 80072aa:	615e      	str	r6, [r3, #20]
 80072ac:	6125      	str	r5, [r4, #16]
 80072ae:	4620      	mov	r0, r4
 80072b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b4:	0800848b 	.word	0x0800848b
 80072b8:	080084fc 	.word	0x080084fc

080072bc <__hi0bits>:
 80072bc:	0c03      	lsrs	r3, r0, #16
 80072be:	041b      	lsls	r3, r3, #16
 80072c0:	b9d3      	cbnz	r3, 80072f8 <__hi0bits+0x3c>
 80072c2:	0400      	lsls	r0, r0, #16
 80072c4:	2310      	movs	r3, #16
 80072c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072ca:	bf04      	itt	eq
 80072cc:	0200      	lsleq	r0, r0, #8
 80072ce:	3308      	addeq	r3, #8
 80072d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072d4:	bf04      	itt	eq
 80072d6:	0100      	lsleq	r0, r0, #4
 80072d8:	3304      	addeq	r3, #4
 80072da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80072de:	bf04      	itt	eq
 80072e0:	0080      	lsleq	r0, r0, #2
 80072e2:	3302      	addeq	r3, #2
 80072e4:	2800      	cmp	r0, #0
 80072e6:	db05      	blt.n	80072f4 <__hi0bits+0x38>
 80072e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80072ec:	f103 0301 	add.w	r3, r3, #1
 80072f0:	bf08      	it	eq
 80072f2:	2320      	moveq	r3, #32
 80072f4:	4618      	mov	r0, r3
 80072f6:	4770      	bx	lr
 80072f8:	2300      	movs	r3, #0
 80072fa:	e7e4      	b.n	80072c6 <__hi0bits+0xa>

080072fc <__lo0bits>:
 80072fc:	6803      	ldr	r3, [r0, #0]
 80072fe:	f013 0207 	ands.w	r2, r3, #7
 8007302:	4601      	mov	r1, r0
 8007304:	d00b      	beq.n	800731e <__lo0bits+0x22>
 8007306:	07da      	lsls	r2, r3, #31
 8007308:	d423      	bmi.n	8007352 <__lo0bits+0x56>
 800730a:	0798      	lsls	r0, r3, #30
 800730c:	bf49      	itett	mi
 800730e:	085b      	lsrmi	r3, r3, #1
 8007310:	089b      	lsrpl	r3, r3, #2
 8007312:	2001      	movmi	r0, #1
 8007314:	600b      	strmi	r3, [r1, #0]
 8007316:	bf5c      	itt	pl
 8007318:	600b      	strpl	r3, [r1, #0]
 800731a:	2002      	movpl	r0, #2
 800731c:	4770      	bx	lr
 800731e:	b298      	uxth	r0, r3
 8007320:	b9a8      	cbnz	r0, 800734e <__lo0bits+0x52>
 8007322:	0c1b      	lsrs	r3, r3, #16
 8007324:	2010      	movs	r0, #16
 8007326:	b2da      	uxtb	r2, r3
 8007328:	b90a      	cbnz	r2, 800732e <__lo0bits+0x32>
 800732a:	3008      	adds	r0, #8
 800732c:	0a1b      	lsrs	r3, r3, #8
 800732e:	071a      	lsls	r2, r3, #28
 8007330:	bf04      	itt	eq
 8007332:	091b      	lsreq	r3, r3, #4
 8007334:	3004      	addeq	r0, #4
 8007336:	079a      	lsls	r2, r3, #30
 8007338:	bf04      	itt	eq
 800733a:	089b      	lsreq	r3, r3, #2
 800733c:	3002      	addeq	r0, #2
 800733e:	07da      	lsls	r2, r3, #31
 8007340:	d403      	bmi.n	800734a <__lo0bits+0x4e>
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	f100 0001 	add.w	r0, r0, #1
 8007348:	d005      	beq.n	8007356 <__lo0bits+0x5a>
 800734a:	600b      	str	r3, [r1, #0]
 800734c:	4770      	bx	lr
 800734e:	4610      	mov	r0, r2
 8007350:	e7e9      	b.n	8007326 <__lo0bits+0x2a>
 8007352:	2000      	movs	r0, #0
 8007354:	4770      	bx	lr
 8007356:	2020      	movs	r0, #32
 8007358:	4770      	bx	lr
	...

0800735c <__i2b>:
 800735c:	b510      	push	{r4, lr}
 800735e:	460c      	mov	r4, r1
 8007360:	2101      	movs	r1, #1
 8007362:	f7ff ff03 	bl	800716c <_Balloc>
 8007366:	4602      	mov	r2, r0
 8007368:	b928      	cbnz	r0, 8007376 <__i2b+0x1a>
 800736a:	4b05      	ldr	r3, [pc, #20]	; (8007380 <__i2b+0x24>)
 800736c:	4805      	ldr	r0, [pc, #20]	; (8007384 <__i2b+0x28>)
 800736e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007372:	f000 fe91 	bl	8008098 <__assert_func>
 8007376:	2301      	movs	r3, #1
 8007378:	6144      	str	r4, [r0, #20]
 800737a:	6103      	str	r3, [r0, #16]
 800737c:	bd10      	pop	{r4, pc}
 800737e:	bf00      	nop
 8007380:	0800848b 	.word	0x0800848b
 8007384:	080084fc 	.word	0x080084fc

08007388 <__multiply>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	4691      	mov	r9, r2
 800738e:	690a      	ldr	r2, [r1, #16]
 8007390:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007394:	429a      	cmp	r2, r3
 8007396:	bfb8      	it	lt
 8007398:	460b      	movlt	r3, r1
 800739a:	460c      	mov	r4, r1
 800739c:	bfbc      	itt	lt
 800739e:	464c      	movlt	r4, r9
 80073a0:	4699      	movlt	r9, r3
 80073a2:	6927      	ldr	r7, [r4, #16]
 80073a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073a8:	68a3      	ldr	r3, [r4, #8]
 80073aa:	6861      	ldr	r1, [r4, #4]
 80073ac:	eb07 060a 	add.w	r6, r7, sl
 80073b0:	42b3      	cmp	r3, r6
 80073b2:	b085      	sub	sp, #20
 80073b4:	bfb8      	it	lt
 80073b6:	3101      	addlt	r1, #1
 80073b8:	f7ff fed8 	bl	800716c <_Balloc>
 80073bc:	b930      	cbnz	r0, 80073cc <__multiply+0x44>
 80073be:	4602      	mov	r2, r0
 80073c0:	4b44      	ldr	r3, [pc, #272]	; (80074d4 <__multiply+0x14c>)
 80073c2:	4845      	ldr	r0, [pc, #276]	; (80074d8 <__multiply+0x150>)
 80073c4:	f240 115d 	movw	r1, #349	; 0x15d
 80073c8:	f000 fe66 	bl	8008098 <__assert_func>
 80073cc:	f100 0514 	add.w	r5, r0, #20
 80073d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073d4:	462b      	mov	r3, r5
 80073d6:	2200      	movs	r2, #0
 80073d8:	4543      	cmp	r3, r8
 80073da:	d321      	bcc.n	8007420 <__multiply+0x98>
 80073dc:	f104 0314 	add.w	r3, r4, #20
 80073e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073e4:	f109 0314 	add.w	r3, r9, #20
 80073e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073ec:	9202      	str	r2, [sp, #8]
 80073ee:	1b3a      	subs	r2, r7, r4
 80073f0:	3a15      	subs	r2, #21
 80073f2:	f022 0203 	bic.w	r2, r2, #3
 80073f6:	3204      	adds	r2, #4
 80073f8:	f104 0115 	add.w	r1, r4, #21
 80073fc:	428f      	cmp	r7, r1
 80073fe:	bf38      	it	cc
 8007400:	2204      	movcc	r2, #4
 8007402:	9201      	str	r2, [sp, #4]
 8007404:	9a02      	ldr	r2, [sp, #8]
 8007406:	9303      	str	r3, [sp, #12]
 8007408:	429a      	cmp	r2, r3
 800740a:	d80c      	bhi.n	8007426 <__multiply+0x9e>
 800740c:	2e00      	cmp	r6, #0
 800740e:	dd03      	ble.n	8007418 <__multiply+0x90>
 8007410:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007414:	2b00      	cmp	r3, #0
 8007416:	d05a      	beq.n	80074ce <__multiply+0x146>
 8007418:	6106      	str	r6, [r0, #16]
 800741a:	b005      	add	sp, #20
 800741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007420:	f843 2b04 	str.w	r2, [r3], #4
 8007424:	e7d8      	b.n	80073d8 <__multiply+0x50>
 8007426:	f8b3 a000 	ldrh.w	sl, [r3]
 800742a:	f1ba 0f00 	cmp.w	sl, #0
 800742e:	d024      	beq.n	800747a <__multiply+0xf2>
 8007430:	f104 0e14 	add.w	lr, r4, #20
 8007434:	46a9      	mov	r9, r5
 8007436:	f04f 0c00 	mov.w	ip, #0
 800743a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800743e:	f8d9 1000 	ldr.w	r1, [r9]
 8007442:	fa1f fb82 	uxth.w	fp, r2
 8007446:	b289      	uxth	r1, r1
 8007448:	fb0a 110b 	mla	r1, sl, fp, r1
 800744c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007450:	f8d9 2000 	ldr.w	r2, [r9]
 8007454:	4461      	add	r1, ip
 8007456:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800745a:	fb0a c20b 	mla	r2, sl, fp, ip
 800745e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007462:	b289      	uxth	r1, r1
 8007464:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007468:	4577      	cmp	r7, lr
 800746a:	f849 1b04 	str.w	r1, [r9], #4
 800746e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007472:	d8e2      	bhi.n	800743a <__multiply+0xb2>
 8007474:	9a01      	ldr	r2, [sp, #4]
 8007476:	f845 c002 	str.w	ip, [r5, r2]
 800747a:	9a03      	ldr	r2, [sp, #12]
 800747c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007480:	3304      	adds	r3, #4
 8007482:	f1b9 0f00 	cmp.w	r9, #0
 8007486:	d020      	beq.n	80074ca <__multiply+0x142>
 8007488:	6829      	ldr	r1, [r5, #0]
 800748a:	f104 0c14 	add.w	ip, r4, #20
 800748e:	46ae      	mov	lr, r5
 8007490:	f04f 0a00 	mov.w	sl, #0
 8007494:	f8bc b000 	ldrh.w	fp, [ip]
 8007498:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800749c:	fb09 220b 	mla	r2, r9, fp, r2
 80074a0:	4492      	add	sl, r2
 80074a2:	b289      	uxth	r1, r1
 80074a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074a8:	f84e 1b04 	str.w	r1, [lr], #4
 80074ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074b0:	f8be 1000 	ldrh.w	r1, [lr]
 80074b4:	0c12      	lsrs	r2, r2, #16
 80074b6:	fb09 1102 	mla	r1, r9, r2, r1
 80074ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074be:	4567      	cmp	r7, ip
 80074c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074c4:	d8e6      	bhi.n	8007494 <__multiply+0x10c>
 80074c6:	9a01      	ldr	r2, [sp, #4]
 80074c8:	50a9      	str	r1, [r5, r2]
 80074ca:	3504      	adds	r5, #4
 80074cc:	e79a      	b.n	8007404 <__multiply+0x7c>
 80074ce:	3e01      	subs	r6, #1
 80074d0:	e79c      	b.n	800740c <__multiply+0x84>
 80074d2:	bf00      	nop
 80074d4:	0800848b 	.word	0x0800848b
 80074d8:	080084fc 	.word	0x080084fc

080074dc <__pow5mult>:
 80074dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e0:	4615      	mov	r5, r2
 80074e2:	f012 0203 	ands.w	r2, r2, #3
 80074e6:	4606      	mov	r6, r0
 80074e8:	460f      	mov	r7, r1
 80074ea:	d007      	beq.n	80074fc <__pow5mult+0x20>
 80074ec:	4c25      	ldr	r4, [pc, #148]	; (8007584 <__pow5mult+0xa8>)
 80074ee:	3a01      	subs	r2, #1
 80074f0:	2300      	movs	r3, #0
 80074f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074f6:	f7ff fe9b 	bl	8007230 <__multadd>
 80074fa:	4607      	mov	r7, r0
 80074fc:	10ad      	asrs	r5, r5, #2
 80074fe:	d03d      	beq.n	800757c <__pow5mult+0xa0>
 8007500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007502:	b97c      	cbnz	r4, 8007524 <__pow5mult+0x48>
 8007504:	2010      	movs	r0, #16
 8007506:	f7ff fe29 	bl	800715c <malloc>
 800750a:	4602      	mov	r2, r0
 800750c:	6270      	str	r0, [r6, #36]	; 0x24
 800750e:	b928      	cbnz	r0, 800751c <__pow5mult+0x40>
 8007510:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <__pow5mult+0xac>)
 8007512:	481e      	ldr	r0, [pc, #120]	; (800758c <__pow5mult+0xb0>)
 8007514:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007518:	f000 fdbe 	bl	8008098 <__assert_func>
 800751c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007520:	6004      	str	r4, [r0, #0]
 8007522:	60c4      	str	r4, [r0, #12]
 8007524:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800752c:	b94c      	cbnz	r4, 8007542 <__pow5mult+0x66>
 800752e:	f240 2171 	movw	r1, #625	; 0x271
 8007532:	4630      	mov	r0, r6
 8007534:	f7ff ff12 	bl	800735c <__i2b>
 8007538:	2300      	movs	r3, #0
 800753a:	f8c8 0008 	str.w	r0, [r8, #8]
 800753e:	4604      	mov	r4, r0
 8007540:	6003      	str	r3, [r0, #0]
 8007542:	f04f 0900 	mov.w	r9, #0
 8007546:	07eb      	lsls	r3, r5, #31
 8007548:	d50a      	bpl.n	8007560 <__pow5mult+0x84>
 800754a:	4639      	mov	r1, r7
 800754c:	4622      	mov	r2, r4
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ff1a 	bl	8007388 <__multiply>
 8007554:	4639      	mov	r1, r7
 8007556:	4680      	mov	r8, r0
 8007558:	4630      	mov	r0, r6
 800755a:	f7ff fe47 	bl	80071ec <_Bfree>
 800755e:	4647      	mov	r7, r8
 8007560:	106d      	asrs	r5, r5, #1
 8007562:	d00b      	beq.n	800757c <__pow5mult+0xa0>
 8007564:	6820      	ldr	r0, [r4, #0]
 8007566:	b938      	cbnz	r0, 8007578 <__pow5mult+0x9c>
 8007568:	4622      	mov	r2, r4
 800756a:	4621      	mov	r1, r4
 800756c:	4630      	mov	r0, r6
 800756e:	f7ff ff0b 	bl	8007388 <__multiply>
 8007572:	6020      	str	r0, [r4, #0]
 8007574:	f8c0 9000 	str.w	r9, [r0]
 8007578:	4604      	mov	r4, r0
 800757a:	e7e4      	b.n	8007546 <__pow5mult+0x6a>
 800757c:	4638      	mov	r0, r7
 800757e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007582:	bf00      	nop
 8007584:	08008648 	.word	0x08008648
 8007588:	08008419 	.word	0x08008419
 800758c:	080084fc 	.word	0x080084fc

08007590 <__lshift>:
 8007590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007594:	460c      	mov	r4, r1
 8007596:	6849      	ldr	r1, [r1, #4]
 8007598:	6923      	ldr	r3, [r4, #16]
 800759a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800759e:	68a3      	ldr	r3, [r4, #8]
 80075a0:	4607      	mov	r7, r0
 80075a2:	4691      	mov	r9, r2
 80075a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075a8:	f108 0601 	add.w	r6, r8, #1
 80075ac:	42b3      	cmp	r3, r6
 80075ae:	db0b      	blt.n	80075c8 <__lshift+0x38>
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7ff fddb 	bl	800716c <_Balloc>
 80075b6:	4605      	mov	r5, r0
 80075b8:	b948      	cbnz	r0, 80075ce <__lshift+0x3e>
 80075ba:	4602      	mov	r2, r0
 80075bc:	4b2a      	ldr	r3, [pc, #168]	; (8007668 <__lshift+0xd8>)
 80075be:	482b      	ldr	r0, [pc, #172]	; (800766c <__lshift+0xdc>)
 80075c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075c4:	f000 fd68 	bl	8008098 <__assert_func>
 80075c8:	3101      	adds	r1, #1
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	e7ee      	b.n	80075ac <__lshift+0x1c>
 80075ce:	2300      	movs	r3, #0
 80075d0:	f100 0114 	add.w	r1, r0, #20
 80075d4:	f100 0210 	add.w	r2, r0, #16
 80075d8:	4618      	mov	r0, r3
 80075da:	4553      	cmp	r3, sl
 80075dc:	db37      	blt.n	800764e <__lshift+0xbe>
 80075de:	6920      	ldr	r0, [r4, #16]
 80075e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075e4:	f104 0314 	add.w	r3, r4, #20
 80075e8:	f019 091f 	ands.w	r9, r9, #31
 80075ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80075f4:	d02f      	beq.n	8007656 <__lshift+0xc6>
 80075f6:	f1c9 0e20 	rsb	lr, r9, #32
 80075fa:	468a      	mov	sl, r1
 80075fc:	f04f 0c00 	mov.w	ip, #0
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	fa02 f209 	lsl.w	r2, r2, r9
 8007606:	ea42 020c 	orr.w	r2, r2, ip
 800760a:	f84a 2b04 	str.w	r2, [sl], #4
 800760e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007612:	4298      	cmp	r0, r3
 8007614:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007618:	d8f2      	bhi.n	8007600 <__lshift+0x70>
 800761a:	1b03      	subs	r3, r0, r4
 800761c:	3b15      	subs	r3, #21
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	3304      	adds	r3, #4
 8007624:	f104 0215 	add.w	r2, r4, #21
 8007628:	4290      	cmp	r0, r2
 800762a:	bf38      	it	cc
 800762c:	2304      	movcc	r3, #4
 800762e:	f841 c003 	str.w	ip, [r1, r3]
 8007632:	f1bc 0f00 	cmp.w	ip, #0
 8007636:	d001      	beq.n	800763c <__lshift+0xac>
 8007638:	f108 0602 	add.w	r6, r8, #2
 800763c:	3e01      	subs	r6, #1
 800763e:	4638      	mov	r0, r7
 8007640:	612e      	str	r6, [r5, #16]
 8007642:	4621      	mov	r1, r4
 8007644:	f7ff fdd2 	bl	80071ec <_Bfree>
 8007648:	4628      	mov	r0, r5
 800764a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007652:	3301      	adds	r3, #1
 8007654:	e7c1      	b.n	80075da <__lshift+0x4a>
 8007656:	3904      	subs	r1, #4
 8007658:	f853 2b04 	ldr.w	r2, [r3], #4
 800765c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007660:	4298      	cmp	r0, r3
 8007662:	d8f9      	bhi.n	8007658 <__lshift+0xc8>
 8007664:	e7ea      	b.n	800763c <__lshift+0xac>
 8007666:	bf00      	nop
 8007668:	0800848b 	.word	0x0800848b
 800766c:	080084fc 	.word	0x080084fc

08007670 <__mcmp>:
 8007670:	b530      	push	{r4, r5, lr}
 8007672:	6902      	ldr	r2, [r0, #16]
 8007674:	690c      	ldr	r4, [r1, #16]
 8007676:	1b12      	subs	r2, r2, r4
 8007678:	d10e      	bne.n	8007698 <__mcmp+0x28>
 800767a:	f100 0314 	add.w	r3, r0, #20
 800767e:	3114      	adds	r1, #20
 8007680:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007684:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007688:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800768c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007690:	42a5      	cmp	r5, r4
 8007692:	d003      	beq.n	800769c <__mcmp+0x2c>
 8007694:	d305      	bcc.n	80076a2 <__mcmp+0x32>
 8007696:	2201      	movs	r2, #1
 8007698:	4610      	mov	r0, r2
 800769a:	bd30      	pop	{r4, r5, pc}
 800769c:	4283      	cmp	r3, r0
 800769e:	d3f3      	bcc.n	8007688 <__mcmp+0x18>
 80076a0:	e7fa      	b.n	8007698 <__mcmp+0x28>
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076a6:	e7f7      	b.n	8007698 <__mcmp+0x28>

080076a8 <__mdiff>:
 80076a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	460c      	mov	r4, r1
 80076ae:	4606      	mov	r6, r0
 80076b0:	4611      	mov	r1, r2
 80076b2:	4620      	mov	r0, r4
 80076b4:	4690      	mov	r8, r2
 80076b6:	f7ff ffdb 	bl	8007670 <__mcmp>
 80076ba:	1e05      	subs	r5, r0, #0
 80076bc:	d110      	bne.n	80076e0 <__mdiff+0x38>
 80076be:	4629      	mov	r1, r5
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff fd53 	bl	800716c <_Balloc>
 80076c6:	b930      	cbnz	r0, 80076d6 <__mdiff+0x2e>
 80076c8:	4b3a      	ldr	r3, [pc, #232]	; (80077b4 <__mdiff+0x10c>)
 80076ca:	4602      	mov	r2, r0
 80076cc:	f240 2132 	movw	r1, #562	; 0x232
 80076d0:	4839      	ldr	r0, [pc, #228]	; (80077b8 <__mdiff+0x110>)
 80076d2:	f000 fce1 	bl	8008098 <__assert_func>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e0:	bfa4      	itt	ge
 80076e2:	4643      	movge	r3, r8
 80076e4:	46a0      	movge	r8, r4
 80076e6:	4630      	mov	r0, r6
 80076e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80076ec:	bfa6      	itte	ge
 80076ee:	461c      	movge	r4, r3
 80076f0:	2500      	movge	r5, #0
 80076f2:	2501      	movlt	r5, #1
 80076f4:	f7ff fd3a 	bl	800716c <_Balloc>
 80076f8:	b920      	cbnz	r0, 8007704 <__mdiff+0x5c>
 80076fa:	4b2e      	ldr	r3, [pc, #184]	; (80077b4 <__mdiff+0x10c>)
 80076fc:	4602      	mov	r2, r0
 80076fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007702:	e7e5      	b.n	80076d0 <__mdiff+0x28>
 8007704:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007708:	6926      	ldr	r6, [r4, #16]
 800770a:	60c5      	str	r5, [r0, #12]
 800770c:	f104 0914 	add.w	r9, r4, #20
 8007710:	f108 0514 	add.w	r5, r8, #20
 8007714:	f100 0e14 	add.w	lr, r0, #20
 8007718:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800771c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007720:	f108 0210 	add.w	r2, r8, #16
 8007724:	46f2      	mov	sl, lr
 8007726:	2100      	movs	r1, #0
 8007728:	f859 3b04 	ldr.w	r3, [r9], #4
 800772c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007730:	fa1f f883 	uxth.w	r8, r3
 8007734:	fa11 f18b 	uxtah	r1, r1, fp
 8007738:	0c1b      	lsrs	r3, r3, #16
 800773a:	eba1 0808 	sub.w	r8, r1, r8
 800773e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007742:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007746:	fa1f f888 	uxth.w	r8, r8
 800774a:	1419      	asrs	r1, r3, #16
 800774c:	454e      	cmp	r6, r9
 800774e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007752:	f84a 3b04 	str.w	r3, [sl], #4
 8007756:	d8e7      	bhi.n	8007728 <__mdiff+0x80>
 8007758:	1b33      	subs	r3, r6, r4
 800775a:	3b15      	subs	r3, #21
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	3304      	adds	r3, #4
 8007762:	3415      	adds	r4, #21
 8007764:	42a6      	cmp	r6, r4
 8007766:	bf38      	it	cc
 8007768:	2304      	movcc	r3, #4
 800776a:	441d      	add	r5, r3
 800776c:	4473      	add	r3, lr
 800776e:	469e      	mov	lr, r3
 8007770:	462e      	mov	r6, r5
 8007772:	4566      	cmp	r6, ip
 8007774:	d30e      	bcc.n	8007794 <__mdiff+0xec>
 8007776:	f10c 0203 	add.w	r2, ip, #3
 800777a:	1b52      	subs	r2, r2, r5
 800777c:	f022 0203 	bic.w	r2, r2, #3
 8007780:	3d03      	subs	r5, #3
 8007782:	45ac      	cmp	ip, r5
 8007784:	bf38      	it	cc
 8007786:	2200      	movcc	r2, #0
 8007788:	441a      	add	r2, r3
 800778a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800778e:	b17b      	cbz	r3, 80077b0 <__mdiff+0x108>
 8007790:	6107      	str	r7, [r0, #16]
 8007792:	e7a3      	b.n	80076dc <__mdiff+0x34>
 8007794:	f856 8b04 	ldr.w	r8, [r6], #4
 8007798:	fa11 f288 	uxtah	r2, r1, r8
 800779c:	1414      	asrs	r4, r2, #16
 800779e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077a2:	b292      	uxth	r2, r2
 80077a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077a8:	f84e 2b04 	str.w	r2, [lr], #4
 80077ac:	1421      	asrs	r1, r4, #16
 80077ae:	e7e0      	b.n	8007772 <__mdiff+0xca>
 80077b0:	3f01      	subs	r7, #1
 80077b2:	e7ea      	b.n	800778a <__mdiff+0xe2>
 80077b4:	0800848b 	.word	0x0800848b
 80077b8:	080084fc 	.word	0x080084fc

080077bc <__d2b>:
 80077bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077c0:	4689      	mov	r9, r1
 80077c2:	2101      	movs	r1, #1
 80077c4:	ec57 6b10 	vmov	r6, r7, d0
 80077c8:	4690      	mov	r8, r2
 80077ca:	f7ff fccf 	bl	800716c <_Balloc>
 80077ce:	4604      	mov	r4, r0
 80077d0:	b930      	cbnz	r0, 80077e0 <__d2b+0x24>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <__d2b+0xb0>)
 80077d6:	4826      	ldr	r0, [pc, #152]	; (8007870 <__d2b+0xb4>)
 80077d8:	f240 310a 	movw	r1, #778	; 0x30a
 80077dc:	f000 fc5c 	bl	8008098 <__assert_func>
 80077e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80077e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077e8:	bb35      	cbnz	r5, 8007838 <__d2b+0x7c>
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	d028      	beq.n	8007842 <__d2b+0x86>
 80077f0:	4668      	mov	r0, sp
 80077f2:	9600      	str	r6, [sp, #0]
 80077f4:	f7ff fd82 	bl	80072fc <__lo0bits>
 80077f8:	9900      	ldr	r1, [sp, #0]
 80077fa:	b300      	cbz	r0, 800783e <__d2b+0x82>
 80077fc:	9a01      	ldr	r2, [sp, #4]
 80077fe:	f1c0 0320 	rsb	r3, r0, #32
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	430b      	orrs	r3, r1
 8007808:	40c2      	lsrs	r2, r0
 800780a:	6163      	str	r3, [r4, #20]
 800780c:	9201      	str	r2, [sp, #4]
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	61a3      	str	r3, [r4, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf14      	ite	ne
 8007816:	2202      	movne	r2, #2
 8007818:	2201      	moveq	r2, #1
 800781a:	6122      	str	r2, [r4, #16]
 800781c:	b1d5      	cbz	r5, 8007854 <__d2b+0x98>
 800781e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007822:	4405      	add	r5, r0
 8007824:	f8c9 5000 	str.w	r5, [r9]
 8007828:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800782c:	f8c8 0000 	str.w	r0, [r8]
 8007830:	4620      	mov	r0, r4
 8007832:	b003      	add	sp, #12
 8007834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800783c:	e7d5      	b.n	80077ea <__d2b+0x2e>
 800783e:	6161      	str	r1, [r4, #20]
 8007840:	e7e5      	b.n	800780e <__d2b+0x52>
 8007842:	a801      	add	r0, sp, #4
 8007844:	f7ff fd5a 	bl	80072fc <__lo0bits>
 8007848:	9b01      	ldr	r3, [sp, #4]
 800784a:	6163      	str	r3, [r4, #20]
 800784c:	2201      	movs	r2, #1
 800784e:	6122      	str	r2, [r4, #16]
 8007850:	3020      	adds	r0, #32
 8007852:	e7e3      	b.n	800781c <__d2b+0x60>
 8007854:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007858:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800785c:	f8c9 0000 	str.w	r0, [r9]
 8007860:	6918      	ldr	r0, [r3, #16]
 8007862:	f7ff fd2b 	bl	80072bc <__hi0bits>
 8007866:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800786a:	e7df      	b.n	800782c <__d2b+0x70>
 800786c:	0800848b 	.word	0x0800848b
 8007870:	080084fc 	.word	0x080084fc

08007874 <_calloc_r>:
 8007874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007876:	fba1 2402 	umull	r2, r4, r1, r2
 800787a:	b94c      	cbnz	r4, 8007890 <_calloc_r+0x1c>
 800787c:	4611      	mov	r1, r2
 800787e:	9201      	str	r2, [sp, #4]
 8007880:	f000 f87a 	bl	8007978 <_malloc_r>
 8007884:	9a01      	ldr	r2, [sp, #4]
 8007886:	4605      	mov	r5, r0
 8007888:	b930      	cbnz	r0, 8007898 <_calloc_r+0x24>
 800788a:	4628      	mov	r0, r5
 800788c:	b003      	add	sp, #12
 800788e:	bd30      	pop	{r4, r5, pc}
 8007890:	220c      	movs	r2, #12
 8007892:	6002      	str	r2, [r0, #0]
 8007894:	2500      	movs	r5, #0
 8007896:	e7f8      	b.n	800788a <_calloc_r+0x16>
 8007898:	4621      	mov	r1, r4
 800789a:	f7fd fde1 	bl	8005460 <memset>
 800789e:	e7f4      	b.n	800788a <_calloc_r+0x16>

080078a0 <_free_r>:
 80078a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078a2:	2900      	cmp	r1, #0
 80078a4:	d044      	beq.n	8007930 <_free_r+0x90>
 80078a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078aa:	9001      	str	r0, [sp, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f1a1 0404 	sub.w	r4, r1, #4
 80078b2:	bfb8      	it	lt
 80078b4:	18e4      	addlt	r4, r4, r3
 80078b6:	f000 fc8f 	bl	80081d8 <__malloc_lock>
 80078ba:	4a1e      	ldr	r2, [pc, #120]	; (8007934 <_free_r+0x94>)
 80078bc:	9801      	ldr	r0, [sp, #4]
 80078be:	6813      	ldr	r3, [r2, #0]
 80078c0:	b933      	cbnz	r3, 80078d0 <_free_r+0x30>
 80078c2:	6063      	str	r3, [r4, #4]
 80078c4:	6014      	str	r4, [r2, #0]
 80078c6:	b003      	add	sp, #12
 80078c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078cc:	f000 bc8a 	b.w	80081e4 <__malloc_unlock>
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d908      	bls.n	80078e6 <_free_r+0x46>
 80078d4:	6825      	ldr	r5, [r4, #0]
 80078d6:	1961      	adds	r1, r4, r5
 80078d8:	428b      	cmp	r3, r1
 80078da:	bf01      	itttt	eq
 80078dc:	6819      	ldreq	r1, [r3, #0]
 80078de:	685b      	ldreq	r3, [r3, #4]
 80078e0:	1949      	addeq	r1, r1, r5
 80078e2:	6021      	streq	r1, [r4, #0]
 80078e4:	e7ed      	b.n	80078c2 <_free_r+0x22>
 80078e6:	461a      	mov	r2, r3
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	b10b      	cbz	r3, 80078f0 <_free_r+0x50>
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	d9fa      	bls.n	80078e6 <_free_r+0x46>
 80078f0:	6811      	ldr	r1, [r2, #0]
 80078f2:	1855      	adds	r5, r2, r1
 80078f4:	42a5      	cmp	r5, r4
 80078f6:	d10b      	bne.n	8007910 <_free_r+0x70>
 80078f8:	6824      	ldr	r4, [r4, #0]
 80078fa:	4421      	add	r1, r4
 80078fc:	1854      	adds	r4, r2, r1
 80078fe:	42a3      	cmp	r3, r4
 8007900:	6011      	str	r1, [r2, #0]
 8007902:	d1e0      	bne.n	80078c6 <_free_r+0x26>
 8007904:	681c      	ldr	r4, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	6053      	str	r3, [r2, #4]
 800790a:	4421      	add	r1, r4
 800790c:	6011      	str	r1, [r2, #0]
 800790e:	e7da      	b.n	80078c6 <_free_r+0x26>
 8007910:	d902      	bls.n	8007918 <_free_r+0x78>
 8007912:	230c      	movs	r3, #12
 8007914:	6003      	str	r3, [r0, #0]
 8007916:	e7d6      	b.n	80078c6 <_free_r+0x26>
 8007918:	6825      	ldr	r5, [r4, #0]
 800791a:	1961      	adds	r1, r4, r5
 800791c:	428b      	cmp	r3, r1
 800791e:	bf04      	itt	eq
 8007920:	6819      	ldreq	r1, [r3, #0]
 8007922:	685b      	ldreq	r3, [r3, #4]
 8007924:	6063      	str	r3, [r4, #4]
 8007926:	bf04      	itt	eq
 8007928:	1949      	addeq	r1, r1, r5
 800792a:	6021      	streq	r1, [r4, #0]
 800792c:	6054      	str	r4, [r2, #4]
 800792e:	e7ca      	b.n	80078c6 <_free_r+0x26>
 8007930:	b003      	add	sp, #12
 8007932:	bd30      	pop	{r4, r5, pc}
 8007934:	200007f8 	.word	0x200007f8

08007938 <sbrk_aligned>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4e0e      	ldr	r6, [pc, #56]	; (8007974 <sbrk_aligned+0x3c>)
 800793c:	460c      	mov	r4, r1
 800793e:	6831      	ldr	r1, [r6, #0]
 8007940:	4605      	mov	r5, r0
 8007942:	b911      	cbnz	r1, 800794a <sbrk_aligned+0x12>
 8007944:	f000 fb42 	bl	8007fcc <_sbrk_r>
 8007948:	6030      	str	r0, [r6, #0]
 800794a:	4621      	mov	r1, r4
 800794c:	4628      	mov	r0, r5
 800794e:	f000 fb3d 	bl	8007fcc <_sbrk_r>
 8007952:	1c43      	adds	r3, r0, #1
 8007954:	d00a      	beq.n	800796c <sbrk_aligned+0x34>
 8007956:	1cc4      	adds	r4, r0, #3
 8007958:	f024 0403 	bic.w	r4, r4, #3
 800795c:	42a0      	cmp	r0, r4
 800795e:	d007      	beq.n	8007970 <sbrk_aligned+0x38>
 8007960:	1a21      	subs	r1, r4, r0
 8007962:	4628      	mov	r0, r5
 8007964:	f000 fb32 	bl	8007fcc <_sbrk_r>
 8007968:	3001      	adds	r0, #1
 800796a:	d101      	bne.n	8007970 <sbrk_aligned+0x38>
 800796c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007970:	4620      	mov	r0, r4
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	200007fc 	.word	0x200007fc

08007978 <_malloc_r>:
 8007978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800797c:	1ccd      	adds	r5, r1, #3
 800797e:	f025 0503 	bic.w	r5, r5, #3
 8007982:	3508      	adds	r5, #8
 8007984:	2d0c      	cmp	r5, #12
 8007986:	bf38      	it	cc
 8007988:	250c      	movcc	r5, #12
 800798a:	2d00      	cmp	r5, #0
 800798c:	4607      	mov	r7, r0
 800798e:	db01      	blt.n	8007994 <_malloc_r+0x1c>
 8007990:	42a9      	cmp	r1, r5
 8007992:	d905      	bls.n	80079a0 <_malloc_r+0x28>
 8007994:	230c      	movs	r3, #12
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	2600      	movs	r6, #0
 800799a:	4630      	mov	r0, r6
 800799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a0:	4e2e      	ldr	r6, [pc, #184]	; (8007a5c <_malloc_r+0xe4>)
 80079a2:	f000 fc19 	bl	80081d8 <__malloc_lock>
 80079a6:	6833      	ldr	r3, [r6, #0]
 80079a8:	461c      	mov	r4, r3
 80079aa:	bb34      	cbnz	r4, 80079fa <_malloc_r+0x82>
 80079ac:	4629      	mov	r1, r5
 80079ae:	4638      	mov	r0, r7
 80079b0:	f7ff ffc2 	bl	8007938 <sbrk_aligned>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	4604      	mov	r4, r0
 80079b8:	d14d      	bne.n	8007a56 <_malloc_r+0xde>
 80079ba:	6834      	ldr	r4, [r6, #0]
 80079bc:	4626      	mov	r6, r4
 80079be:	2e00      	cmp	r6, #0
 80079c0:	d140      	bne.n	8007a44 <_malloc_r+0xcc>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	4631      	mov	r1, r6
 80079c6:	4638      	mov	r0, r7
 80079c8:	eb04 0803 	add.w	r8, r4, r3
 80079cc:	f000 fafe 	bl	8007fcc <_sbrk_r>
 80079d0:	4580      	cmp	r8, r0
 80079d2:	d13a      	bne.n	8007a4a <_malloc_r+0xd2>
 80079d4:	6821      	ldr	r1, [r4, #0]
 80079d6:	3503      	adds	r5, #3
 80079d8:	1a6d      	subs	r5, r5, r1
 80079da:	f025 0503 	bic.w	r5, r5, #3
 80079de:	3508      	adds	r5, #8
 80079e0:	2d0c      	cmp	r5, #12
 80079e2:	bf38      	it	cc
 80079e4:	250c      	movcc	r5, #12
 80079e6:	4629      	mov	r1, r5
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff ffa5 	bl	8007938 <sbrk_aligned>
 80079ee:	3001      	adds	r0, #1
 80079f0:	d02b      	beq.n	8007a4a <_malloc_r+0xd2>
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	442b      	add	r3, r5
 80079f6:	6023      	str	r3, [r4, #0]
 80079f8:	e00e      	b.n	8007a18 <_malloc_r+0xa0>
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	1b52      	subs	r2, r2, r5
 80079fe:	d41e      	bmi.n	8007a3e <_malloc_r+0xc6>
 8007a00:	2a0b      	cmp	r2, #11
 8007a02:	d916      	bls.n	8007a32 <_malloc_r+0xba>
 8007a04:	1961      	adds	r1, r4, r5
 8007a06:	42a3      	cmp	r3, r4
 8007a08:	6025      	str	r5, [r4, #0]
 8007a0a:	bf18      	it	ne
 8007a0c:	6059      	strne	r1, [r3, #4]
 8007a0e:	6863      	ldr	r3, [r4, #4]
 8007a10:	bf08      	it	eq
 8007a12:	6031      	streq	r1, [r6, #0]
 8007a14:	5162      	str	r2, [r4, r5]
 8007a16:	604b      	str	r3, [r1, #4]
 8007a18:	4638      	mov	r0, r7
 8007a1a:	f104 060b 	add.w	r6, r4, #11
 8007a1e:	f000 fbe1 	bl	80081e4 <__malloc_unlock>
 8007a22:	f026 0607 	bic.w	r6, r6, #7
 8007a26:	1d23      	adds	r3, r4, #4
 8007a28:	1af2      	subs	r2, r6, r3
 8007a2a:	d0b6      	beq.n	800799a <_malloc_r+0x22>
 8007a2c:	1b9b      	subs	r3, r3, r6
 8007a2e:	50a3      	str	r3, [r4, r2]
 8007a30:	e7b3      	b.n	800799a <_malloc_r+0x22>
 8007a32:	6862      	ldr	r2, [r4, #4]
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	bf0c      	ite	eq
 8007a38:	6032      	streq	r2, [r6, #0]
 8007a3a:	605a      	strne	r2, [r3, #4]
 8007a3c:	e7ec      	b.n	8007a18 <_malloc_r+0xa0>
 8007a3e:	4623      	mov	r3, r4
 8007a40:	6864      	ldr	r4, [r4, #4]
 8007a42:	e7b2      	b.n	80079aa <_malloc_r+0x32>
 8007a44:	4634      	mov	r4, r6
 8007a46:	6876      	ldr	r6, [r6, #4]
 8007a48:	e7b9      	b.n	80079be <_malloc_r+0x46>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	603b      	str	r3, [r7, #0]
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f000 fbc8 	bl	80081e4 <__malloc_unlock>
 8007a54:	e7a1      	b.n	800799a <_malloc_r+0x22>
 8007a56:	6025      	str	r5, [r4, #0]
 8007a58:	e7de      	b.n	8007a18 <_malloc_r+0xa0>
 8007a5a:	bf00      	nop
 8007a5c:	200007f8 	.word	0x200007f8

08007a60 <__ssputs_r>:
 8007a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a64:	688e      	ldr	r6, [r1, #8]
 8007a66:	429e      	cmp	r6, r3
 8007a68:	4682      	mov	sl, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	4690      	mov	r8, r2
 8007a6e:	461f      	mov	r7, r3
 8007a70:	d838      	bhi.n	8007ae4 <__ssputs_r+0x84>
 8007a72:	898a      	ldrh	r2, [r1, #12]
 8007a74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a78:	d032      	beq.n	8007ae0 <__ssputs_r+0x80>
 8007a7a:	6825      	ldr	r5, [r4, #0]
 8007a7c:	6909      	ldr	r1, [r1, #16]
 8007a7e:	eba5 0901 	sub.w	r9, r5, r1
 8007a82:	6965      	ldr	r5, [r4, #20]
 8007a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	444b      	add	r3, r9
 8007a90:	106d      	asrs	r5, r5, #1
 8007a92:	429d      	cmp	r5, r3
 8007a94:	bf38      	it	cc
 8007a96:	461d      	movcc	r5, r3
 8007a98:	0553      	lsls	r3, r2, #21
 8007a9a:	d531      	bpl.n	8007b00 <__ssputs_r+0xa0>
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	f7ff ff6b 	bl	8007978 <_malloc_r>
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	b950      	cbnz	r0, 8007abc <__ssputs_r+0x5c>
 8007aa6:	230c      	movs	r3, #12
 8007aa8:	f8ca 3000 	str.w	r3, [sl]
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab2:	81a3      	strh	r3, [r4, #12]
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abc:	6921      	ldr	r1, [r4, #16]
 8007abe:	464a      	mov	r2, r9
 8007ac0:	f7fd fcc0 	bl	8005444 <memcpy>
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	6126      	str	r6, [r4, #16]
 8007ad2:	6165      	str	r5, [r4, #20]
 8007ad4:	444e      	add	r6, r9
 8007ad6:	eba5 0509 	sub.w	r5, r5, r9
 8007ada:	6026      	str	r6, [r4, #0]
 8007adc:	60a5      	str	r5, [r4, #8]
 8007ade:	463e      	mov	r6, r7
 8007ae0:	42be      	cmp	r6, r7
 8007ae2:	d900      	bls.n	8007ae6 <__ssputs_r+0x86>
 8007ae4:	463e      	mov	r6, r7
 8007ae6:	6820      	ldr	r0, [r4, #0]
 8007ae8:	4632      	mov	r2, r6
 8007aea:	4641      	mov	r1, r8
 8007aec:	f000 fb5a 	bl	80081a4 <memmove>
 8007af0:	68a3      	ldr	r3, [r4, #8]
 8007af2:	1b9b      	subs	r3, r3, r6
 8007af4:	60a3      	str	r3, [r4, #8]
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	4433      	add	r3, r6
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	2000      	movs	r0, #0
 8007afe:	e7db      	b.n	8007ab8 <__ssputs_r+0x58>
 8007b00:	462a      	mov	r2, r5
 8007b02:	f000 fb75 	bl	80081f0 <_realloc_r>
 8007b06:	4606      	mov	r6, r0
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d1e1      	bne.n	8007ad0 <__ssputs_r+0x70>
 8007b0c:	6921      	ldr	r1, [r4, #16]
 8007b0e:	4650      	mov	r0, sl
 8007b10:	f7ff fec6 	bl	80078a0 <_free_r>
 8007b14:	e7c7      	b.n	8007aa6 <__ssputs_r+0x46>
	...

08007b18 <_svfiprintf_r>:
 8007b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	4698      	mov	r8, r3
 8007b1e:	898b      	ldrh	r3, [r1, #12]
 8007b20:	061b      	lsls	r3, r3, #24
 8007b22:	b09d      	sub	sp, #116	; 0x74
 8007b24:	4607      	mov	r7, r0
 8007b26:	460d      	mov	r5, r1
 8007b28:	4614      	mov	r4, r2
 8007b2a:	d50e      	bpl.n	8007b4a <_svfiprintf_r+0x32>
 8007b2c:	690b      	ldr	r3, [r1, #16]
 8007b2e:	b963      	cbnz	r3, 8007b4a <_svfiprintf_r+0x32>
 8007b30:	2140      	movs	r1, #64	; 0x40
 8007b32:	f7ff ff21 	bl	8007978 <_malloc_r>
 8007b36:	6028      	str	r0, [r5, #0]
 8007b38:	6128      	str	r0, [r5, #16]
 8007b3a:	b920      	cbnz	r0, 8007b46 <_svfiprintf_r+0x2e>
 8007b3c:	230c      	movs	r3, #12
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b44:	e0d1      	b.n	8007cea <_svfiprintf_r+0x1d2>
 8007b46:	2340      	movs	r3, #64	; 0x40
 8007b48:	616b      	str	r3, [r5, #20]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4e:	2320      	movs	r3, #32
 8007b50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b58:	2330      	movs	r3, #48	; 0x30
 8007b5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d04 <_svfiprintf_r+0x1ec>
 8007b5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b62:	f04f 0901 	mov.w	r9, #1
 8007b66:	4623      	mov	r3, r4
 8007b68:	469a      	mov	sl, r3
 8007b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b6e:	b10a      	cbz	r2, 8007b74 <_svfiprintf_r+0x5c>
 8007b70:	2a25      	cmp	r2, #37	; 0x25
 8007b72:	d1f9      	bne.n	8007b68 <_svfiprintf_r+0x50>
 8007b74:	ebba 0b04 	subs.w	fp, sl, r4
 8007b78:	d00b      	beq.n	8007b92 <_svfiprintf_r+0x7a>
 8007b7a:	465b      	mov	r3, fp
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	4629      	mov	r1, r5
 8007b80:	4638      	mov	r0, r7
 8007b82:	f7ff ff6d 	bl	8007a60 <__ssputs_r>
 8007b86:	3001      	adds	r0, #1
 8007b88:	f000 80aa 	beq.w	8007ce0 <_svfiprintf_r+0x1c8>
 8007b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b8e:	445a      	add	r2, fp
 8007b90:	9209      	str	r2, [sp, #36]	; 0x24
 8007b92:	f89a 3000 	ldrb.w	r3, [sl]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 80a2 	beq.w	8007ce0 <_svfiprintf_r+0x1c8>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ba6:	f10a 0a01 	add.w	sl, sl, #1
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	9307      	str	r3, [sp, #28]
 8007bae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bb2:	931a      	str	r3, [sp, #104]	; 0x68
 8007bb4:	4654      	mov	r4, sl
 8007bb6:	2205      	movs	r2, #5
 8007bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bbc:	4851      	ldr	r0, [pc, #324]	; (8007d04 <_svfiprintf_r+0x1ec>)
 8007bbe:	f7f8 fb2f 	bl	8000220 <memchr>
 8007bc2:	9a04      	ldr	r2, [sp, #16]
 8007bc4:	b9d8      	cbnz	r0, 8007bfe <_svfiprintf_r+0xe6>
 8007bc6:	06d0      	lsls	r0, r2, #27
 8007bc8:	bf44      	itt	mi
 8007bca:	2320      	movmi	r3, #32
 8007bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd0:	0711      	lsls	r1, r2, #28
 8007bd2:	bf44      	itt	mi
 8007bd4:	232b      	movmi	r3, #43	; 0x2b
 8007bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bda:	f89a 3000 	ldrb.w	r3, [sl]
 8007bde:	2b2a      	cmp	r3, #42	; 0x2a
 8007be0:	d015      	beq.n	8007c0e <_svfiprintf_r+0xf6>
 8007be2:	9a07      	ldr	r2, [sp, #28]
 8007be4:	4654      	mov	r4, sl
 8007be6:	2000      	movs	r0, #0
 8007be8:	f04f 0c0a 	mov.w	ip, #10
 8007bec:	4621      	mov	r1, r4
 8007bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bf2:	3b30      	subs	r3, #48	; 0x30
 8007bf4:	2b09      	cmp	r3, #9
 8007bf6:	d94e      	bls.n	8007c96 <_svfiprintf_r+0x17e>
 8007bf8:	b1b0      	cbz	r0, 8007c28 <_svfiprintf_r+0x110>
 8007bfa:	9207      	str	r2, [sp, #28]
 8007bfc:	e014      	b.n	8007c28 <_svfiprintf_r+0x110>
 8007bfe:	eba0 0308 	sub.w	r3, r0, r8
 8007c02:	fa09 f303 	lsl.w	r3, r9, r3
 8007c06:	4313      	orrs	r3, r2
 8007c08:	9304      	str	r3, [sp, #16]
 8007c0a:	46a2      	mov	sl, r4
 8007c0c:	e7d2      	b.n	8007bb4 <_svfiprintf_r+0x9c>
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	1d19      	adds	r1, r3, #4
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	9103      	str	r1, [sp, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bfbb      	ittet	lt
 8007c1a:	425b      	neglt	r3, r3
 8007c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c20:	9307      	strge	r3, [sp, #28]
 8007c22:	9307      	strlt	r3, [sp, #28]
 8007c24:	bfb8      	it	lt
 8007c26:	9204      	strlt	r2, [sp, #16]
 8007c28:	7823      	ldrb	r3, [r4, #0]
 8007c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c2c:	d10c      	bne.n	8007c48 <_svfiprintf_r+0x130>
 8007c2e:	7863      	ldrb	r3, [r4, #1]
 8007c30:	2b2a      	cmp	r3, #42	; 0x2a
 8007c32:	d135      	bne.n	8007ca0 <_svfiprintf_r+0x188>
 8007c34:	9b03      	ldr	r3, [sp, #12]
 8007c36:	1d1a      	adds	r2, r3, #4
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	9203      	str	r2, [sp, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	bfb8      	it	lt
 8007c40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c44:	3402      	adds	r4, #2
 8007c46:	9305      	str	r3, [sp, #20]
 8007c48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d14 <_svfiprintf_r+0x1fc>
 8007c4c:	7821      	ldrb	r1, [r4, #0]
 8007c4e:	2203      	movs	r2, #3
 8007c50:	4650      	mov	r0, sl
 8007c52:	f7f8 fae5 	bl	8000220 <memchr>
 8007c56:	b140      	cbz	r0, 8007c6a <_svfiprintf_r+0x152>
 8007c58:	2340      	movs	r3, #64	; 0x40
 8007c5a:	eba0 000a 	sub.w	r0, r0, sl
 8007c5e:	fa03 f000 	lsl.w	r0, r3, r0
 8007c62:	9b04      	ldr	r3, [sp, #16]
 8007c64:	4303      	orrs	r3, r0
 8007c66:	3401      	adds	r4, #1
 8007c68:	9304      	str	r3, [sp, #16]
 8007c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c6e:	4826      	ldr	r0, [pc, #152]	; (8007d08 <_svfiprintf_r+0x1f0>)
 8007c70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c74:	2206      	movs	r2, #6
 8007c76:	f7f8 fad3 	bl	8000220 <memchr>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d038      	beq.n	8007cf0 <_svfiprintf_r+0x1d8>
 8007c7e:	4b23      	ldr	r3, [pc, #140]	; (8007d0c <_svfiprintf_r+0x1f4>)
 8007c80:	bb1b      	cbnz	r3, 8007cca <_svfiprintf_r+0x1b2>
 8007c82:	9b03      	ldr	r3, [sp, #12]
 8007c84:	3307      	adds	r3, #7
 8007c86:	f023 0307 	bic.w	r3, r3, #7
 8007c8a:	3308      	adds	r3, #8
 8007c8c:	9303      	str	r3, [sp, #12]
 8007c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c90:	4433      	add	r3, r6
 8007c92:	9309      	str	r3, [sp, #36]	; 0x24
 8007c94:	e767      	b.n	8007b66 <_svfiprintf_r+0x4e>
 8007c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	e7a5      	b.n	8007bec <_svfiprintf_r+0xd4>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	3401      	adds	r4, #1
 8007ca4:	9305      	str	r3, [sp, #20]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	f04f 0c0a 	mov.w	ip, #10
 8007cac:	4620      	mov	r0, r4
 8007cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cb2:	3a30      	subs	r2, #48	; 0x30
 8007cb4:	2a09      	cmp	r2, #9
 8007cb6:	d903      	bls.n	8007cc0 <_svfiprintf_r+0x1a8>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0c5      	beq.n	8007c48 <_svfiprintf_r+0x130>
 8007cbc:	9105      	str	r1, [sp, #20]
 8007cbe:	e7c3      	b.n	8007c48 <_svfiprintf_r+0x130>
 8007cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e7f0      	b.n	8007cac <_svfiprintf_r+0x194>
 8007cca:	ab03      	add	r3, sp, #12
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	462a      	mov	r2, r5
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <_svfiprintf_r+0x1f8>)
 8007cd2:	a904      	add	r1, sp, #16
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	f7fd fc6b 	bl	80055b0 <_printf_float>
 8007cda:	1c42      	adds	r2, r0, #1
 8007cdc:	4606      	mov	r6, r0
 8007cde:	d1d6      	bne.n	8007c8e <_svfiprintf_r+0x176>
 8007ce0:	89ab      	ldrh	r3, [r5, #12]
 8007ce2:	065b      	lsls	r3, r3, #25
 8007ce4:	f53f af2c 	bmi.w	8007b40 <_svfiprintf_r+0x28>
 8007ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cea:	b01d      	add	sp, #116	; 0x74
 8007cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf0:	ab03      	add	r3, sp, #12
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	462a      	mov	r2, r5
 8007cf6:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <_svfiprintf_r+0x1f8>)
 8007cf8:	a904      	add	r1, sp, #16
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f7fd fefc 	bl	8005af8 <_printf_i>
 8007d00:	e7eb      	b.n	8007cda <_svfiprintf_r+0x1c2>
 8007d02:	bf00      	nop
 8007d04:	08008654 	.word	0x08008654
 8007d08:	0800865e 	.word	0x0800865e
 8007d0c:	080055b1 	.word	0x080055b1
 8007d10:	08007a61 	.word	0x08007a61
 8007d14:	0800865a 	.word	0x0800865a

08007d18 <__sfputc_r>:
 8007d18:	6893      	ldr	r3, [r2, #8]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	b410      	push	{r4}
 8007d20:	6093      	str	r3, [r2, #8]
 8007d22:	da08      	bge.n	8007d36 <__sfputc_r+0x1e>
 8007d24:	6994      	ldr	r4, [r2, #24]
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	db01      	blt.n	8007d2e <__sfputc_r+0x16>
 8007d2a:	290a      	cmp	r1, #10
 8007d2c:	d103      	bne.n	8007d36 <__sfputc_r+0x1e>
 8007d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d32:	f7fe b8b5 	b.w	8005ea0 <__swbuf_r>
 8007d36:	6813      	ldr	r3, [r2, #0]
 8007d38:	1c58      	adds	r0, r3, #1
 8007d3a:	6010      	str	r0, [r2, #0]
 8007d3c:	7019      	strb	r1, [r3, #0]
 8007d3e:	4608      	mov	r0, r1
 8007d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <__sfputs_r>:
 8007d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d48:	4606      	mov	r6, r0
 8007d4a:	460f      	mov	r7, r1
 8007d4c:	4614      	mov	r4, r2
 8007d4e:	18d5      	adds	r5, r2, r3
 8007d50:	42ac      	cmp	r4, r5
 8007d52:	d101      	bne.n	8007d58 <__sfputs_r+0x12>
 8007d54:	2000      	movs	r0, #0
 8007d56:	e007      	b.n	8007d68 <__sfputs_r+0x22>
 8007d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d5c:	463a      	mov	r2, r7
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f7ff ffda 	bl	8007d18 <__sfputc_r>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d1f3      	bne.n	8007d50 <__sfputs_r+0xa>
 8007d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d6c <_vfiprintf_r>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	460d      	mov	r5, r1
 8007d72:	b09d      	sub	sp, #116	; 0x74
 8007d74:	4614      	mov	r4, r2
 8007d76:	4698      	mov	r8, r3
 8007d78:	4606      	mov	r6, r0
 8007d7a:	b118      	cbz	r0, 8007d84 <_vfiprintf_r+0x18>
 8007d7c:	6983      	ldr	r3, [r0, #24]
 8007d7e:	b90b      	cbnz	r3, 8007d84 <_vfiprintf_r+0x18>
 8007d80:	f7ff f8e2 	bl	8006f48 <__sinit>
 8007d84:	4b89      	ldr	r3, [pc, #548]	; (8007fac <_vfiprintf_r+0x240>)
 8007d86:	429d      	cmp	r5, r3
 8007d88:	d11b      	bne.n	8007dc2 <_vfiprintf_r+0x56>
 8007d8a:	6875      	ldr	r5, [r6, #4]
 8007d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d8e:	07d9      	lsls	r1, r3, #31
 8007d90:	d405      	bmi.n	8007d9e <_vfiprintf_r+0x32>
 8007d92:	89ab      	ldrh	r3, [r5, #12]
 8007d94:	059a      	lsls	r2, r3, #22
 8007d96:	d402      	bmi.n	8007d9e <_vfiprintf_r+0x32>
 8007d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d9a:	f7ff f978 	bl	800708e <__retarget_lock_acquire_recursive>
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	071b      	lsls	r3, r3, #28
 8007da2:	d501      	bpl.n	8007da8 <_vfiprintf_r+0x3c>
 8007da4:	692b      	ldr	r3, [r5, #16]
 8007da6:	b9eb      	cbnz	r3, 8007de4 <_vfiprintf_r+0x78>
 8007da8:	4629      	mov	r1, r5
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7fe f8ca 	bl	8005f44 <__swsetup_r>
 8007db0:	b1c0      	cbz	r0, 8007de4 <_vfiprintf_r+0x78>
 8007db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007db4:	07dc      	lsls	r4, r3, #31
 8007db6:	d50e      	bpl.n	8007dd6 <_vfiprintf_r+0x6a>
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dbc:	b01d      	add	sp, #116	; 0x74
 8007dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc2:	4b7b      	ldr	r3, [pc, #492]	; (8007fb0 <_vfiprintf_r+0x244>)
 8007dc4:	429d      	cmp	r5, r3
 8007dc6:	d101      	bne.n	8007dcc <_vfiprintf_r+0x60>
 8007dc8:	68b5      	ldr	r5, [r6, #8]
 8007dca:	e7df      	b.n	8007d8c <_vfiprintf_r+0x20>
 8007dcc:	4b79      	ldr	r3, [pc, #484]	; (8007fb4 <_vfiprintf_r+0x248>)
 8007dce:	429d      	cmp	r5, r3
 8007dd0:	bf08      	it	eq
 8007dd2:	68f5      	ldreq	r5, [r6, #12]
 8007dd4:	e7da      	b.n	8007d8c <_vfiprintf_r+0x20>
 8007dd6:	89ab      	ldrh	r3, [r5, #12]
 8007dd8:	0598      	lsls	r0, r3, #22
 8007dda:	d4ed      	bmi.n	8007db8 <_vfiprintf_r+0x4c>
 8007ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dde:	f7ff f957 	bl	8007090 <__retarget_lock_release_recursive>
 8007de2:	e7e9      	b.n	8007db8 <_vfiprintf_r+0x4c>
 8007de4:	2300      	movs	r3, #0
 8007de6:	9309      	str	r3, [sp, #36]	; 0x24
 8007de8:	2320      	movs	r3, #32
 8007dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df2:	2330      	movs	r3, #48	; 0x30
 8007df4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007fb8 <_vfiprintf_r+0x24c>
 8007df8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dfc:	f04f 0901 	mov.w	r9, #1
 8007e00:	4623      	mov	r3, r4
 8007e02:	469a      	mov	sl, r3
 8007e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e08:	b10a      	cbz	r2, 8007e0e <_vfiprintf_r+0xa2>
 8007e0a:	2a25      	cmp	r2, #37	; 0x25
 8007e0c:	d1f9      	bne.n	8007e02 <_vfiprintf_r+0x96>
 8007e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e12:	d00b      	beq.n	8007e2c <_vfiprintf_r+0xc0>
 8007e14:	465b      	mov	r3, fp
 8007e16:	4622      	mov	r2, r4
 8007e18:	4629      	mov	r1, r5
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f7ff ff93 	bl	8007d46 <__sfputs_r>
 8007e20:	3001      	adds	r0, #1
 8007e22:	f000 80aa 	beq.w	8007f7a <_vfiprintf_r+0x20e>
 8007e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e28:	445a      	add	r2, fp
 8007e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 80a2 	beq.w	8007f7a <_vfiprintf_r+0x20e>
 8007e36:	2300      	movs	r3, #0
 8007e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e40:	f10a 0a01 	add.w	sl, sl, #1
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	9307      	str	r3, [sp, #28]
 8007e48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e4c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e4e:	4654      	mov	r4, sl
 8007e50:	2205      	movs	r2, #5
 8007e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e56:	4858      	ldr	r0, [pc, #352]	; (8007fb8 <_vfiprintf_r+0x24c>)
 8007e58:	f7f8 f9e2 	bl	8000220 <memchr>
 8007e5c:	9a04      	ldr	r2, [sp, #16]
 8007e5e:	b9d8      	cbnz	r0, 8007e98 <_vfiprintf_r+0x12c>
 8007e60:	06d1      	lsls	r1, r2, #27
 8007e62:	bf44      	itt	mi
 8007e64:	2320      	movmi	r3, #32
 8007e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e6a:	0713      	lsls	r3, r2, #28
 8007e6c:	bf44      	itt	mi
 8007e6e:	232b      	movmi	r3, #43	; 0x2b
 8007e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e74:	f89a 3000 	ldrb.w	r3, [sl]
 8007e78:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7a:	d015      	beq.n	8007ea8 <_vfiprintf_r+0x13c>
 8007e7c:	9a07      	ldr	r2, [sp, #28]
 8007e7e:	4654      	mov	r4, sl
 8007e80:	2000      	movs	r0, #0
 8007e82:	f04f 0c0a 	mov.w	ip, #10
 8007e86:	4621      	mov	r1, r4
 8007e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e8c:	3b30      	subs	r3, #48	; 0x30
 8007e8e:	2b09      	cmp	r3, #9
 8007e90:	d94e      	bls.n	8007f30 <_vfiprintf_r+0x1c4>
 8007e92:	b1b0      	cbz	r0, 8007ec2 <_vfiprintf_r+0x156>
 8007e94:	9207      	str	r2, [sp, #28]
 8007e96:	e014      	b.n	8007ec2 <_vfiprintf_r+0x156>
 8007e98:	eba0 0308 	sub.w	r3, r0, r8
 8007e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	9304      	str	r3, [sp, #16]
 8007ea4:	46a2      	mov	sl, r4
 8007ea6:	e7d2      	b.n	8007e4e <_vfiprintf_r+0xe2>
 8007ea8:	9b03      	ldr	r3, [sp, #12]
 8007eaa:	1d19      	adds	r1, r3, #4
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	9103      	str	r1, [sp, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	bfbb      	ittet	lt
 8007eb4:	425b      	neglt	r3, r3
 8007eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8007eba:	9307      	strge	r3, [sp, #28]
 8007ebc:	9307      	strlt	r3, [sp, #28]
 8007ebe:	bfb8      	it	lt
 8007ec0:	9204      	strlt	r2, [sp, #16]
 8007ec2:	7823      	ldrb	r3, [r4, #0]
 8007ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ec6:	d10c      	bne.n	8007ee2 <_vfiprintf_r+0x176>
 8007ec8:	7863      	ldrb	r3, [r4, #1]
 8007eca:	2b2a      	cmp	r3, #42	; 0x2a
 8007ecc:	d135      	bne.n	8007f3a <_vfiprintf_r+0x1ce>
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	1d1a      	adds	r2, r3, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	9203      	str	r2, [sp, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bfb8      	it	lt
 8007eda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ede:	3402      	adds	r4, #2
 8007ee0:	9305      	str	r3, [sp, #20]
 8007ee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fc8 <_vfiprintf_r+0x25c>
 8007ee6:	7821      	ldrb	r1, [r4, #0]
 8007ee8:	2203      	movs	r2, #3
 8007eea:	4650      	mov	r0, sl
 8007eec:	f7f8 f998 	bl	8000220 <memchr>
 8007ef0:	b140      	cbz	r0, 8007f04 <_vfiprintf_r+0x198>
 8007ef2:	2340      	movs	r3, #64	; 0x40
 8007ef4:	eba0 000a 	sub.w	r0, r0, sl
 8007ef8:	fa03 f000 	lsl.w	r0, r3, r0
 8007efc:	9b04      	ldr	r3, [sp, #16]
 8007efe:	4303      	orrs	r3, r0
 8007f00:	3401      	adds	r4, #1
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f08:	482c      	ldr	r0, [pc, #176]	; (8007fbc <_vfiprintf_r+0x250>)
 8007f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f0e:	2206      	movs	r2, #6
 8007f10:	f7f8 f986 	bl	8000220 <memchr>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d03f      	beq.n	8007f98 <_vfiprintf_r+0x22c>
 8007f18:	4b29      	ldr	r3, [pc, #164]	; (8007fc0 <_vfiprintf_r+0x254>)
 8007f1a:	bb1b      	cbnz	r3, 8007f64 <_vfiprintf_r+0x1f8>
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	3307      	adds	r3, #7
 8007f20:	f023 0307 	bic.w	r3, r3, #7
 8007f24:	3308      	adds	r3, #8
 8007f26:	9303      	str	r3, [sp, #12]
 8007f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2a:	443b      	add	r3, r7
 8007f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f2e:	e767      	b.n	8007e00 <_vfiprintf_r+0x94>
 8007f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f34:	460c      	mov	r4, r1
 8007f36:	2001      	movs	r0, #1
 8007f38:	e7a5      	b.n	8007e86 <_vfiprintf_r+0x11a>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	3401      	adds	r4, #1
 8007f3e:	9305      	str	r3, [sp, #20]
 8007f40:	4619      	mov	r1, r3
 8007f42:	f04f 0c0a 	mov.w	ip, #10
 8007f46:	4620      	mov	r0, r4
 8007f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f4c:	3a30      	subs	r2, #48	; 0x30
 8007f4e:	2a09      	cmp	r2, #9
 8007f50:	d903      	bls.n	8007f5a <_vfiprintf_r+0x1ee>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0c5      	beq.n	8007ee2 <_vfiprintf_r+0x176>
 8007f56:	9105      	str	r1, [sp, #20]
 8007f58:	e7c3      	b.n	8007ee2 <_vfiprintf_r+0x176>
 8007f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f5e:	4604      	mov	r4, r0
 8007f60:	2301      	movs	r3, #1
 8007f62:	e7f0      	b.n	8007f46 <_vfiprintf_r+0x1da>
 8007f64:	ab03      	add	r3, sp, #12
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	462a      	mov	r2, r5
 8007f6a:	4b16      	ldr	r3, [pc, #88]	; (8007fc4 <_vfiprintf_r+0x258>)
 8007f6c:	a904      	add	r1, sp, #16
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f7fd fb1e 	bl	80055b0 <_printf_float>
 8007f74:	4607      	mov	r7, r0
 8007f76:	1c78      	adds	r0, r7, #1
 8007f78:	d1d6      	bne.n	8007f28 <_vfiprintf_r+0x1bc>
 8007f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f7c:	07d9      	lsls	r1, r3, #31
 8007f7e:	d405      	bmi.n	8007f8c <_vfiprintf_r+0x220>
 8007f80:	89ab      	ldrh	r3, [r5, #12]
 8007f82:	059a      	lsls	r2, r3, #22
 8007f84:	d402      	bmi.n	8007f8c <_vfiprintf_r+0x220>
 8007f86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f88:	f7ff f882 	bl	8007090 <__retarget_lock_release_recursive>
 8007f8c:	89ab      	ldrh	r3, [r5, #12]
 8007f8e:	065b      	lsls	r3, r3, #25
 8007f90:	f53f af12 	bmi.w	8007db8 <_vfiprintf_r+0x4c>
 8007f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f96:	e711      	b.n	8007dbc <_vfiprintf_r+0x50>
 8007f98:	ab03      	add	r3, sp, #12
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <_vfiprintf_r+0x258>)
 8007fa0:	a904      	add	r1, sp, #16
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7fd fda8 	bl	8005af8 <_printf_i>
 8007fa8:	e7e4      	b.n	8007f74 <_vfiprintf_r+0x208>
 8007faa:	bf00      	nop
 8007fac:	080084bc 	.word	0x080084bc
 8007fb0:	080084dc 	.word	0x080084dc
 8007fb4:	0800849c 	.word	0x0800849c
 8007fb8:	08008654 	.word	0x08008654
 8007fbc:	0800865e 	.word	0x0800865e
 8007fc0:	080055b1 	.word	0x080055b1
 8007fc4:	08007d47 	.word	0x08007d47
 8007fc8:	0800865a 	.word	0x0800865a

08007fcc <_sbrk_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d06      	ldr	r5, [pc, #24]	; (8007fe8 <_sbrk_r+0x1c>)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	f7f9 fd96 	bl	8001b08 <_sbrk>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_sbrk_r+0x1a>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_sbrk_r+0x1a>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	20000800 	.word	0x20000800

08007fec <__sread>:
 8007fec:	b510      	push	{r4, lr}
 8007fee:	460c      	mov	r4, r1
 8007ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff4:	f000 f92c 	bl	8008250 <_read_r>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	bfab      	itete	ge
 8007ffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8008000:	181b      	addge	r3, r3, r0
 8008002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008006:	bfac      	ite	ge
 8008008:	6563      	strge	r3, [r4, #84]	; 0x54
 800800a:	81a3      	strhlt	r3, [r4, #12]
 800800c:	bd10      	pop	{r4, pc}

0800800e <__swrite>:
 800800e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008012:	461f      	mov	r7, r3
 8008014:	898b      	ldrh	r3, [r1, #12]
 8008016:	05db      	lsls	r3, r3, #23
 8008018:	4605      	mov	r5, r0
 800801a:	460c      	mov	r4, r1
 800801c:	4616      	mov	r6, r2
 800801e:	d505      	bpl.n	800802c <__swrite+0x1e>
 8008020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008024:	2302      	movs	r3, #2
 8008026:	2200      	movs	r2, #0
 8008028:	f000 f898 	bl	800815c <_lseek_r>
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	4632      	mov	r2, r6
 800803a:	463b      	mov	r3, r7
 800803c:	4628      	mov	r0, r5
 800803e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008042:	f000 b817 	b.w	8008074 <_write_r>

08008046 <__sseek>:
 8008046:	b510      	push	{r4, lr}
 8008048:	460c      	mov	r4, r1
 800804a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804e:	f000 f885 	bl	800815c <_lseek_r>
 8008052:	1c43      	adds	r3, r0, #1
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	bf15      	itete	ne
 8008058:	6560      	strne	r0, [r4, #84]	; 0x54
 800805a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800805e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008062:	81a3      	strheq	r3, [r4, #12]
 8008064:	bf18      	it	ne
 8008066:	81a3      	strhne	r3, [r4, #12]
 8008068:	bd10      	pop	{r4, pc}

0800806a <__sclose>:
 800806a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806e:	f000 b831 	b.w	80080d4 <_close_r>
	...

08008074 <_write_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4d07      	ldr	r5, [pc, #28]	; (8008094 <_write_r+0x20>)
 8008078:	4604      	mov	r4, r0
 800807a:	4608      	mov	r0, r1
 800807c:	4611      	mov	r1, r2
 800807e:	2200      	movs	r2, #0
 8008080:	602a      	str	r2, [r5, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	f7f9 fcef 	bl	8001a66 <_write>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_write_r+0x1e>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_write_r+0x1e>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20000800 	.word	0x20000800

08008098 <__assert_func>:
 8008098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800809a:	4614      	mov	r4, r2
 800809c:	461a      	mov	r2, r3
 800809e:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <__assert_func+0x2c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4605      	mov	r5, r0
 80080a4:	68d8      	ldr	r0, [r3, #12]
 80080a6:	b14c      	cbz	r4, 80080bc <__assert_func+0x24>
 80080a8:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <__assert_func+0x30>)
 80080aa:	9100      	str	r1, [sp, #0]
 80080ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080b0:	4906      	ldr	r1, [pc, #24]	; (80080cc <__assert_func+0x34>)
 80080b2:	462b      	mov	r3, r5
 80080b4:	f000 f81e 	bl	80080f4 <fiprintf>
 80080b8:	f000 f8e9 	bl	800828e <abort>
 80080bc:	4b04      	ldr	r3, [pc, #16]	; (80080d0 <__assert_func+0x38>)
 80080be:	461c      	mov	r4, r3
 80080c0:	e7f3      	b.n	80080aa <__assert_func+0x12>
 80080c2:	bf00      	nop
 80080c4:	2000000c 	.word	0x2000000c
 80080c8:	08008665 	.word	0x08008665
 80080cc:	08008672 	.word	0x08008672
 80080d0:	080086a0 	.word	0x080086a0

080080d4 <_close_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d06      	ldr	r5, [pc, #24]	; (80080f0 <_close_r+0x1c>)
 80080d8:	2300      	movs	r3, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	4608      	mov	r0, r1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	f7f9 fcdd 	bl	8001a9e <_close>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_close_r+0x1a>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_close_r+0x1a>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	20000800 	.word	0x20000800

080080f4 <fiprintf>:
 80080f4:	b40e      	push	{r1, r2, r3}
 80080f6:	b503      	push	{r0, r1, lr}
 80080f8:	4601      	mov	r1, r0
 80080fa:	ab03      	add	r3, sp, #12
 80080fc:	4805      	ldr	r0, [pc, #20]	; (8008114 <fiprintf+0x20>)
 80080fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008102:	6800      	ldr	r0, [r0, #0]
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	f7ff fe31 	bl	8007d6c <_vfiprintf_r>
 800810a:	b002      	add	sp, #8
 800810c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008110:	b003      	add	sp, #12
 8008112:	4770      	bx	lr
 8008114:	2000000c 	.word	0x2000000c

08008118 <_fstat_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d07      	ldr	r5, [pc, #28]	; (8008138 <_fstat_r+0x20>)
 800811c:	2300      	movs	r3, #0
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	4611      	mov	r1, r2
 8008124:	602b      	str	r3, [r5, #0]
 8008126:	f7f9 fcc6 	bl	8001ab6 <_fstat>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	d102      	bne.n	8008134 <_fstat_r+0x1c>
 800812e:	682b      	ldr	r3, [r5, #0]
 8008130:	b103      	cbz	r3, 8008134 <_fstat_r+0x1c>
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	bd38      	pop	{r3, r4, r5, pc}
 8008136:	bf00      	nop
 8008138:	20000800 	.word	0x20000800

0800813c <_isatty_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d06      	ldr	r5, [pc, #24]	; (8008158 <_isatty_r+0x1c>)
 8008140:	2300      	movs	r3, #0
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7f9 fcc5 	bl	8001ad6 <_isatty>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_isatty_r+0x1a>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_isatty_r+0x1a>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20000800 	.word	0x20000800

0800815c <_lseek_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	; (800817c <_lseek_r+0x20>)
 8008160:	4604      	mov	r4, r0
 8008162:	4608      	mov	r0, r1
 8008164:	4611      	mov	r1, r2
 8008166:	2200      	movs	r2, #0
 8008168:	602a      	str	r2, [r5, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	f7f9 fcbe 	bl	8001aec <_lseek>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_lseek_r+0x1e>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	b103      	cbz	r3, 800817a <_lseek_r+0x1e>
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	20000800 	.word	0x20000800

08008180 <__ascii_mbtowc>:
 8008180:	b082      	sub	sp, #8
 8008182:	b901      	cbnz	r1, 8008186 <__ascii_mbtowc+0x6>
 8008184:	a901      	add	r1, sp, #4
 8008186:	b142      	cbz	r2, 800819a <__ascii_mbtowc+0x1a>
 8008188:	b14b      	cbz	r3, 800819e <__ascii_mbtowc+0x1e>
 800818a:	7813      	ldrb	r3, [r2, #0]
 800818c:	600b      	str	r3, [r1, #0]
 800818e:	7812      	ldrb	r2, [r2, #0]
 8008190:	1e10      	subs	r0, r2, #0
 8008192:	bf18      	it	ne
 8008194:	2001      	movne	r0, #1
 8008196:	b002      	add	sp, #8
 8008198:	4770      	bx	lr
 800819a:	4610      	mov	r0, r2
 800819c:	e7fb      	b.n	8008196 <__ascii_mbtowc+0x16>
 800819e:	f06f 0001 	mvn.w	r0, #1
 80081a2:	e7f8      	b.n	8008196 <__ascii_mbtowc+0x16>

080081a4 <memmove>:
 80081a4:	4288      	cmp	r0, r1
 80081a6:	b510      	push	{r4, lr}
 80081a8:	eb01 0402 	add.w	r4, r1, r2
 80081ac:	d902      	bls.n	80081b4 <memmove+0x10>
 80081ae:	4284      	cmp	r4, r0
 80081b0:	4623      	mov	r3, r4
 80081b2:	d807      	bhi.n	80081c4 <memmove+0x20>
 80081b4:	1e43      	subs	r3, r0, #1
 80081b6:	42a1      	cmp	r1, r4
 80081b8:	d008      	beq.n	80081cc <memmove+0x28>
 80081ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081c2:	e7f8      	b.n	80081b6 <memmove+0x12>
 80081c4:	4402      	add	r2, r0
 80081c6:	4601      	mov	r1, r0
 80081c8:	428a      	cmp	r2, r1
 80081ca:	d100      	bne.n	80081ce <memmove+0x2a>
 80081cc:	bd10      	pop	{r4, pc}
 80081ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081d6:	e7f7      	b.n	80081c8 <memmove+0x24>

080081d8 <__malloc_lock>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__malloc_lock+0x8>)
 80081da:	f7fe bf58 	b.w	800708e <__retarget_lock_acquire_recursive>
 80081de:	bf00      	nop
 80081e0:	200007f4 	.word	0x200007f4

080081e4 <__malloc_unlock>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__malloc_unlock+0x8>)
 80081e6:	f7fe bf53 	b.w	8007090 <__retarget_lock_release_recursive>
 80081ea:	bf00      	nop
 80081ec:	200007f4 	.word	0x200007f4

080081f0 <_realloc_r>:
 80081f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f4:	4680      	mov	r8, r0
 80081f6:	4614      	mov	r4, r2
 80081f8:	460e      	mov	r6, r1
 80081fa:	b921      	cbnz	r1, 8008206 <_realloc_r+0x16>
 80081fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008200:	4611      	mov	r1, r2
 8008202:	f7ff bbb9 	b.w	8007978 <_malloc_r>
 8008206:	b92a      	cbnz	r2, 8008214 <_realloc_r+0x24>
 8008208:	f7ff fb4a 	bl	80078a0 <_free_r>
 800820c:	4625      	mov	r5, r4
 800820e:	4628      	mov	r0, r5
 8008210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008214:	f000 f842 	bl	800829c <_malloc_usable_size_r>
 8008218:	4284      	cmp	r4, r0
 800821a:	4607      	mov	r7, r0
 800821c:	d802      	bhi.n	8008224 <_realloc_r+0x34>
 800821e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008222:	d812      	bhi.n	800824a <_realloc_r+0x5a>
 8008224:	4621      	mov	r1, r4
 8008226:	4640      	mov	r0, r8
 8008228:	f7ff fba6 	bl	8007978 <_malloc_r>
 800822c:	4605      	mov	r5, r0
 800822e:	2800      	cmp	r0, #0
 8008230:	d0ed      	beq.n	800820e <_realloc_r+0x1e>
 8008232:	42bc      	cmp	r4, r7
 8008234:	4622      	mov	r2, r4
 8008236:	4631      	mov	r1, r6
 8008238:	bf28      	it	cs
 800823a:	463a      	movcs	r2, r7
 800823c:	f7fd f902 	bl	8005444 <memcpy>
 8008240:	4631      	mov	r1, r6
 8008242:	4640      	mov	r0, r8
 8008244:	f7ff fb2c 	bl	80078a0 <_free_r>
 8008248:	e7e1      	b.n	800820e <_realloc_r+0x1e>
 800824a:	4635      	mov	r5, r6
 800824c:	e7df      	b.n	800820e <_realloc_r+0x1e>
	...

08008250 <_read_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d07      	ldr	r5, [pc, #28]	; (8008270 <_read_r+0x20>)
 8008254:	4604      	mov	r4, r0
 8008256:	4608      	mov	r0, r1
 8008258:	4611      	mov	r1, r2
 800825a:	2200      	movs	r2, #0
 800825c:	602a      	str	r2, [r5, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	f7f9 fbe4 	bl	8001a2c <_read>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_read_r+0x1e>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_read_r+0x1e>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	20000800 	.word	0x20000800

08008274 <__ascii_wctomb>:
 8008274:	b149      	cbz	r1, 800828a <__ascii_wctomb+0x16>
 8008276:	2aff      	cmp	r2, #255	; 0xff
 8008278:	bf85      	ittet	hi
 800827a:	238a      	movhi	r3, #138	; 0x8a
 800827c:	6003      	strhi	r3, [r0, #0]
 800827e:	700a      	strbls	r2, [r1, #0]
 8008280:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008284:	bf98      	it	ls
 8008286:	2001      	movls	r0, #1
 8008288:	4770      	bx	lr
 800828a:	4608      	mov	r0, r1
 800828c:	4770      	bx	lr

0800828e <abort>:
 800828e:	b508      	push	{r3, lr}
 8008290:	2006      	movs	r0, #6
 8008292:	f000 f833 	bl	80082fc <raise>
 8008296:	2001      	movs	r0, #1
 8008298:	f7f9 fbbe 	bl	8001a18 <_exit>

0800829c <_malloc_usable_size_r>:
 800829c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a0:	1f18      	subs	r0, r3, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bfbc      	itt	lt
 80082a6:	580b      	ldrlt	r3, [r1, r0]
 80082a8:	18c0      	addlt	r0, r0, r3
 80082aa:	4770      	bx	lr

080082ac <_raise_r>:
 80082ac:	291f      	cmp	r1, #31
 80082ae:	b538      	push	{r3, r4, r5, lr}
 80082b0:	4604      	mov	r4, r0
 80082b2:	460d      	mov	r5, r1
 80082b4:	d904      	bls.n	80082c0 <_raise_r+0x14>
 80082b6:	2316      	movs	r3, #22
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082c2:	b112      	cbz	r2, 80082ca <_raise_r+0x1e>
 80082c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082c8:	b94b      	cbnz	r3, 80082de <_raise_r+0x32>
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 f830 	bl	8008330 <_getpid_r>
 80082d0:	462a      	mov	r2, r5
 80082d2:	4601      	mov	r1, r0
 80082d4:	4620      	mov	r0, r4
 80082d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082da:	f000 b817 	b.w	800830c <_kill_r>
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d00a      	beq.n	80082f8 <_raise_r+0x4c>
 80082e2:	1c59      	adds	r1, r3, #1
 80082e4:	d103      	bne.n	80082ee <_raise_r+0x42>
 80082e6:	2316      	movs	r3, #22
 80082e8:	6003      	str	r3, [r0, #0]
 80082ea:	2001      	movs	r0, #1
 80082ec:	e7e7      	b.n	80082be <_raise_r+0x12>
 80082ee:	2400      	movs	r4, #0
 80082f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082f4:	4628      	mov	r0, r5
 80082f6:	4798      	blx	r3
 80082f8:	2000      	movs	r0, #0
 80082fa:	e7e0      	b.n	80082be <_raise_r+0x12>

080082fc <raise>:
 80082fc:	4b02      	ldr	r3, [pc, #8]	; (8008308 <raise+0xc>)
 80082fe:	4601      	mov	r1, r0
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	f7ff bfd3 	b.w	80082ac <_raise_r>
 8008306:	bf00      	nop
 8008308:	2000000c 	.word	0x2000000c

0800830c <_kill_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d07      	ldr	r5, [pc, #28]	; (800832c <_kill_r+0x20>)
 8008310:	2300      	movs	r3, #0
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	4611      	mov	r1, r2
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	f7f9 fb6d 	bl	80019f8 <_kill>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	d102      	bne.n	8008328 <_kill_r+0x1c>
 8008322:	682b      	ldr	r3, [r5, #0]
 8008324:	b103      	cbz	r3, 8008328 <_kill_r+0x1c>
 8008326:	6023      	str	r3, [r4, #0]
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	bf00      	nop
 800832c:	20000800 	.word	0x20000800

08008330 <_getpid_r>:
 8008330:	f7f9 bb5a 	b.w	80019e8 <_getpid>

08008334 <_init>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	bf00      	nop
 8008338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833a:	bc08      	pop	{r3}
 800833c:	469e      	mov	lr, r3
 800833e:	4770      	bx	lr

08008340 <_fini>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	bf00      	nop
 8008344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008346:	bc08      	pop	{r3}
 8008348:	469e      	mov	lr, r3
 800834a:	4770      	bx	lr
